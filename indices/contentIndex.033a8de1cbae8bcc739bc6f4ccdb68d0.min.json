{"/":{"title":"Momolem's Digital Garden","content":"\nHello There 👋. This is my own digital garden\n\nMy current topics:\n1. [[CleanCode/Clean Code]]\n\t- [[CleanCode/Clean Code Developer]]\n\t- [[CleanCode/Design Patterns]]\n\n[[Random Page]]","lastmodified":"2023-02-21T12:09:41.902762078Z","tags":null},"/CleanCode/Abstract-Factory":{"title":"Abstract Factory","content":"tags:  #cleancode/designpatterns \n\n# Abstract Factory\n\n## Intent\n**Abstract Factory** is a creational design pattern that lets you produce families of related objects without specifying their concrete classes.\n\n## Problem\nImagine that you’re creating a furniture shop simulator. Your code consists of classes that represent:\n\n1.  A family of related products, say: `Chair` + `Sofa` + `CoffeeTable`.\n    \n2.  Several variants of this family. For example, products `Chair` + `Sofa` + `CoffeeTable` are available in these variants: `Modern`, `Victorian`, `ArtDeco`.\n    \n\n![Product families and their variants.](https://refactoring.guru/images/patterns/diagrams/abstract-factory/problem-en.png)\n\nProduct families and their variants.\n\nYou need a way to create individual furniture objects so that they match other objects of the same family. Customers get quite mad when they receive non-matching furniture.\n\n![](https://refactoring.guru/images/patterns/content/abstract-factory/abstract-factory-comic-1-en.png)\n\nA Modern-style sofa doesn’t match Victorian-style chairs.\n\nAlso, you don’t want to change existing code when adding new products or families of products to the program. Furniture vendors update their catalogs very often, and you wouldn’t want to change the core code each time it happens.\n\n## Solution\nThe first thing the Abstract Factory pattern suggests is to explicitly declare interfaces for each distinct product of the product family (e.g., chair, sofa or coffee table). Then you can make all variants of products follow those interfaces. For example, all chair variants can implement the `Chair` interface; all coffee table variants can implement the `CoffeeTable` interface, and so on.\n\n![The Chairs class hierarchy](https://refactoring.guru/images/patterns/diagrams/abstract-factory/solution1.png)\n\nAll variants of the same object must be moved to a single class hierarchy.\n\nThe next move is to declare the _Abstract Factory_—an interface with a list of creation methods for all products that are part of the product family (for example, `createChair`, `createSofa` and `createCoffeeTable`). These methods must return **abstract** product types represented by the interfaces we extracted previously: `Chair`, `Sofa`, `CoffeeTable` and so on.\n\n![The _Factories_ class hierarchy](https://refactoring.guru/images/patterns/diagrams/abstract-factory/solution2.png)\n\nEach concrete factory corresponds to a specific product variant.\n\nNow, how about the product variants? For each variant of a product family, we create a separate factory class based on the `AbstractFactory` interface. A factory is a class that returns products of a particular kind. For example, the `ModernFurnitureFactory` can only create `ModernChair`, `ModernSofa` and `ModernCoffeeTable` objects.\n\nThe client code has to work with both factories and products via their respective abstract interfaces. This lets you change the type of a factory that you pass to the client code, as well as the product variant that the client code receives, without breaking the actual client code.\n\n![](https://refactoring.guru/images/patterns/content/abstract-factory/abstract-factory-comic-2-en.png)\n\nThe client shouldn’t care about the concrete class of the factory it works with.\n\nSay the client wants a factory to produce a chair. The client doesn’t have to be aware of the factory’s class, nor does it matter what kind of chair it gets. Whether it’s a Modern model or a Victorian-style chair, the client must treat all chairs in the same manner, using the abstract `Chair` interface. With this approach, the only thing that the client knows about the chair is that it implements the `sitOn` method in some way. Also, whichever variant of the chair is returned, it’ll always match the type of sofa or coffee table produced by the same factory object.\n\nThere’s one more thing left to clarify: if the client is only exposed to the abstract interfaces, what creates the actual factory objects? Usually, the application creates a concrete factory object at the initialization stage. Just before that, the app must select the factory type depending on the configuration or the environment settings.\n\n## Structure\n![Abstract Factory design pattern](https://refactoring.guru/images/patterns/diagrams/abstract-factory/structure-indexed.png)\n\n1.  **Abstract Products** declare interfaces for a set of distinct but related products which make up a product family.\n    \n2.  **Concrete Products** are various implementations of abstract products, grouped by variants. Each abstract product (chair/sofa) must be implemented in all given variants (Victorian/Modern).\n    \n3.  The **Abstract Factory** interface declares a set of methods for creating each of the abstract products.\n    \n4.  **Concrete Factories** implement creation methods of the abstract factory. Each concrete factory corresponds to a specific variant of products and creates only those product variants.\n    \n5.  Although concrete factories instantiate concrete products, signatures of their creation methods must return corresponding _abstract_ products. This way the client code that uses a factory doesn’t get coupled to the specific variant of the product it gets from a factory. The **Client** can work with any concrete factory/product variant, as long as it communicates with their objects via abstract interfaces.\n\n## Pseudocode\nThis example illustrates how the **Abstract Factory** pattern can be used for creating cross-platform UI elements without coupling the client code to concrete UI classes, while keeping all created elements consistent with a selected operating system.\n\n![The class diagram for the Abstract Factory pattern example](https://refactoring.guru/images/patterns/diagrams/abstract-factory/example.png)\n\nThe cross-platform UI classes example.\n\nThe same UI elements in a cross-platform application are expected to behave similarly, but look a little bit different under different operating systems. Moreover, it’s your job to make sure that the UI elements match the style of the current operating system. You wouldn’t want your program to render macOS controls when it’s executed in Windows.\n\nThe Abstract Factory interface declares a set of creation methods that the client code can use to produce different types of UI elements. Concrete factories correspond to specific operating systems and create the UI elements that match that particular OS.\n\nIt works like this: when an application launches, it checks the type of the current operating system. The app uses this information to create a factory object from a class that matches the operating system. The rest of the code uses this factory to create UI elements. This prevents the wrong elements from being created.\n\nWith this approach, the client code doesn’t depend on concrete classes of factories and UI elements as long as it works with these objects via their abstract interfaces. This also lets the client code support other factories or UI elements that you might add in the future.\n\nAs a result, you don’t need to modify the client code each time you add a new variation of UI elements to your app. You just have to create a new factory class that produces these elements and slightly modify the app’s initialization code so it selects that class when appropriate.\n\n```kotlin\n// The abstract factory interface declares a set of methods that\n// return different abstract products. These products are called\n// a family and are related by a high-level theme or concept.\n// Products of one family are usually able to collaborate among\n// themselves. A family of products may have several variants,\n// but the products of one variant are incompatible with the\n// products of another variant.\ninterface GUIFactory is\n    method createButton():Button\n    method createCheckbox():Checkbox\n\n// Concrete factories produce a family of products that belong\n// to a single variant. The factory guarantees that the\n// resulting products are compatible. Signatures of the concrete\n// factory's methods return an abstract product, while inside\n// the method a concrete product is instantiated.\nclass WinFactory implements GUIFactory is\n    method createButton():Button is\n        return new WinButton()\n    method createCheckbox():Checkbox is\n        return new WinCheckbox()\n\n// Each concrete factory has a corresponding product variant.\nclass MacFactory implements GUIFactory is\n    method createButton():Button is\n        return new MacButton()\n    method createCheckbox():Checkbox is\n        return new MacCheckbox()\n\n// Each distinct product of a product family should have a base\n// interface. All variants of the product must implement this\n// interface.\ninterface Button is\n    method paint()\n\n// Concrete products are created by corresponding concrete\n// factories.\nclass WinButton implements Button is\n    method paint() is\n        // Render a button in Windows style.\n\nclass MacButton implements Button is\n    method paint() is\n        // Render a button in macOS style.\n\n// Here's the base interface of another product. All products\n// can interact with each other, but proper interaction is\n// possible only between products of the same concrete variant.\ninterface Checkbox is\n    method paint()\n\nclass WinCheckbox implements Checkbox is\n    method paint() is\n        // Render a checkbox in Windows style.\n\nclass MacCheckbox implements Checkbox is\n    method paint() is\n        // Render a checkbox in macOS style.\n\n// The client code works with factories and products only\n// through abstract types: GUIFactory, Button and Checkbox. This\n// lets you pass any factory or product subclass to the client\n// code without breaking it.\nclass Application is\n    private field factory: GUIFactory\n    private field button: Button\n    constructor Application(factory: GUIFactory) is\n        this.factory = factory\n    method createUI() is\n        this.button = factory.createButton()\n    method paint() is\n        button.paint()\n\n// The application picks the factory type depending on the\n// current configuration or environment settings and creates it\n// at runtime (usually at the initialization stage).\nclass ApplicationConfigurator is\n    method main() is\n        config = readApplicationConfigFile()\n\n        if (config.OS == \"Windows\") then\n            factory = new WinFactory()\n        else if (config.OS == \"Mac\") then\n            factory = new MacFactory()\n        else\n            throw new Exception(\"Error! Unknown operating system.\")\n\n        Application app = new Application(factory)\n```\n\n## Applicability\n- **Use the Abstract Factory when your code needs to work with various families of related products, but you don’t want it to depend on the concrete classes of those products—they might be unknown beforehand or you simply want to allow for future extensibility.**\n\tThe Abstract Factory provides you with an interface for creating objects from each class of the product family. As long as your code creates objects via this interface, you don’t have to worry about creating the wrong variant of a product which doesn’t match the products already created by your app.\n\t- Consider implementing the Abstract Factory when you have a class with a set of [[CleanCode/Factory]] that blur its primary responsibility.\n\t- In a well-designed program _each class is responsible only for one thing_. When a class deals with multiple product types, it may be worth extracting its factory methods into a stand-alone factory class or a full-blown Abstract Factory implementation.\n\n## How to Implement\n1.  Map out a matrix of distinct product types versus variants of these products.\n2.  Declare abstract product interfaces for all product types. Then make all concrete product classes implement these interfaces.\n3.  Declare the abstract factory interface with a set of creation methods for all abstract products.\n4.  Implement a set of concrete factory classes, one for each product variant.\n5.  Create factory initialization code somewhere in the app. It should instantiate one of the concrete factory classes, depending on the application configuration or the current environment. Pass this factory object to all classes that construct products.\n6.  Scan through the code and find all direct calls to product constructors. Replace them with calls to the appropriate creation method on the factory object.W\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can be sure that the products you’re getting from a factory are compatible with each other. | The code may become more complicated than it should be, since a lot of new interfaces and classes are introduced along with the pattern. |\n| You avoid tight coupling between concrete products and client code. | |\n| _[[CleanCode/Single Responsibility Principle]]_. You can extract the product creation code into one place, making the code easier to support. ||\n| _[[CleanCode/Open Closed Principle]]_. You can introduce new variants of products without breaking existing client code.|| \n\n## Relations with Other Patterns\n- Many designs start by using [[CleanCode/Factory]] Method (less complicated and more customizable via subclasses) and evolve toward [[CleanCode/Abstract Factory]], [[CleanCode/Prototype]], or [[CleanCode/Builder]] (more flexible, but more complicated).\n- [[CleanCode/Builder]] focuses on constructing complex objects step by step. [[CleanCode/Abstract Factory]] specializes in creating families of related objects. [[CleanCode/Abstract Factory]] returns the product immediately, whereas [[CleanCode/Builder]] lets you run some additional construction steps before fetching the product.\n- [[CleanCode/Abstract Factory]] classes are often based on a set of [[CleanCode/Factory]] Methods, but you can also use [[CleanCode/Prototype]] to compose the methods on these classes.\n- [[CleanCode/Abstract Factory]] can serve as an alternative to [[CleanCode/Facade]] when you only want to hide the way the subsystem objects are created from the client code.\n- You can use [[CleanCode/Abstract Factory]] along with [[CleanCode/Bridge]]. This pairing is useful when some abstractions defined by [[CleanCode/Bridge]] can only work with specific implementations. In this case, [[CleanCode/Abstract Factory]] can encapsulate these relations and hide the complexity from the client code.\n- [[CleanCode/Abstract Factory]], [[CleanCode/Builder]] and [[CleanCode/Prototype]] can all be implemented as [[CleanCode/Singleton]].","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Adapter":{"title":"Adapter","content":"tags:  #cleancode/designpatterns \n\n# Adapter\n\n## Intent\n**Adapter** is a structural design pattern that allows objects with incompatible interfaces to collaborate.\n\n## Problem\nImagine that you’re creating a stock market monitoring app. The app downloads the stock data from multiple sources in XML format and then displays nice-looking charts and diagrams for the user.\n\nAt some point, you decide to improve the app by integrating a smart 3rd-party analytics library. But there’s a catch: the analytics library only works with data in JSON format.\n\n![The structure of the app before integration with the analytics library](https://refactoring.guru/images/patterns/diagrams/adapter/problem-en.png)\n\nYou can’t use the analytics library “as is” because it expects the data in a format that’s incompatible with your app.\n\nYou could change the library to work with XML. However, this might break some existing code that relies on the library. And worse, you might not have access to the library’s source code in the first place, making this approach impossible.\n\n##  Solution\n\nYou can create an _adapter_. This is a special object that converts the interface of one object so that another object can understand it.\n\nAn adapter wraps one of the objects to hide the complexity of conversion happening behind the scenes. The wrapped object isn’t even aware of the adapter. For example, you can wrap an object that operates in meters and kilometers with an adapter that converts all of the data to imperial units such as feet and miles.\n\nAdapters can not only convert data into various formats but can also help objects with different interfaces collaborate. Here’s how it works:\n\n1.  The adapter gets an interface, compatible with one of the existing objects.\n2.  Using this interface, the existing object can safely call the adapter’s methods.\n3.  Upon receiving a call, the adapter passes the request to the second object, but in a format and order that the second object expects.\n\nSometimes it’s even possible to create a two-way adapter that can convert the calls in both directions.\n\n![Adapter’s solution](https://refactoring.guru/images/patterns/diagrams/adapter/solution-en.png)\n\nLet’s get back to our stock market app. To solve the dilemma of incompatible formats, you can create XML-to-JSON adapters for every class of the analytics library that your code works with directly. Then you adjust your code to communicate with the library only via these adapters. When an adapter receives a call, it translates the incoming XML data into a JSON structure and passes the call to the appropriate methods of a wrapped analytics object.\n\n##  Real-World Analogy\n\n![The Adapter pattern example](https://refactoring.guru/images/patterns/content/adapter/adapter-comic-1-en.png)\n\nA suitcase before and after a trip abroad.\n\nWhen you travel from the US to Europe for the first time, you may get a surprise when trying to charge your laptop. The power plug and sockets standards are different in different countries. That’s why your US plug won’t fit a German socket. The problem can be solved by using a power plug adapter that has the American-style socket and the European-style plug.\n\n##  Structure\n\n#### Object adapter\n\nThis implementation uses the object composition principle: the adapter implements the interface of one object and wraps the other one. It can be implemented in all popular programming languages.\n\n![Structure of the Adapter design pattern (the object adapter)](https://refactoring.guru/images/patterns/diagrams/adapter/structure-object-adapter.png)\n\n1.  The **Client** is a class that contains the existing business logic of the program.\n    \n2.  The **Client Interface** describes a protocol that other classes must follow to be able to collaborate with the client code.\n    \n3.  The **Service** is some useful class (usually 3rd-party or legacy). The client can’t use this class directly because it has an incompatible interface.\n    \n4.  The **Adapter** is a class that’s able to work with both the client and the service: it implements the client interface, while wrapping the service object. The adapter receives calls from the client via the adapter interface and translates them into calls to the wrapped service object in a format it can understand.\n    \n5.  The client code doesn’t get coupled to the concrete adapter class as long as it works with the adapter via the client interface. Thanks to this, you can introduce new types of adapters into the program without breaking the existing client code. This can be useful when the interface of the service class gets changed or replaced: you can just create a new adapter class without changing the client code.\n    \n\n#### Class adapter\n\nThis implementation uses inheritance: the adapter inherits interfaces from both objects at the same time. Note that this approach can only be implemented in programming languages that support multiple inheritance, such as C++.\n\n![Adapter design pattern (class adapter)](https://refactoring.guru/images/patterns/diagrams/adapter/structure-class-adapter.png)\n\n1.  The **Class Adapter** doesn’t need to wrap any objects because it inherits behaviors from both the client and the service. The adaptation happens within the overridden methods. The resulting adapter can be used in place of an existing client class.\n    \n\n##  Pseudocode\n\nThis example of the **Adapter** pattern is based on the classic conflict between square pegs and round holes.\n\n![Structure of the Adapter pattern example](https://refactoring.guru/images/patterns/diagrams/adapter/example.png)\n\nAdapting square pegs to round holes.\n\nThe Adapter pretends to be a round peg, with a radius equal to a half of the square’s diameter (in other words, the radius of the smallest circle that can accommodate the square peg).\n\n```kotlin\n// Say you have two classes with compatible interfaces:\n// RoundHole and RoundPeg.\nclass RoundHole is\n    constructor RoundHole(radius) { ... }\n\n    method getRadius() is\n        // Return the radius of the hole.\n\n    method fits(peg: RoundPeg) is\n        return this.getRadius() \u003e= peg.getRadius()\n\nclass RoundPeg is\n    constructor RoundPeg(radius) { ... }\n\n    method getRadius() is\n        // Return the radius of the peg.\n\n// But there's an incompatible class: SquarePeg.\nclass SquarePeg is\n    constructor SquarePeg(width) { ... }\n\n    method getWidth() is\n        // Return the square peg width.\n\n// An adapter class lets you fit square pegs into round holes.\n// It extends the RoundPeg class to let the adapter objects act\n// as round pegs.\nclass SquarePegAdapter extends RoundPeg is\n    // In reality, the adapter contains an instance of the\n    // SquarePeg class.\n    private field peg: SquarePeg\n\n    constructor SquarePegAdapter(peg: SquarePeg) is\n        this.peg = peg\n\n    method getRadius() is\n        // The adapter pretends that it's a round peg with a\n        // radius that could fit the square peg that the adapter\n        // actually wraps.\n        return peg.getWidth() * Math.sqrt(2) / 2\n\n// Somewhere in client code.\nhole = new RoundHole(5)\nrpeg = new RoundPeg(5)\nhole.fits(rpeg) // true\n\nsmall_sqpeg = new SquarePeg(5)\nlarge_sqpeg = new SquarePeg(10)\nhole.fits(small_sqpeg) // this won't compile (incompatible types)\n\nsmall_sqpeg_adapter = new SquarePegAdapter(small_sqpeg)\nlarge_sqpeg_adapter = new SquarePegAdapter(large_sqpeg)\nhole.fits(small_sqpeg_adapter) // true\nhole.fits(large_sqpeg_adapter) // false\n```\n\n##  Applicability\n\n- **Use the Adapter class when you want to use some existing class, but its interface isn’t compatible with the rest of your code.**\n\t The Adapter pattern lets you create a middle-layer class that serves as a translator between your code and a legacy class, a 3rd-party class or any other class with a weird interface.\n\n- **Use the pattern when you want to reuse several existing subclasses that lack some common functionality that can’t be added to the superclass.**\n\t You could extend each subclass and put the missing functionality into new child classes. However, you’ll need to duplicate the code across all of these new classes, which [[Duplicate Code|smells really bad]].\n\t\n\tThe much more elegant solution would be to put the missing functionality into an adapter class. Then you would wrap objects with missing features inside the adapter, gaining needed features dynamically. For this to work, the target classes must have a common interface, and the adapter’s field should follow that interface. This approach looks very similar to the [[CleanCode/Decorator]] pattern.\n\n##  How to Implement\n\n1.  Make sure that you have at least two classes with incompatible interfaces:\n    -   A useful _service_ class, which you can’t change (often 3rd-party, legacy or with lots of existing dependencies).\n    -   One or several _client_ classes that would benefit from using the service class.\n2.  Declare the client interface and describe how clients communicate with the service.\n3.  Create the adapter class and make it follow the client interface. Leave all the methods empty for now.\n4.  Add a field to the adapter class to store a reference to the service object. The common practice is to initialize this field via the constructor, but sometimes it’s more convenient to pass it to the adapter when calling its methods.\n5.  One by one, implement all methods of the client interface in the adapter class. The adapter should delegate most of the real work to the service object, handling only the interface or data format conversion.\n6.  Clients should use the adapter via the client interface. This will let you change or extend the adapters without affecting the client code.\n\n##  Pros and Cons\nPros  | Cons\n --- | --- \n_[[CleanCode/Single Responsibility Principle]]_. You can separate the interface or data conversion code from the primary business logic of the program. | The overall complexity of the code increases because you need to introduce a set of new interfaces and classes. Sometimes it’s simpler just to change the service class so that it matches the rest of your code. \n_[[CleanCode/Open Closed Principle]]_. You can introduce new types of adapters into the program without breaking the existing client code, as long as they work with the adapters through the client interface. |\n\n-    \n\n##  Relations with Other Patterns\n- [[CleanCode/Bridge]] is usually designed up-front, letting you develop parts of an application independently of each other. On the other hand, Adapter is commonly used with an existing app to make some otherwise-incompatible classes work together nicely.\n- Adapter changes the interface of an existing object, while [[CleanCode/Decorator]] enhances an object without changing its [[interface]]. In addition, [[CleanCode/Decorator]] supports recursive composition, which isn’t possible when you use Adapter.\n- Adapter provides a different interface to the wrapped object, [[CleanCode/Proxy]] provides it with the same [[interface]], and [[CleanCode/Decorator]] provides it with an enhanced interface.\n- [[CleanCode/Facade]] defines a new interface for existing objects, whereas Adapter tries to make the existing interface usable. Adapter usually wraps just one object, while [[CleanCode/Facade]] works with an entire subsystem of objects.\n- [[CleanCode/Bridge]], [[CleanCode/State]], [[CleanCode/Strategy]] (and to some degree Adapter) have very similar structures. Indeed, all of these patterns are based on composition, which is delegating work to other objects. However, they all solve different problems. A pattern isn’t just a recipe for structuring your code in a specific way. It can also communicate to other developers the problem the pattern solves.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Automated-Integrationtests":{"title":"Automated Integrationtests","content":"tags: #cleancode \n\n# Automated Integrationtests\n\n\u003e**Warum?**\n\u003eIntegrationstests stellen sicher dass der Code tut was er soll. Diese wiederkehrende Tätigkeit nicht zu automatisieren wäre Zeitverschwendung.\n\n\nDie fundamentale Voraussetzung für jegliche Änderungen am Code haben wir bereits im [[CleanCode/Roter Grad|Roten Grad]] durch den Einsatz eines Versionskontrollsystems gelegt. Wir können ohne Sorge Änderungen am Code vornehmen, ganze Dateien und Verzeichnisse löschen, durch das Versionskontrollsystem ist alles wieder abrufbar.\n\nWenn wir nun Änderungen am Code vornehmen, sollten wir uns sicher sein, dass wir dabei nichts kaputt machen. Und diese Sicherheit können wir nur erlangen, wenn wir nach der Änderung testen, ob die Anwendung sich noch so verhält wie zuvor. Diese Tests nach jeder Änderung per Hand durchzuführen wäre nicht praktikabel, wir müssen sie automatisieren. Ein großes Übel der Softwareentwicklung ist die Angst, bei Änderungen am Code etwas zu übersehen, ein Detail nicht zu berücksichtigen, und dadurch einen Fehler zu verursachen in Code der vorher funktionierte. Dabei spielt es in der Regel sogar nicht mal eine Rolle, ob die Änderungen dazu führen sollen, dass der Code verbessert wird ([[CleanCode/Refaktorisieren]]) oder zusätzliche Anforderungen umgesetzt werden sollen. Solange wir nach Durchführen einer Änderung nicht sicher sind, dass alles noch so funktioniert wie zuvor, bleibt die Angst. Diese führt dazu, dass wir Code im Zweifelsfall so belassen, wie er ist, denn er funktioniert ja. Notwendige Refaktorisierungen werden unterlassen, aus Angst Fehler zu machen.\n\nDamit wir uns auch in schon laufenden Projekten (sogenannte _Brownfield_ Projekte, im Gegensatz zu _Greenfield_ „auf der grünen Wiese“) dieses Sicherheitsnetz schaffen können, benötigen wir Verfahren, die auf vorhandenen Code angewendet werden können. Dazu eignen sich automatisierte Integrationstests. Sie setzen entweder ganz oben auf der Benutzerschnittstelle auf und testen die Anwendung durch alle Layer oder setzen weiter unten auf. In jedem Fall werden mehrere Funktionseinheiten im Zusammenspiel getestet.\n\nBevor wir also Änderungen oder Erweiterungen am Code vornehmen, erstellen wir für die betroffenen Codebereiche Integrationstests. Dabei können Tools und Techniken wie WatiN, UI Automation, etc. verwendet werden. Wünschenswert sind natürlich auch [[CleanCode/Unit Test|Unit Tests]], welche einzelne Funktionseinheiten isoliert testen. Dazu muss der Code allerdings Voraussetzungen erfüllen, die vermutlich nicht immer gegeben sind: der Code muss bereits das _ [[CleanCode/Single Responsibility Principle]]_ berücksichtigen. Andernfalls sind die Abhängigkeiten zwischen den Funktionseinheiten (Komponenten, Klassen oder Methoden) so groß, dass sie nicht isoliert getestet werden können. Das Fernziel ist natürlich eine Codebasis, bei der [[CleanCode/Unit Test|Unit Tests]] möglich sind. Mehr noch: wir werden in Zukunft die Tests vor der Implementierung erstellen (_Test first_). Aber um durch Refaktorisierungen dorthin zu gelangen, bedarf es erst der Integrationstests, um sicherzustellen, dass die Anwendung sich noch so verhält wie vor der [[CleanCode/Refaktorisieren|Refaktorisierung]].\n","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Automated-Unit-Tests":{"title":"Automated Unit Tests","content":"#cleancode \n# Automated [[CleanCode/Unit Test|Unit Tests]]\n\n\u003e**Warum?**\n\u003eNur automatisierte Tests werden auch wirklich konsequent ausgeführt. Je punktgenauer sie Code testen, desto besser.\n\nIm [[CleanCode/Orangener Grad|Orangenen Grad]] haben wir [[CleanCode/Integration Tests]] eingeführt, nun geht es um [[CleanCode/Unit Test|Unit Tests]]. Im Gegensatz zu [[CleanCode/Integration Tests|Integrationstests]] wird bei [[CleanCode/Unit Test|Unit Tests]] eine einzelne Funktionseinheit (vor allem Klassen, aber auch Methoden oder Komponenten) isoliert getestet. Dazu ist es erforderlich, diese Funktionseinheit von ihren Abhängigkeiten befreien zu können. Sollen [[CleanCode/Unit Test|Unit Tests]] im Nachhinein für bestehenden Code ergänzt werden, sind häufig Refaktorisierungen erforderlich. Wir haben durch die [[CleanCode/Integration Tests|Integrationstests]] die Sicherheit, dass wir dabei keine Fehler einbauen.\n\nAutomatisierte Tests bieten zweifachen Nutzen:\n\n-   Sie sparen Zeit\n-   Sie nehmen Angst\n\nJe stärker eine Codebasis in Veränderung begriffen ist, desto eher ist die Zeitersparnis zu spüren. Denn wo Code sich verändert, muss immer wieder Neues und auch Altes (Regressionstests) getestet werden. Da spart Automatisation einfach Zeit. Und je komplexer der Code, desto größer ist die Angstreduktion. Denn wenn komplexer Code verändert werden soll – um Funktionalität hinzuzufügen, ihn zu optimieren oder schlicht zu korrigieren –, da besteht hohe Gefahr, ungewollt Fehler einzuführen. Kleinschrittige automatisierte Tests decken diese jedoch auf, sodass kein Grund zur Angst besteht, zu „verschlimmbessern“.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Beware-of-Premature-Optimization":{"title":"Beware of Premature Optimization","content":"#cleancode \n# Beware of Premature Optimization\n\n\u003e**Warum?**\n\u003eOptimierungen kosten immer viel Aufwand. Wer Vorsicht walten lässt, spart oft wertvolle Ressourcen für das, was dem Kunden wirklich nützt.\n\n\u003e Rules of Optimization:\n\u003e \n\u003e Rule 1: Don’t do it.\n\u003e \n\u003e Rule 2 (for experts only): Don’t do it yet.\n\u003e \n\u003e ~ M.A. Jackson\n\n\u003e More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other single reason – including blind stupidity. ~ W.A. Wulf\n\nIm Vordergrund steht immer die Verständlichkeit von Code. Optimierter Code ist aber oft alles andere als lesbar. Indem er auf das absolut Notwendige in kürzester Form reduziert ist, mag er zwar die funktionalen und nicht funktionalen Anforderungen des Kunden erfüllen – doch er spiegelt sie meist nicht mehr verständlich wider. Das ist kontraproduktiv im Sinne der meist gewünschten Langlebigkeit einer Software. Donald Knuth schrieb bereits 1974: \n\u003e„_We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil._“ \n\u003e\n\u003e(Knuth, Donald. [Structured Programming with go to Statements](http://web.archive.org/web/20130803163743/http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf), ACM Journal Computing Surveys, Vol 6, No. 4, Dec. 1974. p.268.)\n\nDie Pfadfinderregel ist also nicht so gemeint, dass immer weiter nach Codeoptimierungen gestrebt werden sollte. Sie bezieht sich vielmehr auf deren Gegenteil: Verständlichkeit und Wandelbarkeit.\n\nWenn es dem [[CleanCode/Clean Code Developer]] also in den Fingern zuckt, weil er denkt, er könne doch noch ein Quäntchen Performance durch eine Optimierung herausholen, dann sollte er mindestens zweimal überlegen. Zum einen würde er dadurch die Verständlichkeit verschlechtern, zum anderen aber ist es wahrscheinlich, dass solche Optimierung aus mehreren Gründen gar nicht nötig ist. Ist die Performanceschwäche nicht nur punktuell und ein Sonderfall, wird sich die nächste größere Refaktorisierung ihrer wahrscheinlich ohnehin annehmen, denn dann liegt ihr ein grundsätzliches Strukturproblem zugrunde. Oder die nächste Hardwaregeneration bügelt den Performanceknick aus. Oder der Kunde fühlt sich durch ihn gar nicht gestört. Ohnehin muss der Kunde die Forderung nach der Optimierung gestellt haben. Keine Codeveränderung ohne vom Kunden erwarteten Nutzen. Denn nur für ihn ist er bereit zu zahlen.\n\nDer Regel, sich im Zweifelsfall gegen Optimierungen zu entscheiden, liegt somit eine noch fundamentalere zugrunde: YAGNI – _You ain’t gonna need it_. Sie ist in ihrer vollen Ausprägung allerdings erst Bestandteil des [[CleanCode/Blauer Grad]]\n\nPS: Wenn denn entgegen allen Warnungen und Bedenken gerade eine Performanceoptimierung unumgänglich ist, dann sollte sie immer nur aufgrund einer detaillierten Analyse mit einem Profiler begonnen werden. Denn nur wer mit einem Profiler nachvollziehbar Performance-Engpässe lokalisiert hat, kann während und nach der Optimierung prüfen, ob und inwiefern er sie geweitet hat.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Blauer-Grad":{"title":"Blauer Grad","content":"tags: #cleancode \n\n# Blauer Grad\n## Prinzipien\n- [[CleanCode/Design and Implementation Don't Overlapp]]\n- [[CleanCode/Implementation Reflects Design]]\n- [[CleanCode/You Ain't Gonna Need It]]\n\n## Prakiken\n- [[CleanCode/Design before Implementation]]\n- [[CleanCode/Continuous Delivery]]\n- [[CleanCode/Iterative Development]]\n- [[CleanCode/Incremental Development]]\n- [[CleanCode/Component Orientation]]\n- [[CleanCode/Test First]]","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Boy-Scout-Rule":{"title":"Boy Scout Rule","content":"#cleancode \n# Boy Scout Rule\n\n\u003e**Warum?**\n\u003eJede Beschäftigung mit einem Gegenstand macht ihn zumindest ein klein wenig besser. Ganz ohne bürokratische Planung. Fundament und Graswurzelansatz für mehr Qualität.\n\nDas [[CleanCode/Clean Code Developer]] Wertesystem lässt sich nicht mit einem Mal etablieren. Dafür braucht es Zeit. Vor allem, da ein [[CleanCode/Clean Code Developer]] selten auf einer grünen Wiese und auch noch allein arbeitet, ist es schwer, die Prinzipien auf eine gesamte Codebasis anzuwenden. Wir glauben daher, dass es wichtig ist, sich nicht zu hohe Ziele zu setzen. Viel realistischer und motivierender ist es, nur kleine Fortschritte anzustreben – dafür aber kontinuierliche.\n\nZum Fundament des Clean Code Development gehört deshalb für uns die Pfadfinderregel. Sie findet sich auch in [[CleanCode/Clean Code]] und lautet: \n\u003e_Hinterlasse einen Ort immer in einem besseren Zustand als du ihn vorgefunden hast._\n\nAuf die Softwareentwicklung angewandt bedeutet das: [[CleanCode/Clean Code Developer]] hinterlassen Code immer in einem „besseren Zustand“ als sie ihn vorgefunden haben. Nach getaner Arbeit stimmt der Code also mit dem Clean Code Development Wertesystem mehr überein als vorher.\n\nWas ein [[CleanCode/Clean Code Developer]] an ihm dafür getan hat, ist situations-/codeabhängig – und wird natürlich auch durch den Grad bestimmt, an dem er arbeitet. Im [[CleanCode/Roter Grad]] achtet ein [[CleanCode/Clean Code Developer]] z.B. darauf, dass Code, der noch nicht im Repository der Versionsverwaltung war, nun auch dort abgelegt ist. Und er achtet darauf, dass Wiederholungen jeder Art – also Verletzungen des [[CleanCode/DRY]]-Prinzips – „ausgebügelt“ werden.\n\nWo ein [[CleanCode/Clean Code Developer]] Suboptimalitäten im Sinne des CCD-Wertesystems feststellt, bemüht er sich also stetig darum, sie zu verbessern. In kleinen Schritten. Und natürlich bemüht er sich, Suboptimalitäten von vornherein zu vermeiden. Wie gesagt: immer auf der Stufe seiner Entwicklung.\n\nDiese Maxime steht am Anfang der Entwicklung des Clean Code Developers eingedenk der [Broken Windows Theorie](http://de.wikipedia.org/wiki/Broken-Windows-Theorie). Nach ihr beginnt der Verfall von Qualität im allgemeinen Sinn mit Kleinigkeiten, die nur lange genug unbeachtet bleiben.\n\nWenn [[CleanCode/Clean Code Developer]] jedoch nach der Pfadfinderregel arbeiten, kommt es gar nicht erst zu „Broken Windows“ – vorhandene werden eines nach dem anderen repariert. „Risse und Unebenheiten“ im Code schließt die Pfadfinderregel konsequent auf der Basis des CCD-Wertesystems, sodass sich keine weiteren „Ablagerungen“ ansammeln können. Sie wirkt damit proaktiv einer Code-Erosion entgegen. Das halten wir für so fundamental, dass wir sie in den roten Grad aufgenommen haben.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Bridge":{"title":"Bridge","content":"tags:  #cleancode/designpatterns \n\n# Bridge\n\n## Intent\n**Bridge** is a [[CleanCode/Design Patterns#Structural|structural design pattern]] that lets you split a large class or a set of closely related classes into two separate hierarchies—abstraction and implementation—which can be developed independently of each other.\n\n## Problem\n_Abstraction?_ _Implementation?_ Sound scary? Stay calm and let’s consider a simple example.\n\nSay you have a geometric `Shape` class with a pair of subclasses: `Circle` and `Square`. You want to extend this class hierarchy to incorporate colors, so you plan to create `Red` and `Blue` shape subclasses. However, since you already have two subclasses, you’ll need to create four class combinations such as `BlueCircle` and `RedSquare`.\n\n![Bridge pattern problem](https://refactoring.guru/images/patterns/diagrams/bridge/problem-en.png)\n\nNumber of class combinations grows in geometric progression.\n\nAdding new shape types and colors to the hierarchy will grow it exponentially. For example, to add a triangle shape you’d need to introduce two subclasses, one for each color. And after that, adding a new color would require creating three subclasses, one for each shape type. The further we go, the worse it becomes.\n\n## Solution\nThis problem occurs because we’re trying to extend the shape classes in two independent dimensions: by form and by color. That’s a very common issue with class inheritance.\n\nThe Bridge pattern attempts to solve this problem by switching from [[inheritance]] to the object composition. What this means is that you extract one of the dimensions into a separate class hierarchy, so that the original classes will reference an object of the new hierarchy, instead of having all of its state and behaviors within one class.\n\n![Solution suggested by the Bridge pattern](https://refactoring.guru/images/patterns/diagrams/bridge/solution-en.png)\n\nYou can prevent the explosion of a class hierarchy by transforming it into several related hierarchies.\n\nFollowing this approach, we can extract the color-related code into its own class with two subclasses: `Red` and `Blue`. The `Shape` class then gets a reference field pointing to one of the color objects. Now the shape can delegate any color-related work to the linked color object. That reference will act as a bridge between the `Shape` and `Color` classes. From now on, adding new colors won’t require changing the shape hierarchy, and vice versa.\n\n#### Abstraction and Implementation\n\nThe [[Gang of Four|GoF]] book  introduces the terms _Abstraction_ and _Implementation_ as part of the Bridge definition. In my opinion, the terms sound too academic and make the pattern seem more complicated than it really is. Having read the simple example with shapes and colors, let’s decipher the meaning behind the [[Gang of Four|GoF]] book’s scary words.\n\n_Abstraction_ (also called _interface_) is a high-level control layer for some entity. This layer isn’t supposed to do any real work on its own. It should delegate the work to the _implementation_ layer (also called _platform_).\n\nNote that we’re not talking about _interfaces_ or _abstract classes_ from your programming language. These aren’t the same things.\n\nWhen talking about real applications, the abstraction can be represented by a graphical user interface (GUI), and the implementation could be the underlying operating system code (API) which the GUI layer calls in response to user interactions.\n\nGenerally speaking, you can extend such an app in two independent directions:\n\n-   Have several different GUIs (for instance, tailored for regular customers or admins).\n-   Support several different APIs (for example, to be able to launch the app under Windows, Linux, and macOS).\n\nIn a worst-case scenario, this app might look like a giant spaghetti bowl, where hundreds of conditionals connect different types of GUI with various APIs all over the code.\n\n![Managing changes is much easier in modular code](https://refactoring.guru/images/patterns/content/bridge/bridge-3-en.png)\n\nMaking even a simple change to a monolithic codebase is pretty hard because you must understand the _entire thing_ very well. Making changes to smaller, well-defined modules is much easier.\n\nYou can bring order to this chaos by extracting the code related to specific interface-platform combinations into separate classes. However, soon you’ll discover that there are _lots_ of these classes. The class hierarchy will grow exponentially because adding a new GUI or supporting a different API would require creating more and more classes.\n\nLet’s try to solve this issue with the Bridge pattern. It suggests that we divide the classes into two hierarchies:\n\n-   Abstraction: the GUI layer of the app.\n-   Implementation: the operating systems’ APIs.\n\n![Cross-platform architecture](https://refactoring.guru/images/patterns/content/bridge/bridge-2-en.png)\n\nOne of the ways to structure a cross-platform application.\n\nThe abstraction object controls the appearance of the app, delegating the actual work to the linked implementation object. Different implementations are interchangeable as long as they follow a common interface, enabling the same GUI to work under Windows and Linux.\n\nAs a result, you can change the GUI classes without touching the API-related classes. Moreover, adding support for another operating system only requires creating a subclass in the implementation hierarchy.\n\n## Structure\n![Bridge design pattern](https://refactoring.guru/images/patterns/diagrams/bridge/structure-en.png)\n1.  The **Abstraction** provides high-level control logic. It relies on the implementation object to do the actual low-level work.\n2.  The **Implementation** declares the interface that’s common for all concrete implementations. An abstraction can only communicate with an implementation object via methods that are declared here.\n    The abstraction may list the same methods as the implementation, but usually the abstraction declares some complex behaviors that rely on a wide variety of primitive operations declared by the implementation.\n3.  **Concrete Implementations** contain platform-specific code.\n4.  **Refined Abstractions** provide variants of control logic. Like their parent, they work with different implementations via the general implementation interface.\n5.  Usually, the **Client** is only interested in working with the abstraction. However, it’s the client’s job to link the abstraction object with one of the implementation objects.\n\n## Pseudocode\nThis example illustrates how the **Bridge** pattern can help divide the monolithic code of an app that manages devices and their remote controls. The `Device` classes act as the implementation, whereas the `Remote`s act as the abstraction.\n\n![Structure of the Bridge pattern example](https://refactoring.guru/images/patterns/diagrams/bridge/example-en.png)\n\nThe original class hierarchy is divided into two parts: devices and remote controls.\n\nThe base remote control class declares a reference field that links it with a device object. All remotes work with the devices via the general device interface, which lets the same remote support multiple device types.\n\nYou can develop the remote control classes independently from the device classes. All that’s needed is to create a new remote subclass. For example, a basic remote control might only have two buttons, but you could extend it with additional features, such as an extra battery or a touchscreen.\n\nThe client code links the desired type of remote control with a specific device object via the remote’s constructor.\n\n```kotlin\n// The \"abstraction\" defines the interface for the \"control\"\n// part of the two class hierarchies. It maintains a reference\n// to an object of the \"implementation\" hierarchy and delegates\n// all of the real work to this object.\nclass RemoteControl is\n    protected field device: Device\n    constructor RemoteControl(device: Device) is\n        this.device = device\n    method togglePower() is\n        if (device.isEnabled()) then\n            device.disable()\n        else\n            device.enable()\n    method volumeDown() is\n        device.setVolume(device.getVolume() - 10)\n    method volumeUp() is\n        device.setVolume(device.getVolume() + 10)\n    method channelDown() is\n        device.setChannel(device.getChannel() - 1)\n    method channelUp() is\n        device.setChannel(device.getChannel() + 1)\n\n// You can extend classes from the abstraction hierarchy\n// independently from device classes.\nclass AdvancedRemoteControl extends RemoteControl is\n    method mute() is\n        device.setVolume(0)\n\n// The \"implementation\" interface declares methods common to all\n// concrete implementation classes. It doesn't have to match the\n// abstraction's interface. In fact, the two interfaces can be\n// entirely different. Typically the implementation interface\n// provides only primitive operations, while the abstraction\n// defines higher-level operations based on those primitives.\ninterface Device is\n    method isEnabled()\n    method enable()\n    method disable()\n    method getVolume()\n    method setVolume(percent)\n    method getChannel()\n    method setChannel(channel)\n\n// All devices follow the same interface.\nclass Tv implements Device is\n    // ...\n\nclass Radio implements Device is\n    // ...\n\n// Somewhere in client code.\ntv = new Tv()\nremote = new RemoteControl(tv)\nremote.togglePower()\n\nradio = new Radio()\nremote = new AdvancedRemoteControl(radio)\n```\n\n## Applicability\n- **Use the Bridge pattern when you want to divide and organize a monolithic class that has several variants of some functionality (for example, if the class can work with various database servers).**\n\tThe bigger a class becomes, the harder it is to figure out how it works, and the longer it takes to make a change. The changes made to one of the variations of functionality may require making changes across the whole class, which often results in making errors or not addressing some critical side effects.\n\t\n\tThe Bridge pattern lets you split the monolithic class into several class hierarchies. After this, you can change the classes in each hierarchy independently of the classes in the others. This approach simplifies code maintenance and minimizes the risk of breaking existing code.\n- **Use the pattern when you need to extend a class in several orthogonal (independent) dimensions.**\n  The Bridge suggests that you extract a separate class hierarchy for each of the dimensions. The original class delegates the related work to the objects belonging to those hierarchies instead of doing everything on its own.\n- **Use the Bridge if you need to be able to switch implementations at runtime.**\n\tAlthough it’s optional, the Bridge pattern lets you replace the implementation object inside the abstraction. It’s as easy as assigning a new value to a field.\n\nBy the way, this last item is the main reason why so many people confuse the Bridge with the [[CleanCode/Strategy]] pattern. Remember that a pattern is more than just a certain way to structure your classes. It may also communicate intent and a problem being addressed.\n\n## How to Implement\n1.  Identify the orthogonal dimensions in your classes. These independent concepts could be: abstraction/platform, domain/infrastructure, front-end/back-end, or interface/implementation.\n2.  See what operations the client needs and define them in the base abstraction class.\n3.  Determine the operations available on all platforms. Declare the ones that the abstraction needs in the general implementation interface.\n4.  For all platforms in your domain create concrete implementation classes, but make sure they all follow the implementation interface.\n5.  Inside the abstraction class, add a reference field for the implementation type. The abstraction delegates most of the work to the implementation object that’s referenced in that field.\n6.  If you have several variants of high-level logic, create refined abstractions for each variant by extending the base abstraction class.\n7.  The client code should pass an implementation object to the abstraction’s constructor to associate one with the other. After that, the client can forget about the implementation and work only with the abstraction object.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can create platform-independent classes and apps. | You might make the code more complicated by applying the pattern to a highly cohesive class.|\n| The client code works with high-level abstractions. It isn’t exposed to the platform details. | |\n| [[CleanCode/Open Closed Principle]] You can introduce new abstractions and implementations independently from each other. | |\n| [[CleanCode/Single Responsibility Principle]]. You can focus on high-level logic in the abstraction and on platform details in the implementation. | | \n\n\n## Relations with Other Patterns\n- Bridge is usually designed up-front, letting you develop parts of an application independently of each other. On the other hand, [[CleanCode/Adapter]] is commonly used with an existing app to make some otherwise-incompatible classes work together nicely.\n- Bridge, [[CleanCode/State]], [[CleanCode/Strategy]] (and to some degree [[CleanCode/Adapter]]) have very similar structures. Indeed, all of these patterns are based on composition, which is delegating work to other objects. However, they all solve different problems. A pattern isn’t just a recipe for structuring your code in a specific way. It can also communicate to other developers the problem the pattern solves.\n- You can use [[CleanCode/Abstract Factory]] along with Bridge. This pairing is useful when some abstractions defined by Bridge can only work with specific implementations. In this case, [[CleanCode/Abstract Factory]] can encapsulate these relations and hide the complexity from the client code.\n- You can combine [[CleanCode/Builder]] with [[CleanCode/Bridge]]: the director class plays the role of the abstraction, while different builders act as implementations.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Builder":{"title":"Builder","content":"tags:  #cleancode/designpatterns \n\n# Builder\n\n## Intent\n**Builder** is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.\n\n## Problem\nImagine a complex object that requires laborious, step-by-step initialization of many fields and nested objects. Such initialization code is usually buried inside a monstrous constructor with lots of parameters. Or even worse: scattered all over the client code.\n\n![Lots of subclasses create another problem](https://refactoring.guru/images/patterns/diagrams/builder/problem1.png)\n\nYou might make the program too complex by creating a subclass for every possible configuration of an object.\n\nFor example, let’s think about how to create a `House` object. To build a simple house, you need to construct four walls and a floor, install a door, fit a pair of windows, and build a roof. But what if you want a bigger, brighter house, with a backyard and other goodies (like a heating system, plumbing, and electrical wiring)?\n\nThe simplest solution is to extend the base `House` class and create a set of subclasses to cover all combinations of the parameters. But eventually you’ll end up with a considerable number of subclasses. Any new parameter, such as the porch style, will require growing this hierarchy even more.\n\nThere’s another approach that doesn’t involve breeding subclasses. You can create a giant constructor right in the base `House` class with all possible parameters that control the house object. While this approach indeed eliminates the need for subclasses, it creates another problem.\n\n![The telescoping constructor](https://refactoring.guru/images/patterns/diagrams/builder/problem2.png)\n\nThe constructor with lots of parameters has its downside: not all the parameters are needed at all times.\n\nIn most cases most of the parameters will be unused, making [the constructor calls pretty ugly](https://refactoring.guru/smells/long-parameter-list). For instance, only a fraction of houses have swimming pools, so the parameters related to swimming pools will be useless nine times out of ten.\n\n##  Solution\n\nThe Builder pattern suggests that you extract the object construction code out of its own class and move it to separate objects called _builders_.\n\n![Applying the Builder pattern](https://refactoring.guru/images/patterns/diagrams/builder/solution1.png)\n\nThe Builder pattern lets you construct complex objects step by step. The Builder doesn’t allow other objects to access the product while it’s being built.\n\nThe pattern organizes object construction into a set of steps (`buildWalls`, `buildDoor`, etc.). To create an object, you execute a series of these steps on a builder object. The important part is that you don’t need to call all of the steps. You can call only those steps that are necessary for producing a particular configuration of an object.\n\nSome of the construction steps might require different implementation when you need to build various representations of the product. For example, walls of a cabin may be built of wood, but the castle walls must be built with stone.\n\nIn this case, you can create several different builder classes that implement the same set of building steps, but in a different manner. Then you can use these builders in the construction process (i.e., an ordered set of calls to the building steps) to produce different kinds of objects.\n\n![](https://refactoring.guru/images/patterns/content/builder/builder-comic-1-en.png)\n\nDifferent builders execute the same task in various ways.\n\nFor example, imagine a builder that builds everything from wood and glass, a second one that builds everything with stone and iron and a third one that uses gold and diamonds. By calling the same set of steps, you get a regular house from the first builder, a small castle from the second and a palace from the third. However, this would only work if the client code that calls the building steps is able to interact with builders using a common interface.\n\n#### Director\n\nYou can go further and extract a series of calls to the builder steps you use to construct a product into a separate class called _director_. The director class defines the order in which to execute the building steps, while the builder provides the implementation for those steps.\n\n![](https://refactoring.guru/images/patterns/content/builder/builder-comic-2-en.png)\n\nThe director knows which building steps to execute to get a working product.\n\nHaving a director class in your program isn’t strictly necessary. You can always call the building steps in a specific order directly from the client code. However, the director class might be a good place to put various construction routines so you can reuse them across your program.\n\nIn addition, the director class completely hides the details of product construction from the client code. The client only needs to associate a builder with a director, launch the construction with the director, and get the result from the builder.\n\n##  Structure\n\n![Structure of the Builder design pattern](https://refactoring.guru/images/patterns/diagrams/builder/structure-indexed.png)\n\n1.  The **Builder** interface declares product construction steps that are common to all types of builders.\n2.  **Concrete Builders** provide different implementations of the construction steps. Concrete builders may produce products that don’t follow the common interface.\n3.  **Products** are resulting objects. Products constructed by different builders don’t have to belong to the same class hierarchy or interface.\n4.  The **Director** class defines the order in which to call construction steps, so you can create and reuse specific configurations of products.\n5.  The **Client** must associate one of the builder objects with the director. Usually, it’s done just once, via parameters of the director’s constructor. Then the director uses that builder object for all further construction. However, there’s an alternative approach for when the client passes the builder object to the production method of the director. In this case, you can use a different builder each time you produce something with the director.\n\n##  Pseudocode\n\nThis example of the **Builder** pattern illustrates how you can reuse the same object construction code when building different types of products, such as cars, and create the corresponding manuals for them.\n\n![The structure of the Builder pattern example](https://refactoring.guru/images/patterns/diagrams/builder/example-en.png)\n\nThe example of step-by-step construction of cars and the user guides that fit those car models.\n\nA car is a complex object that can be constructed in a hundred different ways. Instead of bloating the `Car` class with a huge constructor, we extracted the car assembly code into a separate car builder class. This class has a set of methods for configuring various parts of a car.\n\nIf the client code needs to assemble a special, fine-tuned model of a car, it can work with the builder directly. On the other hand, the client can delegate the assembly to the director class, which knows how to use a builder to construct several of the most popular models of cars.\n\nYou might be shocked, but every car needs a manual (seriously, who reads them?). The manual describes every feature of the car, so the details in the manuals vary across the different models. That’s why it makes sense to reuse an existing construction process for both real cars and their respective manuals. Of course, building a manual isn’t the same as building a car, and that’s why we must provide another builder class that specializes in composing manuals. This class implements the same building methods as its car-building sibling, but instead of crafting car parts, it describes them. By passing these builders to the same director object, we can construct either a car or a manual.\n\nThe final part is fetching the resulting object. A metal car and a paper manual, although related, are still very different things. We can’t place a method for fetching results in the director without coupling the director to concrete product classes. Hence, we obtain the result of the construction from the builder which performed the job.\n\n```kotlin\n// Using the Builder pattern makes sense only when your products\n// are quite complex and require extensive configuration. The\n// following two products are related, although they don't have\n// a common interface.\nclass Car is\n    // A car can have a GPS, trip computer and some number of\n    // seats. Different models of cars (sports car, SUV,\n    // cabriolet) might have different features installed or\n    // enabled.\n\nclass Manual is\n    // Each car should have a user manual that corresponds to\n    // the car's configuration and describes all its features.\n\n// The builder interface specifies methods for creating the\n// different parts of the product objects.\ninterface Builder is\n    method reset()\n    method setSeats(...)\n    method setEngine(...)\n    method setTripComputer(...)\n    method setGPS(...)\n\n// The concrete builder classes follow the builder interface and\n// provide specific implementations of the building steps. Your\n// program may have several variations of builders, each\n// implemented differently.\nclass CarBuilder implements Builder is\n    private field car:Car\n\n    // A fresh builder instance should contain a blank product\n    // object which it uses in further assembly.\n    constructor CarBuilder() is\n        this.reset()\n\n    // The reset method clears the object being built.\n    method reset() is\n        this.car = new Car()\n\n    // All production steps work with the same product instance.\n    method setSeats(...) is\n        // Set the number of seats in the car.\n\n    method setEngine(...) is\n        // Install a given engine.\n\n    method setTripComputer(...) is\n        // Install a trip computer.\n\n    method setGPS(...) is\n        // Install a global positioning system.\n\n    // Concrete builders are supposed to provide their own\n    // methods for retrieving results. That's because various\n    // types of builders may create entirely different products\n    // that don't all follow the same interface. Therefore such\n    // methods can't be declared in the builder interface (at\n    // least not in a statically-typed programming language).\n    //\n    // Usually, after returning the end result to the client, a\n    // builder instance is expected to be ready to start\n    // producing another product. That's why it's a usual\n    // practice to call the reset method at the end of the\n    // `getProduct` method body. However, this behavior isn't\n    // mandatory, and you can make your builder wait for an\n    // explicit reset call from the client code before disposing\n    // of the previous result.\n    method getProduct():Car is\n        product = this.car\n        this.reset()\n        return product\n\n// Unlike other creational patterns, builder lets you construct\n// products that don't follow the common interface.\nclass CarManualBuilder implements Builder is\n    private field manual:Manual\n\n    constructor CarManualBuilder() is\n        this.reset()\n\n    method reset() is\n        this.manual = new Manual()\n\n    method setSeats(...) is\n        // Document car seat features.\n\n    method setEngine(...) is\n        // Add engine instructions.\n\n    method setTripComputer(...) is\n        // Add trip computer instructions.\n\n    method setGPS(...) is\n        // Add GPS instructions.\n\n    method getProduct():Manual is\n        // Return the manual and reset the builder.\n\n// The director is only responsible for executing the building\n// steps in a particular sequence. It's helpful when producing\n// products according to a specific order or configuration.\n// Strictly speaking, the director class is optional, since the\n// client can control builders directly.\nclass Director is\n    private field builder:Builder\n\n    // The director works with any builder instance that the\n    // client code passes to it. This way, the client code may\n    // alter the final type of the newly assembled product.\n    method setBuilder(builder:Builder)\n        this.builder = builder\n\n    // The director can construct several product variations\n    // using the same building steps.\n    method constructSportsCar(builder: Builder) is\n        builder.reset()\n        builder.setSeats(2)\n        builder.setEngine(new SportEngine())\n        builder.setTripComputer(true)\n        builder.setGPS(true)\n\n    method constructSUV(builder: Builder) is\n        // ...\n\n// The client code creates a builder object, passes it to the\n// director and then initiates the construction process. The end\n// result is retrieved from the builder object.\nclass Application is\n\n    method makeCar() is\n        director = new Director()\n\n        CarBuilder builder = new CarBuilder()\n        director.constructSportsCar(builder)\n        Car car = builder.getProduct()\n\n        CarManualBuilder builder = new CarManualBuilder()\n        director.constructSportsCar(builder)\n\n        // The final product is often retrieved from a builder\n        // object since the director isn't aware of and not\n        // dependent on concrete builders and products.\n        Manual manual = builder.getProduct()\n```\n\n## Applicability\n- **Use the Builder pattern to get rid of a “telescoping constructor”.**\n\t Say you have a constructor with ten optional parameters. Calling such a beast is very inconvenient; therefore, you overload the constructor and create several shorter versions with fewer parameters. These constructors still refer to the main one, passing some default values into any omitted parameters.\n\t```kotlin\n\tclass Pizza {\n\t    Pizza(int size) { ... }\n\t    Pizza(int size, boolean cheese) { ... }\n\t    Pizza(int size, boolean cheese, boolean pepperoni) { ... }\n\t    // ...\n\t```\n\tCreating such a monster is only possible in languages that support method overloading, such as C# or Java.\n\t\n\tThe Builder pattern lets you build objects step by step, using only those steps that you really need. After implementing the pattern, you don’t have to cram dozens of parameters into your constructors anymore.\n\n- **Use the Builder pattern when you want your code to be able to create different representations of some product (for example, stone and wooden houses).**\n\tThe Builder pattern can be applied when construction of various representations of the product involves similar steps that differ only in the details.\n\t\n\tThe base builder interface defines all possible construction steps, and concrete builders implement these steps to construct particular representations of the product. Meanwhile, the director class guides the order of construction.\n \n - **Use the Builder to construct Composite trees or other complex objects.**\n\t The Builder pattern lets you construct products step-by-step. You could defer execution of some steps without breaking the final product. You can even call steps recursively, which comes in handy when you need to build an object tree.\n\t\n\tA builder doesn’t expose the unfinished product while running construction steps. This prevents the client code from fetching an incomplete result.\n\n## How to Implement\n1.  Make sure that you can clearly define the common construction steps for building all available product representations. Otherwise, you won’t be able to proceed with implementing the pattern.\n2.  Declare these steps in the base builder interface.\n3.  Create a concrete builder class for each of the product representations and implement their construction steps.\n   \n    Don’t forget about implementing a method for fetching the result of the construction. The reason why this method can’t be declared inside the builder interface is that various builders may construct products that don’t have a common interface. Therefore, you don’t know what would be the return type for such a method. However, if you’re dealing with products from a single hierarchy, the fetching method can be safely added to the base interface. \n4.  Think about creating a director class. It may encapsulate various ways to construct a product using the same builder object.\n5.  The client code creates both the builder and the director objects. Before construction starts, the client must pass a builder object to the director. Usually, the client does this only once, via parameters of the director’s class constructor. The director uses the builder object in all further construction. There’s an alternative approach, where the builder is passed to a specific product construction method of the director.\n6.  The construction result can be obtained directly from the director only if all products follow the same interface. Otherwise, the client should fetch the result from the builder.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can construct objects step-by-step, defer construction steps or run steps recursively. |  The overall complexity of the code increases since the pattern requires creating multiple new classes. |\n| You can reuse the same construction code when building various representations of products. ||\n| [[CleanCode/Single Responsibility Principle]]. You can isolate complex construction code from the business logic of the product. ||\n\n\n## Relations with Other Patterns\n- Many designs start by using [[CleanCode/Factory]] Method (less complicated and more customizable via subclasses) and evolve toward [[CleanCode/Abstract Factory]], [[CleanCode/Prototype]], or [[CleanCode/Builder]] (more flexible, but more complicated).\n- Builder focuses on constructing complex objects step by step. [[CleanCode/Abstract Factory]] specializes in creating families of related objects. [[CleanCode/Abstract Factory]] returns the product immediately, whereas Builder lets you run some additional construction steps before fetching the product.\n- You can use Builder when creating complex [[CleanCode/Composite]] trees because you can program its construction steps to work recursively.\n- You can combine Builder with [[CleanCode/Bridge]]: the director class plays the role of the abstraction, while different builders act as implementations.\n- [[CleanCode/Abstract Factory|Abstract Factories]], [[CleanCode/Builder|Builders]] and [[CleanCode/Prototype|Prototypes]] can all be implemented as [[CleanCode/Singleton|Singletons]].","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Chain-of-Responsibility":{"title":"Chain of Responsibility","content":"tags:  #cleancode/designpatterns \n\n# Chain of Responsibility\n\n## Intent\n**Chain of Responsibility** is a [[CleanCode/Design Patterns#Behavioral|behavioral design pattern]] that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.\n\n## Problem\nImagine that you’re working on an online ordering system. You want to restrict access to the system so only authenticated users can create orders. Also, users who have administrative permissions must have full access to all orders.\n\nAfter a bit of planning, you realized that these checks must be performed sequentially. The application can attempt to authenticate a user to the system whenever it receives a request that contains the user’s credentials. However, if those credentials aren’t correct and authentication fails, there’s no reason to proceed with any other checks.\n\n![Problem, solved by Chain of Responsibility](https://refactoring.guru/images/patterns/diagrams/chain-of-responsibility/problem1-en.png?id=dde084d408d2b14d632ba82583d16612)\n\nThe request must pass a series of checks before the ordering system itself can handle it.\n\nDuring the next few months, you implemented several more of those sequential checks.\n\n-   One of your colleagues suggested that it’s unsafe to pass raw data straight to the ordering system. So you added an extra validation step to sanitize the data in a request.\n    \n-   Later, somebody noticed that the system is vulnerable to brute force password cracking. To negate this, you promptly added a check that filters repeated failed requests coming from the same IP address.\n    \n-   Someone else suggested that you could speed up the system by returning cached results on repeated requests containing the same data. Hence, you added another check which lets the request pass through to the system only if there’s no suitable cached response.\n    \n\n![With each new check the code became bigger, messier, and uglier](https://refactoring.guru/images/patterns/diagrams/chain-of-responsibility/problem2-en.png?id=88c684d3eab7707bee7b1550a2d8ae04)\n\nThe bigger the code grew, the messier it became.\n\nThe code of the checks, which had already looked like a mess, became more and more bloated as you added each new feature. Changing one check sometimes affected the others. Worst of all, when you tried to reuse the checks to protect other components of the system, you had to duplicate some of the code since those components required some of the checks, but not all of them.\n\nThe system became very hard to comprehend and expensive to maintain. You struggled with the code for a while, until one day you decided to refactor the whole thing.\n\n## Solution\nLike many other behavioral design patterns, the **Chain of Responsibility** relies on transforming particular behaviors into stand-alone objects called _handlers_. In our case, each check should be extracted to its own class with a single method that performs the check. The request, along with its data, is passed to this method as an argument.\n\nThe pattern suggests that you link these handlers into a chain. Each linked handler has a field for storing a reference to the next handler in the chain. In addition to processing a request, handlers pass the request further along the chain. The request travels along the chain until all handlers have had a chance to process it.\n\nHere’s the best part: a handler can decide not to pass the request further down the chain and effectively stop any further processing.\n\nIn our example with ordering systems, a handler performs the processing and then decides whether to pass the request further down the chain. Assuming the request contains the right data, all the handlers can execute their primary behavior, whether it’s authentication checks or caching.\n\n![Handlers are lined-up one by one, forming a chain](https://refactoring.guru/images/patterns/diagrams/chain-of-responsibility/solution1-en.png?id=dccad3e628bd2b8f1856c99369ca6e5b)\n\nHandlers are lined up one by one, forming a chain.\n\nHowever, there’s a slightly different approach (and it’s a bit more canonical) in which, upon receiving a request, a handler decides whether it can process it. If it can, it doesn’t pass the request any further. So it’s either only one handler that processes the request or none at all. This approach is very common when dealing with events in stacks of elements within a graphical user interface.\n\nFor instance, when a user clicks a button, the event propagates through the chain of GUI elements that starts with the button, goes along its containers (like forms or panels), and ends up with the main application window. The event is processed by the first element in the chain that’s capable of handling it. This example is also noteworthy because it shows that a chain can always be extracted from an object tree.\n\n![A chain can be formed from a branch of an object tree](https://refactoring.guru/images/patterns/diagrams/chain-of-responsibility/solution2-en.png?id=cc5bab096e1b37105e1027c43a92cc8a)\n\nA chain can be formed from a branch of an object tree.\n\nIt’s crucial that all handler classes implement the same interface. Each concrete handler should only care about the following one having the `execute` method. This way you can compose chains at runtime, using various handlers without coupling your code to their concrete classes.\n\n## Real-World Analogy\n![Talking with tech support can be hard](https://refactoring.guru/images/patterns/content/chain-of-responsibility/chain-of-responsibility-comic-1-en.png?id=bcd771fd1a61c754911bd580cd80463e)\n\nA call to tech support can go through multiple operators.\n\nYou’ve just bought and installed a new piece of hardware on your computer. Since you’re a geek, the computer has several operating systems installed. You try to boot all of them to see whether the hardware is supported. Windows detects and enables the hardware automatically. However, your beloved Linux refuses to work with the new hardware. With a small flicker of hope, you decide to call the tech-support phone number written on the box.\n\nThe first thing you hear is the robotic voice of the autoresponder. It suggests nine popular solutions to various problems, none of which are relevant to your case. After a while, the robot connects you to a live operator.\n\nAlas, the operator isn’t able to suggest anything specific either. He keeps quoting lengthy excerpts from the manual, refusing to listen to your comments. After hearing the phrase “have you tried turning the computer off and on again?” for the 10th time, you demand to be connected to a proper engineer.\n\nEventually, the operator passes your call to one of the engineers, who had probably longed for a live human chat for hours as he sat in his lonely server room in the dark basement of some office building. The engineer tells you where to download proper drivers for your new hardware and how to install them on Linux. Finally, the solution! You end the call, bursting with joy.\n\n## Structure\n\n![Structure of the Chain Of Responsibility design pattern](https://refactoring.guru/images/patterns/diagrams/chain-of-responsibility/structure.png?id=848f0fc8dca57a44974d63f8181f5406)\n\n1.  The **Handler** declares the interface, common for all concrete handlers. It usually contains just a single method for handling requests, but sometimes it may also have another method for setting the next handler on the chain.\n2.  The **Base Handler** is an optional class where you can put the boilerplate code that’s common to all handler classes.\n    \n    Usually, this class defines a field for storing a reference to the next handler. The clients can build a chain by passing a handler to the constructor or setter of the previous handler. The class may also implement the default handling behavior: it can pass execution to the next handler after checking for its existence.\n3.  **Concrete Handlers** contain the actual code for processing requests. Upon receiving a request, each handler must decide whether to process it and, additionally, whether to pass it along the chain.\n    \n    Handlers are usually self-contained and immutable, accepting all necessary data just once via the constructor.\n4.  The **Client** may compose chains just once or compose them dynamically, depending on the application’s logic. Note that a request can be sent to any handler in the chain—it doesn’t have to be the first one.    \n\n## Pseudocode\nIn this example, the **Chain of Responsibility** pattern is responsible for displaying contextual help information for active GUI elements.\n\n![Structure of the Chain of Responsibility example](https://refactoring.guru/images/patterns/diagrams/chain-of-responsibility/example-en.png?id=4b890b18dbff5193b3b538a438b6c5a4)\n\nThe GUI classes are built with the Composite pattern. Each element is linked to its container element. At any point, you can build a chain of elements that starts with the element itself and goes through all of its container elements.\n\nThe application’s GUI is usually structured as an object tree. For example, the `Dialog` class, which renders the main window of the app, would be the root of the object tree. The dialog contains `Panels`, which might contain other panels or simple low-level elements like `Buttons` and `TextFields`.\n\nA simple component can show brief contextual tooltips, as long as the component has some help text assigned. But more complex components define their own way of showing contextual help, such as showing an excerpt from the manual or opening a page in a browser.\n\n![Structure of the Chain of Responsibility example](https://refactoring.guru/images/patterns/diagrams/chain-of-responsibility/example2-en.png?id=ea5e6ea07b5cab132e51bac80467ca5a)\n\nThat’s how a help request traverses GUI objects.\n\nWhen a user points the mouse cursor at an element and presses the `F1` key, the application detects the component under the pointer and sends it a help request. The request bubbles up through all the element’s containers until it reaches the element that’s capable of displaying the help information.\n\n// The handler interface declares a method for executing a\n// request.\ninterface ComponentWithContextualHelp is\n    method showHelp()\n\n// The base class for simple components.\nabstract class Component implements ComponentWithContextualHelp is\n    field tooltipText: string\n\n```kotlin\n    // The component's container acts as the next link in the\n    // chain of handlers.\n    protected field container: Container\n\n    // The component shows a tooltip if there's help text\n    // assigned to it. Otherwise it forwards the call to the\n    // container, if it exists.\n    method showHelp() is\n        if (tooltipText != null)\n            // Show tooltip.\n        else\n            container.showHelp()\n\n// Containers can contain both simple components and other\n// containers as children. The chain relationships are\n// established here. The class inherits showHelp behavior from\n// its parent.\nabstract class Container extends Component is\n    protected field children: array of Component\n\n    method add(child) is\n        children.add(child)\n        child.container = this\n\n// Primitive components may be fine with default help\n// implementation...\nclass Button extends Component is\n    // ...\n\n// But complex components may override the default\n// implementation. If the help text can't be provided in a new\n// way, the component can always call the base implementation\n// (see Component class).\nclass Panel extends Container is\n    field modalHelpText: string\n\n    method showHelp() is\n        if (modalHelpText != null)\n            // Show a modal window with the help text.\n        else\n            super.showHelp()\n\n// ...same as above...\nclass Dialog extends Container is\n    field wikiPageURL: string\n\n    method showHelp() is\n        if (wikiPageURL != null)\n            // Open the wiki help page.\n        else\n            super.showHelp()\n\n// Client code.\nclass Application is\n    // Every application configures the chain differently.\n    method createUI() is\n        dialog = new Dialog(\"Budget Reports\")\n        dialog.wikiPageURL = \"http://...\"\n        panel = new Panel(0, 0, 400, 800)\n        panel.modalHelpText = \"This panel does...\"\n        ok = new Button(250, 760, 50, 20, \"OK\")\n        ok.tooltipText = \"This is an OK button that...\"\n        cancel = new Button(320, 760, 50, 20, \"Cancel\")\n        // ...\n        panel.add(ok)\n        panel.add(cancel)\n        dialog.add(panel)\n\n    // Imagine what happens here.\n    method onF1KeyPress() is\n        component = this.getComponentAtMouseCoords()\n        component.showHelp()\n```\n\n\n## Applicability\n- **Use the Chain of Responsibility pattern when your program is expected to process different kinds of requests in various ways, but the exact types of requests and their sequences are unknown beforehand.**\n  The pattern lets you link several handlers into one chain and, upon receiving a request, “ask” each handler whether it can process it. This way all handlers get a chance to process the request.\n- **Use the pattern when it’s essential to execute several handlers in a particular order.**\n  Since you can link the handlers in the chain in any order, all requests will get through the chain exactly as you planned.\n- **Use the CoR pattern when the set of handlers and their order are supposed to change at runtime.**\n  If you provide setters for a reference field inside the handler classes, you’ll be able to insert, remove or reorder handlers dynamically.\n\n## How to Implement\n1.  Declare the handler interface and describe the signature of a method for handling requests.\n    \n    Decide how the client will pass the request data into the method. The most flexible way is to convert the request into an object and pass it to the handling method as an argument.\n2.  To eliminate duplicate boilerplate code in concrete handlers, it might be worth creating an abstract base handler class, derived from the handler interface.\n    \n    This class should have a field for storing a reference to the next handler in the chain. Consider making the class immutable. However, if you plan to modify chains at runtime, you need to define a setter for altering the value of the reference field.\n    \n    You can also implement the convenient default behavior for the handling method, which is to forward the request to the next object unless there’s none left. Concrete handlers will be able to use this behavior by calling the parent method.\n3.  One by one create concrete handler subclasses and implement their handling methods. Each handler should make two decisions when receiving a request:\n    \n    -   Whether it’ll process the request.\n    -   Whether it’ll pass the request along the chain.\n4.  The client may either assemble chains on its own or receive pre-built chains from other objects. In the latter case, you must implement some factory classes to build chains according to the configuration or environment settings.\n5.  The client may trigger any handler in the chain, not just the first one. The request will be passed along the chain until some handler refuses to pass it further or until it reaches the end of the chain.\n6.  Due to the dynamic nature of the chain, the client should be ready to handle the following scenarios:\n    \n    -   The chain may consist of a single link.\n    -   Some requests may not reach the end of the chain.\n    -   Others may reach the end of the chain unhandled.\n\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n|You can control the order of request handling. | Some requests may end up unhandled. |\n| [[CleanCode/Single Responsibility Principle]]. You can decouple classes that invoke operations from classes that perform operations. | |\n| [[CleanCode/Open Closed Principle]]. You can introduce new handlers into the app without breaking the existing client code. ||\n\n## Relations with Other Patterns\n- [[CleanCode/Chain of Responsibility]], [[CleanCode/Command]], [[CleanCode/Mediator]] and [[CleanCode/Observer]] address various ways of connecting senders and receivers of requests:\n\t- [[CleanCode/Chain of Responsibility]] passes a request sequentially along a dynamic chain of potential receivers until one of them handles it.\n\t- [[CleanCode/Command]] establishes unidirectional connections between senders and receivers.\n\t- [[CleanCode/Mediator]] eliminates direct connections between senders and receivers, forcing them to communicate indirectly via a mediator object.\n\t- [[CleanCode/Observer]] lets receivers dynamically subscribe to and unsubscribe from receiving requests.\n- [[CleanCode/Chain of Responsibility]] is often used in conjunction with [[CleanCode/Composite]]. In this case, when a leaf component gets a request, it may pass it through the chain of all of the parent components down to the root of the object tree.\n- Handlers in [[CleanCode/Chain of Responsibility]] can be implemented as [[CleanCode/Command|Commands]]. In this case, you can execute a lot of different operations over the same context object, represented by a request.\n\t\n\tHowever, there’s another approach, where the request itself is a Command object. In this case, you can execute the same operation in a series of different contexts linked into a chain.\n- [[CleanCode/Chain of Responsibility]] and [[CleanCode/Decorator]] have very similar class structures. Both patterns rely on recursive composition to pass the execution through a series of objects. However, there are several crucial differences.\n\t\n\tThe [[CleanCode/Chain of Responsibility|CoR]] handlers can execute arbitrary operations independently of each other. They can also stop passing the request further at any point. On the other hand, various Decorators can extend the object’s behavior while keeping it consistent with the base interface. In addition, decorators aren’t allowed to break the flow of the request.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Clean-Code":{"title":"Clean Code","content":"#cleancode \n# CleanCode\nClean Code sind Praktiken, welche die Qualität des Codes durch BestPractices verbessern sollen.\n\nDie Prinzipien basieren Hauptsächlich auf dem Buch [[Clean Code (Book)]] von [[CleanCode/Robert C. Martin]].\n\nEin Praktischer Ansatz um Clean Code zu meistern ist der [[CleanCode/Clean Code Developer]]","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Clean-Code-Developer":{"title":"Clean Code Developer","content":"#cleancode \n# Clean Code Developer\n\n## Die Grade\n- [[CleanCode/Roter Grad]]\n- [[CleanCode/Orangener Grad]]\n- [[CleanCode/Gelber Grad]]\n- [[CleanCode/Grüner Grad]]\n- [[CleanCode/Blauer Grad]]\n- [[CleanCode/Weißer Grad]]\n## Wertesystem\n### Wandelbarkeit\n\nWir möchten diesen Abschnitt mit einer provokant anmutenden These beginnen:\n\n**Es gibt keine Softwarewartung!**\n\nWartung ist ein pro-aktiver Vorgang. In Fertigungsanlagen werden regelmäßig Teile getauscht, bevor diese kaputt sind. Sie werden getauscht, weil Erfahrungswerte zeigen, dass die Zuverlässigkeit beim Weiterbetrieb unter einen kritischen Wert sinken würde. Bevor also die ganze Anlage zum Stillstand kommt, werden die kritischen Teile rechtzeitig vorher getauscht. Jeder Autobesitzer weiß, dass er regelmäßig einen Ölwechsel vornehmen lassen muss. Nicht etwa, weil das Öl zu dem Zeitpunkt aufgebraucht wäre, nicht einmal deshalb, weil das Öl zu dem Zeitpunkt bereits völlig wirkungslos wäre. Nein, es wird getauscht, weil Erfahrungswerte des Herstellers zeigen, dass der Motor durch den rechtzeitigen Ölwechsel geschont wird und somit länger hält.\n\nAll das gibt es bei Software nicht. Software ist so, wie sie ist. Meist enthält sie Fehler. Doch auch diese Fehler sind so, wie sie sind. Man kann nichts pro-aktiv unternehmen, um den Zustand der Software zu verbessern.\n\nNatürlich gibt es beim Betrieb der Software pro-aktive Handlungen. So sollte vielleicht regelmäßig geprüft werden, ob die Logdateien noch ausreichend freien Platz auf der Festplatte lassen, ob eine Datenbank überläuft oder der Speicher sich zunehmend füllt. Aber die Software an sich kann nicht pro-aktiv gewartet werden. Jegliche Änderung oder Erweiterung findet statt, um einen Fehler zu beseitigen oder neue bzw. geänderte Anforderungen umzusetzen.\n\nDamit Änderungen möglich sind, muss die Software eine innere Struktur haben, die solche Änderungen begünstigt. Dies bezeichnen wir als Wandelbarkeit. Software wird in der Regel über lange Zeiträume betrieben. Während dieser Zeit ändern sich die Rahmenbedingungen, müssen Features ergänzt werden. Im Idealfall kostet die Implementierung eines Features einen festen Betrag, der unabhängig davon ist, wann das Feature realisiert wird.\n\nIn der Praxis steigt der Preis allerdings für ein Feature, je später es realisiert wird. Am Anfang sind Features preiswert, am Ende ist es gar nicht mehr möglich Features zu ergänzen, weil niemand mehr durchblickt. Die Software wird weggeworfen und neu entwickelt. Bis man an diesem Punkt ankommt, steigen die Kosten exponentiell. Das gemeine an exponentiellem Wachstum sind zwei Dinge: 1.) Anfangs erkennt man kaum, dass die Kosten anwachsen. Die Steigerungen sind moderat. 2.) Wenn man dann erkennt, dass die Kosten steigen, ist es zu spät. Die Steigerung schreitet dann plötzlich so schnell voran, dass ein Gegensteuern nicht mehr möglich ist.\n\nJe einfacher die Software an geänderte Rahmenbedingungen angepasst werden kann, desto höher ist ihre Wandelbarkeit. Doch Wandelbarkeit erhält man nicht nachträglich. Sie muss von vorneherein berücksichtigt werden. Die Software muss darauf ausgelegt sein.\n\nDazu ein Beispiel: Klassen sollten genau eine Verantwortlichkeit haben. Ist eine Klasse für mehr als eine Sache zuständig, ist es schwerer sie zu überblicken. Das behindert Änderungen, denn diese bedingen, dass man den Quellcode versteht, der geändert werden soll. Des weiteren steigt die Kopplung zwischen den Klassen. Plötzlich hängt alles mit allem zusammen. Dies kann nur verhindert werden, indem Funktionseinheiten eine klar definierte Verantwortlichkeit haben und man die Kopplung im Blick behält. Hat man in einem Softwaresystem eine Reihe von Klassen angesammelt, die jeweils für mehrere Dinge verantwortlich sind, ist es im Nachhinein nur schwer möglich, diesen Zustand zu beseitigen. Die Kopplung ist so groß, dass es schwer fällt, einzelne Funktionseinheiten heraus zu lösen. Sollen in diesem Dickicht neue Features realisiert werden, ist das sehr aufwändig. Wenn nicht rechtzeitig begonnen wird, das Dickicht zu lichten, wird die Situation mit jedem mal schlimmer. Ab einem gewissen Punkt ist es dann kaum noch möglich, neue Features zu ergänzen. Der Super-GAU der Softwareentwicklung.\n\nWir meinen, dass es soweit nicht kommen muss. Berücksichtigt man Wandelbarkeit von vorne herein, kann Software über lange Zeiträume weiter entwickelt werden. Die Kosten pro Feature mögen dabei im Laufe der Zeit leicht ansteigen. Aber keinesfalls exponentiell!\n\n### Korrektheit\n\nSoftware muss funktional korrekt sein. Ein Buchhaltungsprogramm muss die Buchungen ordnungsgemäß verbuchen, eine Tabellenkalkulation muss richtig rechnen. Und auch die nicht-funktionalen Anforderungen müssen erfüllt sein. Das Programm muss schonend mit Ressourcen wie Speicher, Prozessorzeit, Plattenplatz, etc. umgehen, die Antwortzeiten müssen in einem definierten Rahmen liegen. Erst wenn alle Anforderungen erfüllt sind, ist die erstellte Software korrekt.\n\nDass Korrektheit erforderlich ist, wird niemand bestreiten. Doch die Frage ist, was konkret dafür getan wird. Es reicht unserer Ansicht nach nicht aus, Software nach deren Erstellung durch eine Testabteilung zu leiten, deren Aufgabe es ist, Fehler zu finden. Wir meinen, Korrektheit muss bereits während der Entwicklung berücksichtigt werden. Bereits die Entwickler müssen sich mit der Frage der Korrektheit auseinandersetzen. Und damit sie das überhaupt können, muss ihnen klar sein, was die Anforderungen sind. Schon daran mangelt es zu oft. Entwickler werden beauftragt, ein Feature zu implementieren, ohne ihnen präzise zu sagen, was die Abnahmekriterien für das Feature sind. Doch hier geht es nicht darum, Schwarzer Peter zu spielen und einen Schuldigen außerhalb der Entwicklungsabteilungen zu suchen. Schließlich ist es die Aufgabe der Entwickler, bei unklaren Anforderungen nachzufragen, statt in ihre Glaskugel zu schauen.\n\nVerglichen mit dem Automobilbau steht die Softwareentwicklung beim Thema Korrektheit schlecht da. Ein Auto besteht aus vielen Teilen, deren Korrektheit jeweils einzeln nachgewiesen und überprüft werden kann. Stellen Sie sich vor, Sie müssten zur Fehlersuche mit einem Meßgerät in der Hand auf der Motorhaube des Autos sitzen, um dort verfolgen zu können, was sich in der Maschine abspielt. Mit Tempo 200 auf der Autobahn. Kommt Ihnen komisch vor? Ein Debugger wird in vielen Fällen genau so eingesetzt. Das halten wir für falsch.\n\n### Produktionseffizienz\n\nAm Ende spielen natürlich auch die Entwicklungszeit und der Preis der Software eine Rolle. Und der ist höher, wenn die Produktion der Software nicht effizient erfolgt. Das beginnt bei manuellen Arbeitsschritten, die nicht automatisiert werden und endet bei hohen Fehlerraten die mehrmaliges Nachbessern erfordern. In letzter Konsequenz bedeutet Produktionseffizienz, dass die Software über Jahre oder gar Jahrzehnte weiterentwickelt werden kann, statt irgendwann wieder von vorne beginnen zu müssen. Gleichzeitig reduziert eine hohe Produktionseffizienz die Anfälligkeit für Fehler.\n\nDie Produktionseffizienz als Wert ist ferner wichtig, um die anderen Werte in ein maßvolles Verhältnis zu setzen. Wer unendlich viel Aufwand für die Korrektheit treibt, macht am Ende auch etwas falsch.\n\n### Kontinuierliche Verbesserung\n\nOhne Rückschau ist keine Weiterentwicklung möglich. Nur wer reflektiert, wie er eine Aufgabenstellung gelöst hat, kann feststellen, ob der gewählte Weg einfach oder beschwerlich war. Lernen basiert auf Reflexion.\n\nIn einer jungen Wissenschaft wie der Informatik ist es wichtig, stets neue Erkenntnisse zu berücksichtigen. Dazu ist Reflexion auf allen Ebenen erforderlich. Angefangen beim Reflektieren über die Implementation beim Pair Programming oder Code Review, das tägliche Reflektieren des Teams, die Reflexion nach jeder Iteration, bis hin zur Reflexion der gesamten Branche über ihr Tun. Ohne Reflexion keine Weiterentwicklung.\n\n### Prinzipien und Praktiken\n\nDas Wertesystem leitet Clean Code Developer in ihrer täglichen Arbeit. Es enthält keine Problemlösungen, sondern definiert Rahmenbedingungen für Problemlösungen. Die vier Werte sind für eine konkrete alltägliche Umsetzung jedoch zu abstrakt. Daher haben wir Bausteine zusammengetragen, die jeweils mindestens einen der Werte befördern. Diese konkreten Bausteine teilen wir in zwei Kategorien: Prinzipien und Praktiken.\n\n#### Prinzipien\n\nDie Clean Code Developer Prinzipien sind die grundlegenden Gesetzmäßigkeiten für die Strukturierung von Software. Sie sind entweder zu anderen Rahmenbedingungen orthogonal oder ihnen übergeordnet. Code sollte immer im Einklang mit einer maximalen Zahl von Prinzipien sein. Natürlich haben sie nicht „die Macht“ von Naturgesetzen, denen niemand zuwiderhandeln kann. Aber sie sind mit ihnen in Bezug auf die Softwareentwicklung gleichauf in ihrer Fundamentalität. Wo ein Prinzip nicht eingehalten wird, tritt also nicht unbedingt sofort ein negativer Effekt ein, aber kurz- bis mittelfristig bleiben Zuwiderhandlungen nicht ohne Schmerz. Der drückt sich in Mühe beim Codeverständnis aus oder im hohen Aufwand, um Änderungen einzubringen. Ultimativ ist er, wenn Software nicht mehr evolvierbar ist. Ob ein Prinzip eingehalten wurde, kann man dem Code immer ansehen.\n\n#### Praktiken\n\nPraktiken sind Techniken und Methoden, die ständig zum Einsatz kommen. Sie beschreiben, was Clean Code Developer praktisch tun. Motto der Praktiken: „Tue es immer so. Jeden Tag, jederzeit.“ Es sind handfeste Handlungsanweisungen, die manchmal des Einsatzes von Werkzeugen bedürfen. Ob einer Praktik gefolgt wird, kann man dem Code nicht immer ansehen.\n\n## Die Tugenden\n### Prinzipielles\n\n#### 1. Schätze Variation (Value Variation (VV))\n\nWerte: Wandelbarkeit, Kontinuierliche Verbesserung\n\n#### 2. Tue nur das Nötigste (Do Only What´s Neccessary (DOWN))\n\nWerte: Produktionseffizienz, Wandelbarkeit\n\n- Vorsicht vor Optimierungen! (Prinzip des [[CleanCode/Roter Grad|roten Grades]])\n- [[CleanCode/You Ain't Gonna Need It]] (Prinzip des [[CleanCode/Blauer Grad|blauen Grades]])\n- [[CleanCode/KISS]] (Prinzip des [[CleanCode/Roter Grad|roten Grades]])\n\n#### 3. Isoliere Aspekte (Isolate Aspects (IA))\n\nWerte: \n- Wandelbarkeit\n- [[CleanCode/DRY]]\n- [[CleanCode/Separation of Concerns]]\n- [[CleanCode/Single Level of Abstraction]]\n- [[CleanCode/Single Responsibility Principle]]\n- [[CleanCode/Interface Segragation Principle]]\n- [[CleanCode/Design and Implementation Don't Overlapp]]\n- [[CleanCode/Integration Operation Segregation Principle (IOSP)]]\n\n#### 4. Minimiere Abhängigkeiten (Minimize Dependencies (MD))\n\nWerte:\n-   Wandelbarkeit\n- [[CleanCode/Dependency Inversion Principle]]\n- [[CleanCode/Information Hiding Principle]]\n- [[CleanCode/Law of Demeter]]\n- [[CleanCode/Tell, don't ask]]\n\n#### 5. Halte Versprechen ein (Honor Pledges (HP))\n\nWerte: \n- Wandelbarkeit oder auch: Minimize Surprises\n- [[CleanCode/Liskov Substitution Principle]]\n- [[CleanCode/Principle of Least Astonishment]]\n- Implementation spiegelt Entwurf\n- [[CleanCode/Favour Composition over Inheritance]] (FCoI)\n\n### Praktisches\n\n#### 1. Umarme Unsicherheit (Embrace Uncertainty (EU))\n\nWerte: Wandelbarkeit, Kontinuierliche Verbesserung\n\nEin Versionskontrollsystem einsetzenAutomatisierte IntegrationstestsAutomatisierte Unit TestsMockups (Testattrappen)Continuous IntegrationInversion of Control Container\n\n#### 2. Fokussiere (Focus (F))\n\nWerte: Produktionseffizienz\n\nKomponentenorientierungTest firstLimit WIP // neu\n\n#### 3. Wertschätze Qualität (Value Quality (VQ))\n\nWerte: Produktionseffizienz\n\nAkzeptiere nur hohe Qualität // neuAutomatisierte Unit TestsReviews\n\n#### 4. Mach fertig (Get Things Done (GTD))\n\nWerte: Produktionseffizienz\n\nIterative EntwicklungContinuous DeliveryLimit WIP\n\n#### 5. Halte Ordnung (Stay Clean (SC))\n\nWerte: Wandelbarkeit, Korrektheit, Produktionseffizienz\n\nDie Pfadfinderregel beachtenKomplexe RefaktorisierungenEinfache Refaktorisierungsmuster anwendenStatische Codeanalyse (Metriken)Code Coverage AnalyseSource Code Konventionen // ehemals Prinzip\n\n#### 6. Bleib am Ball (Keep Moving (KM))\n\nWerte: Kontinuierliche Verbesserung\n\nLesen, Lesen, LesenTeilnahme an FachveranstaltungenErfahrung weitergebenTäglich reflektierenRoot Cause AnalysisMessen von FehlernIssue TrackingRegelmäßige Retrospektiven // neu\n\n## Source\n\n[Clean Code Developer](https://clean-code-developer.de/)","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Code-Coverage-Analysis":{"title":"Code Coverage Analysis","content":"tags: #cleancode \n\n# Code Coverage Analysis\n\n\u003e**Warum?**\n\u003eTraue nur Tests, von denen du weißt, dass sie auch wirklich das Testareal abdecken.\n\n[[CleanCode/Unit Test|Unit Tests]] sollten nach Möglichkeit alle Pfade durch unseren Code abdecken. Nur so gewinnen wir das Vertrauen, dass der Code korrekt arbeitet. Um in Erfahrung zu bringen, welche Codebereiche bislang nicht durch Tests abgedeckt sind, bedienen wir uns der _Code Coverage Analyse_. Diese dient dazu, Bereiche im Code aufzudecken, die noch nicht während der automatisierten Tests ausgeführt werden.\n\n[[CleanCode/Unit Test|Unit Tests]] sollten eigentlich 100% des zu testenden Codes abdecken. Zwar bedeutet das nicht automatisch, dass genügend Tests existieren, doch weniger als 100% Code Coverage zeigen an, dass es noch Taschen von Code gibt, über die überhaupt noch keine Korrektheitsaussage gemacht werden kann. 100% Codeabdeckung sind deshalb immer anzustreben.\n\nIn der Praxis zeigt es sich jedoch, dass 100% Codeabdeckung nicht immer mit unmittelbar vertretbarem Aufwand erreicht werden können. Wie auch sonst im Leben kann die Mühe für die letzten 2,3,4 Prozent überproportional wachsen. Deshalb kann es nach genauer Analyse der Abdeckungslage akzeptabel sein, mit weniger als 100% zufrieden zu sein.\n\nUnterhalb von 90% ist die Abdeckung dann allerdings so löchrig, dass sie als unprofessionell anzusehen ist. Wer also mit automatischen Tests beginnt, sollte immer auch gleichzeitig die Codeabdeckung messen. Sonst lässt sich keine Aussage über die Qualität der Tests machen.\n\nFür die Messung der Codeüberdeckung gibt es zwei einfache Kennzahlen, die als C0- und C1-Kennzahlen bezeichnet werden. Die C0-Kennzahl misst die Anweisungsüberdeckung, wogegen die C1-Kennzahl die Entscheidungsüberdeckung bzw. die Zweigüberdeckung misst.\n\n```csharp\nC0 = (Anzahl der getesteten Anweisungen / Anzahl der gesamten Anweisungen) * 100%\n```\n\n```csharp\nC1 = (Anzahl der getesteten Entscheidungen bzw. Zweige / Anzahl der gesamten Entscheidungen bzw. Zweige) * 100%\n```\n\nC1 ist dabei die stärkere Kennzahl, da 100% Entscheidungsüberdeckung bzw. Zweigüberdeckung 100% Anweisungsüberdeckung impliziert. Der Umkehrschluss gilt nicht.\n\nDer Anweisungsüberdeckungstest sowie der Zweigüberdeckungstest arbeiten auf Basis eines [Kontrollflussgraphen](http://de.wikipedia.org/wiki/Kontrollflussgraph) während der Entscheidungsüberdeckungstest direkt auf dem Quellcode basiert. Die Testverfahren Anweisungsüberdeckungstest und Zweigüberdeckungstest sind sehr gut unter [](http://de.wikipedia.org/wiki/Kontrollflussorientierte_Testverfahren)[http://de.wikipedia.org/wiki/Kontrollflussorientierte_Testverfahren](http://de.wikipedia.org/wiki/Kontrollflussorientierte_Testverfahren) beschrieben.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Code-Reviews":{"title":"Code Reviews","content":"tags: #cleancode \n\n# Code Reviews\n\n\u003e**Warum?**\n\u003eVier Augen sehen mehr als zwei. Wenn der eine Entwickler dem anderen seinen Code erklärt, tauchen meist Details auf, die bislang nicht bedacht wurden.\n\nReviews kommen vereinfacht in zwei Spielarten daher: als kontinuierlicher Prozess beim [[Pair Programming]], als eigenständiger Prozessschritt beim Code Review. Das Ziel ist in beiden Fällen das gleiche: der Code soll von einem zweiten Entwickler begutachtet werden. Dies beugt der „Betriebsblindheit“ vor. Schon die Tatsache dass ein Entwickler seinen Code einem anderen Entwickler vorstellt und beschreibt, führt zu Aha Erlebnissen.\n\nIn der Regel wird erst durch die Diskussion mit anderen Entwicklern deutlich, wo die Stärken und Schwächen einer Codebasis liegen. Gerade der Prozess der ständigen Verbesserung bedingt es, sich mit der Sichtweise anderer Entwickler auseinander zu setzen.\n\nSelbstverständlich ist nicht nur der Quellcode eine geeignete Basis für Reviews. Sie bieten eine günstige Möglichkeit, die Ergebnisse jeder Entwicklungstätigkeit zu überprüfen, sofern sie in einem „lesbaren“ Ergebnis münden. Neben rein informellen Reviews, wie dem [[Pair Programming]] oder der Begutachtung durch eine zweite Person gibt es auch das formale Review mit einem Reviewprozess sowie entsprechenden Rollen. Weitere bekannte Arten des Review sind z.B. [[Walkthrough]], [[Technisches Review]], [[Peer Review]] und [[Inspektion]].\n\nReviews ergänzen dynamische Tests, wie z.B. den automatischen [[CleanCode/Unit Test]] oder den automatischen Integrationstest aus dem [[CleanCode/Gelber Grad|Gelben Grad]] bzw. [[CleanCode/Orangener Grad|Orangenen Grad]] Im Gegensatz zu diesen Tests, sind Reviews auch sehr gut geeignet, Fehler in den Anforderungen zu finden. Auch können sie bereits sehr früh im Entwicklungsprozess eingesetzt und Fehler dadurch auch sehr früh gefunden werden. Und um so früher Fehler gefunden werden, um so günstiger ist auch deren Beseitigung.\n\nAn den orangen Grad schließt sich der [[CleanCode/Gelber Grad|Gelbe Grad]] an.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Command":{"title":"Command","content":"tags:  #cleancode/designpatterns \n\n# Command\n\n## Intent\n**Command** is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the request. This transformation lets you pass requests as a method arguments, delay or queue a request’s execution, and support undoable operations.\n\n## Problem\nImagine that you’re working on a new text-editor app. Your current task is to create a toolbar with a bunch of buttons for various operations of the editor. You created a very neat `Button` class that can be used for buttons on the toolbar, as well as for generic buttons in various dialogs.\n\n![Problem solved by the Command pattern](https://refactoring.guru/images/patterns/diagrams/command/problem1.png)\n\nAll buttons of the app are derived from the same class.\n\nWhile all of these buttons look similar, they’re all supposed to do different things. Where would you put the code for the various click handlers of these buttons? The simplest solution is to create tons of subclasses for each place where the button is used. These subclasses would contain the code that would have to be executed on a button click.\n\n![Lots of button subclasses](https://refactoring.guru/images/patterns/diagrams/command/problem2.png)\n\nLots of button subclasses. What can go wrong?\n\nBefore long, you realize that this approach is deeply flawed. First, you have an enormous number of subclasses, and that would be okay if you weren’t risking breaking the code in these subclasses each time you modify the base `Button` class. Put simply, your GUI code has become awkwardly dependent on the volatile code of the business logic.\n\n![Several classes implement the same functionality](https://refactoring.guru/images/patterns/diagrams/command/problem3-en.png)\n\nSeveral classes implement the same functionality.\n\nAnd here’s the ugliest part. Some operations, such as copying/pasting text, would need to be invoked from multiple places. For example, a user could click a small “Copy” button on the toolbar, or copy something via the context menu, or just hit `Ctrl+C` on the keyboard.\n\nInitially, when our app only had the toolbar, it was okay to place the implementation of various operations into the button subclasses. In other words, having the code for copying text inside the `CopyButton` subclass was fine. But then, when you implement context menus, shortcuts, and other stuff, you have to either duplicate the operation’s code in many classes or make menus dependent on buttons, which is an even worse option.\n\n## Solution\nGood software design is often based on the _principle of [[CleanCode/Separation of Concerns]]_, which usually results in breaking an app into layers. The most common example: a layer for the graphical user interface and another layer for the business logic. The GUI layer is responsible for rendering a beautiful picture on the screen, capturing any input and showing results of what the user and the app are doing. However, when it comes to doing something important, like calculating the trajectory of the moon or composing an annual report, the GUI layer delegates the work to the underlying layer of business logic.\n\nIn the code it might look like this: a GUI object calls a method of a business logic object, passing it some arguments. This process is usually described as one object sending another a _request_.\n\n![The GUI layer may access the business logic layer directly](https://refactoring.guru/images/patterns/diagrams/command/solution1-en.png)\n\nThe GUI objects may access the business logic objects directly.\n\nThe Command pattern suggests that GUI objects shouldn’t send these requests directly. Instead, you should extract all of the request details, such as the object being called, the name of the method and the list of arguments into a separate _command_ class with a single method that triggers this request.\n\nCommand objects serve as links between various GUI and business logic objects. From now on, the GUI object doesn’t need to know what business logic object will receive the request and how it’ll be processed. The GUI object just triggers the command, which handles all the details.\n\n![Accessing the business logic layer via a command.](https://refactoring.guru/images/patterns/diagrams/command/solution2-en.png)\n\nAccessing the business logic layer via a command.\n\nThe next step is to make your commands implement the same interface. Usually it has just a single execution method that takes no parameters. This interface lets you use various commands with the same request sender, without coupling it to concrete classes of commands. As a bonus, now you can switch command objects linked to the sender, effectively changing the sender’s behavior at runtime.\n\nYou might have noticed one missing piece of the puzzle, which is the request parameters. A GUI object might have supplied the business-layer object with some parameters. Since the command execution method doesn’t have any parameters, how would we pass the request details to the receiver? It turns out the command should be either pre-configured with this data, or capable of getting it on its own.\n\n![The GUI objects delegate the work to commands](https://refactoring.guru/images/patterns/diagrams/command/solution3-en.png)\n\nThe GUI objects delegate the work to commands.\n\nLet’s get back to our text editor. After we apply the Command pattern, we no longer need all those button subclasses to implement various click behaviors. It’s enough to put a single field into the base `Button` class that stores a reference to a command object and make the button execute that command on a click.\n\nYou’ll implement a bunch of command classes for every possible operation and link them with particular buttons, depending on the buttons’ intended behavior.\n\nOther GUI elements, such as menus, shortcuts or entire dialogs, can be implemented in the same way. They’ll be linked to a command which gets executed when a user interacts with the GUI element. As you’ve probably guessed by now, the elements related to the same operations will be linked to the same commands, preventing any code duplication.\n\nAs a result, commands become a convenient middle layer that reduces coupling between the GUI and business logic layers. And that’s only a fraction of the benefits that the Command pattern can offer!\n\n## Real-World Analogy\n![Making an order in a restaurant](https://refactoring.guru/images/patterns/content/command/command-comic-1.png)\n\nMaking an order in a restaurant.\n\nAfter a long walk through the city, you get to a nice restaurant and sit at the table by the window. A friendly waiter approaches you and quickly takes your order, writing it down on a piece of paper. The waiter goes to the kitchen and sticks the order on the wall. After a while, the order gets to the chef, who reads it and cooks the meal accordingly. The cook places the meal on a tray along with the order. The waiter discovers the tray, checks the order to make sure everything is as you wanted it, and brings everything to your table.\n\nThe paper order serves as a command. It remains in a queue until the chef is ready to serve it. The order contains all the relevant information required to cook the meal. It allows the chef to start cooking right away instead of running around clarifying the order details from you directly.\n\n\n## Structure\n\n![Structure of the Command design pattern](https://refactoring.guru/images/patterns/diagrams/command/structure.png)\n\n1.  The **Sender** class (aka _invoker_) is responsible for initiating requests. This class must have a field for storing a reference to a command object. The sender triggers that command instead of sending the request directly to the receiver. Note that the sender isn’t responsible for creating the command object. Usually, it gets a pre-created command from the client via the constructor.\n2.  The **Command** interface usually declares just a single method for executing the command.\n3.  **Concrete Commands** implement various kinds of requests. A concrete command isn’t supposed to perform the work on its own, but rather to pass the call to one of the business logic objects. However, for the sake of simplifying the code, these classes can be merged.\n    Parameters required to execute a method on a receiving object can be declared as fields in the concrete command. You can make command objects immutable by only allowing the initialization of these fields via the constructor.\n4.  The **Receiver** class contains some business logic. Almost any object may act as a receiver. Most commands only handle the details of how a request is passed to the receiver, while the receiver itself does the actual work.\n5.  The **Client** creates and configures concrete command objects. The client must pass all of the request parameters, including a receiver instance, into the command’s constructor. After that, the resulting command may be associated with one or multiple senders.\n## Pseudocode\nIn this example, the **Command** pattern helps to track the history of executed operations and makes it possible to revert an operation if needed.\n\n![Structure of the Command pattern example](https://refactoring.guru/images/patterns/diagrams/command/example.png)\n\nUndoable operations in a text editor.\n\nCommands which result in changing the [[CleanCode/State]] of the editor (e.g., cutting and pasting) make a backup copy of the editor’s state before executing an operation associated with the command. After a command is executed, it’s placed into the command history (a stack of command objects) along with the backup copy of the editor’s state at that point. Later, if the user needs to revert an operation, the app can take the most recent command from the history, read the associated backup of the editor’s state, and restore it.\n\nThe client code (GUI elements, command history, etc.) isn’t coupled to concrete command classes because it works with commands via the command interface. This approach lets you introduce new commands into the app without breaking any existing code.\n\n```kotlin\n// The base command class defines the common interface for all\n// concrete commands.\nabstract class Command is\n    protected field app: Application\n    protected field editor: Editor\n    protected field backup: text\n\n    constructor Command(app: Application, editor: Editor) is\n        this.app = app\n        this.editor = editor\n\n    // Make a backup of the editor's state.\n    method saveBackup() is\n        backup = editor.text\n\n    // Restore the editor's state.\n    method undo() is\n        editor.text = backup\n\n    // The execution method is declared abstract to force all\n    // concrete commands to provide their own implementations.\n    // The method must return true or false depending on whether\n    // the command changes the editor's state.\n    abstract method execute()\n\n// The concrete commands go here.\nclass CopyCommand extends Command is\n    // The copy command isn't saved to the history since it\n    // doesn't change the editor's state.\n    method execute() is\n        app.clipboard = editor.getSelection()\n        return false\n\nclass CutCommand extends Command is\n    // The cut command does change the editor's state, therefore\n    // it must be saved to the history. And it'll be saved as\n    // long as the method returns true.\n    method execute() is\n        saveBackup()\n        app.clipboard = editor.getSelection()\n        editor.deleteSelection()\n        return true\n\nclass PasteCommand extends Command is\n    method execute() is\n        saveBackup()\n        editor.replaceSelection(app.clipboard)\n        return true\n\n// The undo operation is also a command.\nclass UndoCommand extends Command is\n    method execute() is\n        app.undo()\n        return false\n\n// The global command history is just a stack.\nclass CommandHistory is\n    private field history: array of Command\n\n    // Last in...\n    method push(c: Command) is\n        // Push the command to the end of the history array.\n\n    // ...first out\n    method pop():Command is\n        // Get the most recent command from the history.\n\n// The editor class has actual text editing operations. It plays\n// the role of a receiver: all commands end up delegating\n// execution to the editor's methods.\nclass Editor is\n    field text: string\n\n    method getSelection() is\n        // Return selected text.\n\n    method deleteSelection() is\n        // Delete selected text.\n\n    method replaceSelection(text) is\n        // Insert the clipboard's contents at the current\n        // position.\n\n// The application class sets up object relations. It acts as a\n// sender: when something needs to be done, it creates a command\n// object and executes it.\nclass Application is\n    field clipboard: string\n    field editors: array of Editors\n    field activeEditor: Editor\n    field history: CommandHistory\n\n    // The code which assigns commands to UI objects may look\n    // like this.\n    method createUI() is\n        // ...\n        copy = function() { executeCommand(\n            new CopyCommand(this, activeEditor)) }\n        copyButton.setCommand(copy)\n        shortcuts.onKeyPress(\"Ctrl+C\", copy)\n\n        cut = function() { executeCommand(\n            new CutCommand(this, activeEditor)) }\n        cutButton.setCommand(cut)\n        shortcuts.onKeyPress(\"Ctrl+X\", cut)\n\n        paste = function() { executeCommand(\n            new PasteCommand(this, activeEditor)) }\n        pasteButton.setCommand(paste)\n        shortcuts.onKeyPress(\"Ctrl+V\", paste)\n\n        undo = function() { executeCommand(\n            new UndoCommand(this, activeEditor)) }\n        undoButton.setCommand(undo)\n        shortcuts.onKeyPress(\"Ctrl+Z\", undo)\n\n    // Execute a command and check whether it has to be added to\n    // the history.\n    method executeCommand(command) is\n        if (command.execute)\n            history.push(command)\n\n    // Take the most recent command from the history and run its\n    // undo method. Note that we don't know the class of that\n    // command. But we don't have to, since the command knows\n    // how to undo its own action.\n    method undo() is\n        command = history.pop()\n        if (command != null)\n            command.undo()\n```\n\n## Applicability\n- **Use the Command pattern when you want to parametrize objects with operations.**\n  The Command pattern can turn a specific method call into a stand-alone object. This change opens up a lot of interesting uses: you can pass commands as method arguments, store them inside other objects, switch linked commands at runtime, etc.\n\t  \n\tHere’s an example: you’re developing a GUI component such as a context menu, and you want your users to be able to configure menu items that trigger operations when an end user clicks an item.\n\n- **Use the Command pattern when you want to queue operations, schedule their execution, or execute them remotely.**\n  As with any other object, a command can be serialized, which means converting it to a string that can be easily written to a file or a database. Later, the string can be restored as the initial command object. Thus, you can delay and schedule command execution. But there’s even more! In the same way, you can queue, log or send commands over the network.\n\n- **Use the Command pattern when you want to implement reversible operations.**\n  Although there are many ways to implement undo/redo, the Command pattern is perhaps the most popular of all.\n\t\n\tTo be able to revert operations, you need to implement the history of performed operations. The command history is a stack that contains all executed command objects along with related backups of the application’s state.\n\t\n\tThis method has two drawbacks. First, it isn’t that easy to save an application’s state because some of it can be private. This problem can be mitigated with the [[CleanCode/Memento]] pattern.\n\t\n\tSecond, the state backups may consume quite a lot of RAM. Therefore, sometimes you can resort to an alternative implementation: instead of restoring the past state, the command performs the inverse operation. The reverse operation also has a price: it may turn out to be hard or even impossible to implement.\n\n## How to Implement\n1.  Declare the command interface with a single execution method.\n2.  Start extracting requests into concrete command classes that implement the command interface. Each class must have a set of fields for storing the request arguments along with a reference to the actual receiver object. All these values must be initialized via the command’s constructor.\n3.  Identify classes that will act as _senders_. Add the fields for storing commands into these classes. Senders should communicate with their commands only via the command interface. Senders usually don’t create command objects on their own, but rather get them from the client code.\n4.  Change the senders so they execute the command instead of sending a request to the receiver directly.\n5.  The client should initialize objects in the following order:\n    -   Create receivers.\n    -   Create commands, and associate them with receivers if needed.\n    -   Create senders, and associate them with specific commands.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| [[CleanCode/Single Responsibility Principle]]. You can decouple classes that invoke operations from classes that perform these operations. |The code may become more complicated since you’re introducing a whole new layer between senders and receivers.|\n| [[CleanCode/Open Closed Principle]]. You can introduce new commands into the app without breaking existing client code. ||\n| You can implement undo/redo. ||\n| You can implement deferred execution of operations. ||\n| You can assemble a set of simple commands into a complex one.||\n\n\n## Relations with Other Patterns\n- [[CleanCode/Chain of Responsibility]], [[CleanCode/Command]], [[CleanCode/Mediator]] and [[CleanCode/Observer]] address various ways of connecting senders and receivers of requests:\n\t- [[CleanCode/Chain of Responsibility]] passes a request sequentially along a dynamic chain of potential receivers until one of them handles it.\n\t- [[CleanCode/Command]] establishes unidirectional connections between senders and receivers.\n\t- [[CleanCode/Mediator]] eliminates direct connections between senders and receivers, forcing them to communicate indirectly via a [[CleanCode/Mediator]] object.\n\t- [[CleanCode/Observer]] lets receivers dynamically subscribe to and unsubscribe from receiving requests.\n- Handlers in [[CleanCode/Chain of Responsibility]] can be implemented as [[CleanCode/Command|Commands]]. In this case, you can execute a lot of different operations over the same context object, represented by a request.\n\t\n\tHowever, there’s another approach, where the request itself is a [[CleanCode/Command]] object. In this case, you can execute the same operation in a series of different contexts linked into a chain.\n\n- You can use [[CleanCode/Command]] and [[CleanCode/Memento]] together when implementing “undo”. In this case, commands are responsible for performing various operations over a target object, while mementos save the state of that object just before a command gets executed.\n\n- [[CleanCode/Command]] and [[CleanCode/Strategy]] may look similar because you can use both to parameterize an object with some action. However, they have very different intents.\n\t- You can use [[CleanCode/Command]] to convert any operation into an object. The operation’s parameters become fields of that object. The conversion lets you defer execution of the operation, queue it, store the history of commands, send commands to remote services, etc.\n\t- On the other hand, [[CleanCode/Strategy]] usually describes different ways of doing the same thing, letting you swap these algorithms within a single context class.\n- [[CleanCode/Prototype]] can help when you need to save copies of Commands into history.\n- You can treat Visitor as a powerful version of the [[CleanCode/Command]] pattern. Its objects can execute operations over various objects of different classes.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Complex-Refactorings":{"title":"Complex Refactorings","content":"tags: #cleancode \n\n# Complex Refactorings\n\n\u003e**Warum?**\n\u003eEs ist nicht möglich, Code direkt in der ultimativen Form zu schreiben.\n\nBereits im[[CleanCode/Roter Grad|roten Grad]] sind einfache [[CleanCode/Refaktorisieren|Refaktorisierungen]] eingeführt worden. Doch _Umbenennen_ und _Methode extrahieren_ reichen nicht aus, um den Code zu verbessern – oft sind größere Eingriffe erforderlich. Die Einteilung in einfache und komplexe Refaktorisierungen ist sinnvoll, weil komplexe Refaktorisierungen nur mit vorhandenen automatisierten Tests effizient und risikolos zu bewerkstelligen sind. Ohne Tests wäre nach dem [[CleanCode/Refaktorisieren]] nicht bekannt, ob der Code immer noch korrekt ist.\n\nSiehe auch unter [refactoring-legacy-code.net](http://refactoring-legacy-code.net/category/komplexe-refactorings/) sowie unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).\n\nWeiter geht es beim [[CleanCode/Grüner Grad|grünen Grad]]","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Component-Orientation":{"title":"Component Orientation","content":"tags: #cleancode \n\n# Component Orientation\n\n\u003e**Warum?**\n\u003eSoftware braucht Black-Box-Bausteine, die sich parallel entwickeln und testen lassen. Das fördert Wandelbarkeit, Produktivität und Korrektheit.\n\nDie Prinzipien des [[CleanCode/Clean Code Developer#Wertesystem|CCD-Wertesystems]] haben sich bisher vor allem auf kleinere Codeausschnitte bezogen. Was sollte in einer Methode stehen, was sollte über mehrere verteilt werden? Welche Methoden sollte eine Klasse veröffentlichen? Woher sollte ein Client-Objekt zu einem Service-Objekt kommen? Bisher ging es um Prinzipien für die Softwareentwicklung im Kleinen.\n\nHat das [[CleanCode/Clean Code Developer#Wertesystem|CCD-Wertesystem]] denn aber nichts zu größeren Strukturen, zur Softwareentwicklung im Großen zu sagen? Wie steht es mit der Softwarearchitektur? Genau hier setzt das Prinzip der Komponentenorientierung an. Bisher haben wir zwar auch schon das Wort „Komponente“ gebraucht, doch eher lax und in einem umgangssprachlichen Sinn. Von nun an jedoch soll _Komponente_ etwas sehr spezifisches beschreiben, das wir für grundlegend für evolvierbare Software halten.\n\nSolange wir Software letztlich nur aus Klassen mit Methoden aufgebaut denken, versuchen wir sozusagen Computer auf Transistorebene zu beschreiben. Das funktioniert letztlich aber nicht, weil wir im Detailreichtum ersticken. Selbst die Klassen in Schichten zusammenzufassen hilft da nicht viel. Wir brauchen vielmehr sowohl ein Beschreibungsmittel für größere Softwarestrukturen. Aber nicht nur das: das Beschreibungsmittel sollte auch ein Implementationsmittel sein – so wie Klassen -, damit das Modell, der Plan, die Beschreibung sich im Code widerspiegelt.\n\nBetriebssystemprozesse sind zwar solche architektonischen Mittel, letztlich sind auch sie jedoch zu groß. Solange die EXE eines Prozesses einer Applikation aus mehreren Hundert oder Tausend Klassen besteht, gewinnen wir nichts.\n\nHilfe bringt allerdings das Prinzip der Komponentenorientierung. Es besagt, dass ein Anwendungsprozess zunächst einmal aus Komponenten besteht und nicht aus Klassen. Erst die Bausteine der Komponenten sind dann Klassen. Und was ist eine Komponente? Es gibt einige Definitionen für Komponenten, von denen im Kern zwei Kriterien unverbrüchlich erscheinen:\n\n-   Komponenten sind binäre Funktionseinheiten. (Eine Klasse hingegen ist eine Funktionseinheit auf Quellcodeebene.)\n-   Die Leistung von Komponenten wird durch einen separaten (!) Kontrakt beschrieben. (Die Leistungsbeschreibung einer Klasse liegt hingegen in ihr. Es ist die Summe ihrer Methodensignaturen.)\n\nEin [[CleanCode/Clean Code Developer|CCD]] sucht beim Entwurf einer Software nach der Definition der Prozesse also zunächst nach den Komponenten, aus denen die Prozesse bestehen sollten. Er fragt sich, welche „Dienstleistungsblöcke“ machen die Anwendung aus? Und diese Blöcke sieht der [[CleanCode/Clean Code Developer|CCD]] als Black Boxes in Bezug auf ihren Aufbau aus Klassen an. Diese Blöcke sind Assemblies mit wohldefinierter Dienstleistung, aber unbekannter Struktur.\n\nEine Client-Komponente C weiß daher nichts über die Klassenstruktur ihrer Service-Komponente S. C kennt nur den Kontrakt von S, der unabhängig von der Implementation von S ist. Kontrakte sind insofern für Komponenten das, was Interfaces für Klassen sind. Nicht zufällig bestehen Kontrakte zu einem guten Teil oder gar vollständig aus Interfaces.\n\nKomponenten sind also Elemente der Planung wie auch der Implementation. Um das zu unterstreichen, werden Komponenten physisch unabhängig voneinander implementiert; ein probates Mittel dafür sind _Komponentenwerkbänke_, d.h. separate Visual Studio Solutions je Komponentenimplementation. Das fördert nicht nur die Konzentration auf eine Aufgabe, weil man während der Arbeit an einer Komponente in der IDE nur deren Code sieht. Darüber hinaus fördert es auch konsequente [[CleanCode/Unit Test|Unit Tests]] unter Einsatz von Attrappen, da Quellcode anderer Komponenten nicht sichtbar ist. Außerdem steigert solche Codeorganisation die Produktivität, weil Komponenten dank ihrer separaten Kontrakte parallel implementiert werden können. Und schließlich stellt sich eine physische Isolation gegen den schleichenden Zuwachs an Entropie im Code. Denn wo Bindungen zwischen Komponenten nur via Kontrakt aufgebaut werden können, ist die Kopplung lose und kontrolliert.\n\nZur Komponentenorientierung gehören deshalb nicht nur binäre, größere Codeeinheiten mit separaten Kontrakten, sondern auch die Entwicklung der Kontrakte vor der Implementation (_Contract-first Design_). Denn sobald die Kontrakte definiert sind, die eine Komponente importiert und exportiert, kann die Arbeit an der Komponente unabhängig von allen anderen beginnen.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Composite":{"title":"Composite","content":"tags:  #cleancode/designpatterns \n\n# Composite\n\n## Intent\n**Composite** is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.\n## Problem\nUsing the Composite pattern makes sense only when the core model of your app can be represented as a tree.\n\nFor example, imagine that you have two types of objects: `Products` and `Boxes`. A `Box` can contain several `Products` as well as a number of smaller `Boxes`. These little `Boxes` can also hold some `Products` or even smaller `Boxes`, and so on.\n\nSay you decide to create an ordering system that uses these classes. Orders could contain simple products without any wrapping, as well as boxes stuffed with products...and other boxes. How would you determine the total price of such an order?\n\n![Structure of a complex order](https://refactoring.guru/images/patterns/diagrams/composite/problem-en.png)\n\nAn order might comprise various products, packaged in boxes, which are packaged in bigger boxes and so on. The whole structure looks like an upside down tree.\n\nYou could try the direct approach: unwrap all the boxes, go over all the products and then calculate the total. That would be doable in the real world; but in a program, it’s not as simple as running a loop. You have to know the classes of `Products` and `Boxes` you’re going through, the nesting level of the boxes and other nasty details beforehand. All of this makes the direct approach either too awkward or even impossible.\n\n##  Solution\n\nThe Composite pattern suggests that you work with `Products` and `Boxes` through a common interface which declares a method for calculating the total price.\n\nHow would this method work? For a product, it’d simply return the product’s price. For a box, it’d go over each item the box contains, ask its price and then return a total for this box. If one of these items were a smaller box, that box would also start going over its contents and so on, until the prices of all inner components were calculated. A box could even add some extra cost to the final price, such as packaging cost.\n\n![Solution suggested by the Composite pattern](https://refactoring.guru/images/patterns/content/composite/composite-comic-1-en.png)\n\nThe Composite pattern lets you run a behavior recursively over all components of an object tree.\n\nThe greatest benefit of this approach is that you don’t need to care about the concrete classes of objects that compose the tree. You don’t need to know whether an object is a simple product or a sophisticated box. You can treat them all the same via the common interface. When you call a method, the objects themselves pass the request down the tree.\n\n##  Real-World Analogy\n\n![An example of a military structure](https://refactoring.guru/images/patterns/diagrams/composite/live-example.png)\n\nAn example of a military structure.\n\nArmies of most countries are structured as hierarchies. An army consists of several divisions; a division is a set of brigades, and a brigade consists of platoons, which can be broken down into squads. Finally, a squad is a small group of real soldiers. Orders are given at the top of the hierarchy and passed down onto each level until every soldier knows what needs to be done.\n## Structure\n\n![Structure of the Composite design pattern](https://refactoring.guru/images/patterns/diagrams/composite/structure-en.png)\n\n1.  The **Component** interface describes operations that are common to both simple and complex elements of the tree.\n2.  The **Leaf** is a basic element of a tree that doesn’t have sub-elements.\n    \n    Usually, leaf components end up doing most of the real work, since they don’t have anyone to delegate the work to.\n3.  The **Container** (aka _composite_) is an element that has sub-elements: leaves or other containers. A container doesn’t know the concrete classes of its children. It works with all sub-elements only via the component interface.\n    \n    Upon receiving a request, a container delegates the work to its sub-elements, processes intermediate results and then returns the final result to the client.\n4.  The **Client** works with all elements through the component interface. As a result, the client can work in the same way with both simple or complex elements of the tree.\n\n##  Pseudocode\nIn this example, the **Composite** pattern lets you implement stacking of geometric shapes in a graphical editor.\n\n![Structure of the Composite example](https://refactoring.guru/images/patterns/diagrams/composite/example.png)\n\nThe geometric shapes editor example.\n\nThe `CompoundGraphic` class is a container that can comprise any number of sub-shapes, including other compound shapes. A compound shape has the same methods as a simple shape. However, instead of doing something on its own, a compound shape passes the request recursively to all its children and “sums up” the result.\n\nThe client code works with all shapes through the single interface common to all shape classes. Thus, the client doesn’t know whether it’s working with a simple shape or a compound one. The client can work with very complex object structures without being coupled to concrete classes that form that structure.\n\n```kotlin\n// The component interface declares common operations for both\n// simple and complex objects of a composition.\ninterface Graphic is\n    method move(x, y)\n    method draw()\n\n// The leaf class represents end objects of a composition. A\n// leaf object can't have any sub-objects. Usually, it's leaf\n// objects that do the actual work, while composite objects only\n// delegate to their sub-components.\nclass Dot implements Graphic is\n    field x, y\n\n    constructor Dot(x, y) { ... }\n\n    method move(x, y) is\n        this.x += x, this.y += y\n\n    method draw() is\n        // Draw a dot at X and Y.\n\n// All component classes can extend other components.\nclass Circle extends Dot is\n    field radius\n\n    constructor Circle(x, y, radius) { ... }\n\n    method draw() is\n        // Draw a circle at X and Y with radius R.\n\n// The composite class represents complex components that may\n// have children. Composite objects usually delegate the actual\n// work to their children and then \"sum up\" the result.\nclass CompoundGraphic implements Graphic is\n    field children: array of Graphic\n\n    // A composite object can add or remove other components\n    // (both simple or complex) to or from its child list.\n    method add(child: Graphic) is\n        // Add a child to the array of children.\n\n    method remove(child: Graphic) is\n        // Remove a child from the array of children.\n\n    method move(x, y) is\n        foreach (child in children) do\n            child.move(x, y)\n\n    // A composite executes its primary logic in a particular\n    // way. It traverses recursively through all its children,\n    // collecting and summing up their results. Since the\n    // composite's children pass these calls to their own\n    // children and so forth, the whole object tree is traversed\n    // as a result.\n    method draw() is\n        // 1. For each child component:\n        //     - Draw the component.\n        //     - Update the bounding rectangle.\n        // 2. Draw a dashed rectangle using the bounding\n        // coordinates.\n\n// The client code works with all the components via their base\n// interface. This way the client code can support simple leaf\n// components as well as complex composites.\nclass ImageEditor is\n    field all: CompoundGraphic\n\n    method load() is\n        all = new CompoundGraphic()\n        all.add(new Dot(1, 2))\n        all.add(new Circle(5, 3, 10))\n        // ...\n\n    // Combine selected components into one complex composite\n    // component.\n    method groupSelected(components: array of Graphic) is\n        group = new CompoundGraphic()\n        foreach (component in components) do\n            group.add(component)\n            all.remove(component)\n        all.add(group)\n        // All components will be drawn.\n        all.draw()\n```\n\n## Applicability\n- **Use the Composite pattern when you have to implement a tree-like object structure.**\n\tThe Composite pattern provides you with two basic element types that share a common interface: simple leaves and complex containers. A container can be composed of both leaves and other containers. This lets you construct a nested recursive object structure that resembles a tree.\n\n- **Use the pattern when you want the client code to treat both simple and complex elements uniformly.**\n\tAll elements defined by the Composite pattern share a common interface. Using this interface, the client doesn’t have to worry about the concrete class of the objects it works with.\n \n## How to Implement\n1. Make sure that the core model of your app can be represented as a tree structure. Try to break it down into simple elements and containers. Remember that containers must be able to contain both simple elements and other containers.\n2. Declare the component interface with a list of methods that make sense for both simple and complex components.\n3. Create a leaf class to represent simple elements. A program may have multiple different leaf classes.\n4. Create a container class to represent complex elements. In this class, provide an array field for storing references to sub-elements. The array must be able to store both leaves and containers, so make sure it’s declared with the component interface type.\n    \n    While implementing the methods of the component interface, remember that a container is supposed to be delegating most of the work to sub-elements.\n5. Finally, define the methods for adding and removal of child elements in the container.\n    \n   Keep in mind that these operations can be declared in the component interface. This would violate the _[[CleanCode/Interface Segragation Principle]]_ because the methods will be empty in the leaf class. However, the client will be able to treat all the elements equally, even when composing the tree.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can work with complex tree structures more conveniently: use polymorphism and recursion to your advantage. |   It might be difficult to provide a common interface for classes whose functionality differs too much. In certain scenarios, you’d need to overgeneralize the component interface, making it harder to comprehend. |\n| _[[CleanCode/Open Closed Principle]]_. You can introduce new element types into the app without breaking the existing code, which now works with the object tree. ||\n\n## Relations with Other Patterns\n- You can use [[CleanCode/Builder]] when creating complex Composite trees because you can program its construction steps to work recursively.\n- [[CleanCode/Chain of Responsibility]] is often used in conjunction with Composite. In this case, when a leaf component gets a request, it may pass it through the chain of all of the parent components down to the root of the object tree.\n- You can use [[CleanCode/Iterator|Iterators]] to traverse Composite trees.\n- You can use [[CleanCode/Visitor]] to execute an operation over an entire Composite tree.\n- You can implement shared leaf nodes of the Composite tree as [[CleanCode/Flyweight|Flyweights]] to save some RAM.\n- Composite and [[CleanCode/Decorator]] have similar structure diagrams since both rely on recursive composition to organize an open-ended number of objects.\n\n\tA [[CleanCode/Decorator]] is like a Composite but only has one child component. There’s another significant difference: [[CleanCode/Decorator]] adds additional responsibilities to the wrapped object, while Composite just “sums up” its children’s results.\n\t\n\tHowever, the patterns can also cooperate: you can use [[CleanCode/Decorator]] to extend the behavior of a specific object in the Composite tree.\n- Designs that make heavy use of Composite and [[CleanCode/Decorator]] can often benefit from using [[CleanCode/Prototype]]. Applying the pattern lets you clone complex structures instead of re-constructing them from scratch.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Continuous-Delivery":{"title":"Continuous Delivery","content":"tags: #cleancode \n\n# Continuous Delivery\n\n\u003e**Warum?**\n\u003eAls [[CleanCode/Clean Code Developer]] möchte ich sicher sein, dass ein Setup das Produkt korrekt installiert. Wenn ich das erst beim Kunden herausfinde, ist es zu spät.\n\nIm [[CleanCode/Grüner Grad|grünen Grad]] haben wir den [[CleanCode/Continuous Integration]] Prozess für Build und Test aufgesetzt. Damit sorgt der [[CleanCode/Continuous Integration]] Prozess dafür, dass Fehler während der Build- und Testphase schnell entdeckt werden. Wenn z.B. eine Änderung am Code dazu führt, dass eine andere Komponente nicht mehr übersetzt werden kann, weist der [[CleanCode/Continuous Integration]] Prozess kurze Zeit nach dem Commit der Änderung auf den Fehler hin. Wenn am Ende jedoch ein Setup Programm produziert wird, welches sich aufgrund von Fehlern nicht installieren lässt, haben wir unser Ziel trotzdem nicht erreicht: funktionierende Software die bei unseren Kunden installiert werden kann.\n\nFolglich müssen wir auch die Phasen Setup und Deployment automatisieren, um sie per Knopfdruck ausführen zu können. Nur so können wir sicher sein, dass wir installierbare Software produzieren. Und durch die Automatisierung ist sichergestellt, dass niemand einen wichtigen Schritt, der „zu Fuß“ ausgeführt werden muss, vergisst. So kann jeder im Team zu jedem Zeitpunkt den aktuellen Stand des Produktes installationsfertig produzieren und installieren.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Continuous-Integration":{"title":"Continuous Integration","content":"tags: #cleancode \n\n# Continuous Integration\n\n\u003e**Warum?**\n\u003eAutomatisierung und Zentralisierung der Softwareproduktion machen produktiver und reduzieren das Risiko von Fehlern bei der Auslieferung.\n\nOft wird die Integration der Softwarekomponenten zeitlich nach hinten geschoben und erfolgt aufwendig und fehleranfällig „per Hand“. Eigentlich sollte die Software aber zu jedem Zeitpunkt vollständig lauffähig sein. Mit Continuous Integration bezeichnet man einen Prozess, der dafür sorgt dass der gesamte Code nach der Übermittlung von Änderungen übersetzt und getestet wird.\n\nDer Continuous Integration Prozess ist vor allem für Teams wichtig, denn er sorgt dafür, dass nach der Übermittlung von Änderungen der gesamte Code übersetzt und getestet wird, nicht nur der Teil an dem ein Entwickler gerade gearbeitet hat. Die automatisierten Tests sollten von jedem Entwickler ausgeführt werden bevor er Änderungen in die zentrale [[CleanCode/Version Control System|Versionskontrolle]] übermittelt. Daran ändert sich durch Continuous Integration nichts. Um sicherzustellen, dass die Tests tatsächlich ausgeführt werden und Fehler frühzeitig erkannt werden, laufen sie in jedem Fall auf dem Continuous Integration Server. Dies entbindet den Entwickler nicht davon die Tests vor dem Commit auszuführen, schließlich behindert fehlerhafter Code der in die [[CleanCode/Version Control System|Versionskontrolle]] eingecheckt wurde das gesamte Team, möglicherweise sogar weitere Teams. So sorgt der Continuous Integration Prozess dafür dass teamübergreifend sichergestellt wird dass Fehler so früh wie möglich erkannt werden.\n\nFür den Continuous Integration Prozess stehen zahlreiche [Softwaretools](https://clean-code-developer.de/weitere-infos/werkzeuge/) zur Verfügung. Neben dem kontinuierlichen Build und Test, der sofort erfolgt, wenn Änderungen in die [[CleanCode/Version Control System|Versionskontrolle]] übertragen werden, können durch Continuous Integration auch länger laufende Prozesse, wie z.B. Datenbanktests, automatisiert werden. Diese werden dann z.B. nur nachts ausgeführt. Im grünen Grad wird lediglich der Build- und Testprozess berücksichtigt. Das kontinuierliche Setup und Deployment der Software folgt erst später im [[CleanCode/Blauer Grad|blauen Grad]].\n\n[[Martin Fowler]] hat einen sehr guten Artikel zu diesem Thema verfasst, nachzulesen unter [](http://www.martinfowler.com/articles/continuousIntegration.html)[http://www.martinfowler.com/articles/continuousIntegration.html](http://www.martinfowler.com/articles/continuousIntegration.html)\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/DRY":{"title":"DRY","content":"#cleancode \n# Don’t Repeat Yourself (DRY)\n\n\u003e**Warum?**\n\u003eJede Doppelung von Code oder Handgriffen leistet Inkonsistenzen und Fehlern Vorschub.\n\nDas DRY-Prinzip lautet: _Don’t Repeat Yourself_ – Wiederhole dich nicht. Es gilt seit den Anfängen der Softwareentwicklung – sonst gäbe es keine Unterprogramme und keine Datennormalisierung. Dennoch ist es wahrscheinlich das am meisten missachtete Prinzip. Denn nichts ist einfacher, als Code durch Copy\u0026Paste zu wiederholen. Gerade dann, wenn es mal schnell gehen soll, passiert das allzuoft.\n\n[[CleanCode/Clean Code Developer]] üben sich im roten Grad daher darin, dieses Prinzip stets zu beachten. Sie sind sich bewusst, wann sie Code oder andere Artefakte wiederholen. Sie erkennen solche Wiederholungen, die sie selbst oder andere erzeugt haben. Sie bereinigen Wiederholungen durch Refaktorisierungen – wenn keine anderen Prinzipien oder Beschränkungen dagegen sprechen.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Daily-Reflection":{"title":"Daily Reflection","content":"#cleancode \n# Daily Reflection\n\u003e**Warum?**\n\u003eKeine Verbesserung, kein Fortschritt, kein Lernen ohne Reflexion. Aber nur, wenn Reflexion auch eingeplant wird, findet sie unter dem Druck des Tagesgeschäftes auch statt.\n\nIm Zentrum von [[CleanCode/Clean Code Developer|CCD]] steht die persönliche Entwicklung. Es geht also um Veränderung: Mit jedem Tag soll sich das [[CleanCode/Clean Code Developer#Wertesystem|CCD-Wertesysten]] ein klein wenig mehr im Projektalltag des [[CleanCode/Clean Code]] Developers manifestieren. Das ist die Pfadfinderregel des [[CleanCode/Clean Code Developer]]s auf sich selbst angewandt.\n\nSo ein Veränderungsweg geht sich allerdings gerade allein nicht leicht. Wie also auf Kurs bleiben? Wie Fortschritt messen?\n\nOhne ein „Kontrollsystem“ etablieren zu wollen, glauben wir, dass dazu zweierlei gehört:\n\n1.  Kleinschrittige Planung\n2.  Reflexion nach jedem Schritt\n\nUnabhängig von Vorgaben durch eine Projektleitung sollten [[CleanCode/Clean Code]] Developer ihre Arbeit so einteilen, dass sie aus Aufgaben besteht, die an einem Arbeitstag zu bewältigen sind. Nur so kann am Abend jedes Tages eine Bilanz gezogen werden. Das halten wir für wichtig, um jeden Tag die Arbeit nicht mit in den Feierabend zu tragen. Da hat sie nichts zu suchen; der dient der Entspannung.\n\nDurch solche kleinen Planungsschritte wird der Arbeitsalltag allerdings nicht nur befriedigender, weil sich jeden Tag über Erfolg oder Misserfolg entscheiden lässt. Die schiere Möglichkeit der Entscheidung am Abend – _Habe ich alle meine Aufgaben erledigt? Wie habe ich meine Aufgaben erledigt?_ – erlaubt auch die Reflexion über die Einhaltung des [[CleanCode/Clean Code Developer#Wertesystem|CCD-Wertesystems]].\n\nUm sich konsequent zu einem [[CleanCode/Clean Code Developer]] zu entwickeln, soll der Entwickler sich auf jedem Grad nach jedem Arbeitstag darüber Rechenschaft ablegen, ob er alle für ihn nach Grad relevanten Aspekte des Wertesystems berücksichtigt hat. Für den roten Grad bedeutet das z.B. Fragen wie: Verwalte ich wirklich alle Codefragmente im Versionskontrollsystem? Habe ich das [[CleanCode/DRY]]-Prinzip konsequent angewandt? Habe ich ganz allgemein Code in einem besseren Zustand hinterlassen als vorgefunden?\n\nWenn er auf eine dieser Fragen nur zögerlich mit Ja oder gar mit einem Nein antworten muss, dann ist das natürlich kein Beinbruch. Bei allem Bemühen klappt es eben nicht immer, dass man den guten Willen auch in die Tat umsetzen kann.\n\nDennoch oder gerade deshalb ist dann allerdings Folgendes zu tun:\n\n-   Entweder bessert der [[CleanCode/Clean Code Developer]] jetzt solange nach, bis er in Bezug auf seines Tages Arbeit keine Prinzipienverletzung mehr wahrnimmt.\n-   Oder er nimmt die erkannten Prinzipienverletzungen für den nächsten Tag auf seinen Aufgabenzettel.\n\nEine Hilfe bei der Reflexion kann das [[CleanCode/Clean Code Developer]] [Armband](https://clean-code-developer.de/die-initiative/armbaender/) sein. Uns ist bewusst, dass es nicht jedermanns Sache ist, ein buntes Silikonarmband zu tragen. Wer damit kein Problem hat, kann das Armband im Rahmen der persönlichen Reflexion nutzen. Kann oder will der [[CleanCode/Clean Code Developer]] die Prinzipienverletzung nicht bereinigen oder auf seinen Arbeitszettel nehmen, sollte er das Armband, das er trägt, vom einen auf den anderen Arm wechseln. So macht er deutlich, dass er eine Differenz zwischen dem Soll seines Grades und dem Geschafften anerkennt. Das ist nicht als Niederlage misszuverstehen oder gar als „Buße“. Es geht vielmehr um eine haptische Unterstützung des Lernvorgangs.\n\nWenn ein [[CleanCode/Clean Code Developer]] 21 Tage lang nach getaner Arbeit das Armband nicht mehr wechseln musste, kann er zur Arbeit am nächsten Grad übergehen. Für den roten Grad ist das der [orange Grad](https://www.notion.so/Clean-Code-Developer-bb88b9ccb7d040c4a45f408e73b9d1c2).","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Decorator":{"title":"Decorator","content":"tags:  #cleancode/designpatterns \n\n# Decorator\n\n## Intent\n**Decorator** is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.\n\n## Problem\nImagine that you’re working on a notification library which lets other programs notify their users about important events.\n\nThe initial version of the library was based on the `Notifier` class that had only a few fields, a constructor and a single `send` method. The method could accept a message argument from a client and send the message to a list of emails that were passed to the notifier via its constructor. A third-party app which acted as a client was supposed to create and configure the notifier object once, and then use it each time something important happened.\n\n![Structure of the library before applying the Decorator pattern](https://refactoring.guru/images/patterns/diagrams/decorator/problem1-en.png)\n\nA program could use the notifier class to send notifications about important events to a predefined set of emails.\n\nAt some point, you realize that users of the library expect more than just email notifications. Many of them would like to receive an SMS about critical issues. Others would like to be notified on Facebook and, of course, the corporate users would love to get Slack notifications.\n\n![Structure of the library after implementing other notification types](https://refactoring.guru/images/patterns/diagrams/decorator/problem2.png)\n\nEach notification type is implemented as a notifier’s subclass.\n\nHow hard can that be? You extended the `Notifier` class and put the additional notification methods into new subclasses. Now the client was supposed to instantiate the desired notification class and use it for all further notifications.\n\nBut then someone reasonably asked you, “Why can’t you use several notification types at once? If your house is on fire, you’d probably want to be informed through every channel.”\n\nYou tried to address that problem by creating special subclasses which combined several notification methods within one class. However, it quickly became apparent that this approach would bloat the code immensely, not only the library code but the client code as well.\n\n![Structure of the library after creating class combinations](https://refactoring.guru/images/patterns/diagrams/decorator/problem3.png)\n\nCombinatorial explosion of subclasses.\n\nYou have to find some other way to structure notifications classes so that their number won’t accidentally break some Guinness record.\n\n##  Solution\n\nExtending a class is the first thing that comes to mind when you need to alter an object’s behavior. However, inheritance has several serious caveats that you need to be aware of.\n\n-   Inheritance is static. You can’t alter the behavior of an existing object at runtime. You can only replace the whole object with another one that’s created from a different subclass.\n-   Subclasses can have just one parent class. In most languages, inheritance doesn’t let a class inherit behaviors of multiple classes at the same time.\n\nOne of the ways to overcome these caveats is by using _Aggregation_ or _Composition_  instead of _Inheritance_. Both of the alternatives work almost the same way: one object _has a_ reference to another and delegates it some work, whereas with inheritance, the object itself _is_ able to do that work, inheriting the behavior from its superclass.\n\nWith this new approach you can easily substitute the linked “helper” object with another, changing the behavior of the container at runtime. An object can use the behavior of various classes, having references to multiple objects and delegating them all kinds of work. Aggregation/composition is the key principle behind many design patterns, including Decorator. On that note, let’s return to the pattern discussion.\n\n![Inheritance vs. Aggregation](https://refactoring.guru/images/patterns/diagrams/decorator/solution1-en.png)\n\nInheritance vs. Aggregation\n\n“Wrapper” is the alternative nickname for the Decorator pattern that clearly expresses the main idea of the pattern. A _wrapper_ is an object that can be linked with some _target_ object. The wrapper contains the same set of methods as the target and delegates to it all requests it receives. However, the wrapper may alter the result by doing something either before or after it passes the request to the target.\n\nWhen does a simple wrapper become the real decorator? As I mentioned, the wrapper implements the same interface as the wrapped object. That’s why from the client’s perspective these objects are identical. Make the wrapper’s reference field accept any object that follows that interface. This will let you cover an object in multiple wrappers, adding the combined behavior of all the wrappers to it.\n\nIn our notifications example, let’s leave the simple email notification behavior inside the base `Notifier` class, but turn all other notification methods into decorators.\n\n![The solution with the Decorator pattern](https://refactoring.guru/images/patterns/diagrams/decorator/solution2.png)\n\nVarious notification methods become decorators.\n\nThe client code would need to wrap a basic notifier object into a set of decorators that match the client’s preferences. The resulting objects will be structured as a stack.\n\n![Apps might configure complex stacks of notification decorators](https://refactoring.guru/images/patterns/diagrams/decorator/solution3-en.png)\n\nApps might configure complex stacks of notification decorators.\n\nThe last decorator in the stack would be the object that the client actually works with. Since all decorators implement the same interface as the base notifier, the rest of the client code won’t care whether it works with the “pure” notifier object or the decorated one.\n\nWe could apply the same approach to other behaviors such as formatting messages or composing the recipient list. The client can decorate the object with any custom decorators, as long as they follow the same interface as the others.\n\n##  Real-World Analogy\n\n![Example of the Decorator pattern](https://refactoring.guru/images/patterns/content/decorator/decorator-comic-1.png)\n\nYou get a combined effect from wearing multiple pieces of clothing.\n\nWearing clothes is an example of using decorators. When you’re cold, you wrap yourself in a sweater. If you’re still cold with a sweater, you can wear a jacket on top. If it’s raining, you can put on a raincoat. All of these garments “extend” your basic behavior but aren’t part of you, and you can easily take off any piece of clothing whenever you don’t need it.\n\n## Structure\n\n![Structure of the Decorator design pattern](https://refactoring.guru/images/patterns/diagrams/decorator/structure.png)\n\n1.  The **Component** declares the common interface for both wrappers and wrapped objects.\n    \n2.  **Concrete Component** is a class of objects being wrapped. It defines the basic behavior, which can be altered by decorators.\n    \n3.  The **Base Decorator** class has a field for referencing a wrapped object. The field’s type should be declared as the component interface so it can contain both concrete components and decorators. The base decorator delegates all operations to the wrapped object.\n    \n4.  **Concrete Decorators** define extra behaviors that can be added to components dynamically. Concrete decorators override methods of the base decorator and execute their behavior either before or after calling the parent method.\n    \n5.  The **Client** can wrap components in multiple layers of decorators, as long as it works with all objects via the component interface.\n    \n\n##  Pseudocode\nIn this example, the **Decorator** pattern lets you compress and encrypt sensitive data independently from the code that actually uses this data.\n\n![Structure of the Decorator pattern example](https://refactoring.guru/images/patterns/diagrams/decorator/example.png)\n\nThe encryption and compression decorators example.\n\nThe application wraps the data source object with a pair of decorators. Both wrappers change the way the data is written to and read from the disk:\n\n-   Just before the data is **written to disk**, the decorators encrypt and compress it. The original class writes the encrypted and protected data to the file without knowing about the change.\n    \n-   Right after the data is **read from disk**, it goes through the same decorators, which decompress and decode it.\n    \n\nThe decorators and the data source class implement the same interface, which makes them all interchangeable in the client code.\n\n```kotlin\n// The component interface defines operations that can be\n// altered by decorators.\ninterface DataSource is\n    method writeData(data)\n    method readData():data\n\n// Concrete components provide default implementations for the\n// operations. There might be several variations of these\n// classes in a program.\nclass FileDataSource implements DataSource is\n    constructor FileDataSource(filename) { ... }\n\n    method writeData(data) is\n        // Write data to file.\n\n    method readData():data is\n        // Read data from file.\n\n// The base decorator class follows the same interface as the\n// other components. The primary purpose of this class is to\n// define the wrapping interface for all concrete decorators.\n// The default implementation of the wrapping code might include\n// a field for storing a wrapped component and the means to\n// initialize it.\nclass DataSourceDecorator implements DataSource is\n    protected field wrappee: DataSource\n\n    constructor DataSourceDecorator(source: DataSource) is\n        wrappee = source\n\n    // The base decorator simply delegates all work to the\n    // wrapped component. Extra behaviors can be added in\n    // concrete decorators.\n    method writeData(data) is\n        wrappee.writeData(data)\n\n    // Concrete decorators may call the parent implementation of\n    // the operation instead of calling the wrapped object\n    // directly. This approach simplifies extension of decorator\n    // classes.\n    method readData():data is\n        return wrappee.readData()\n\n// Concrete decorators must call methods on the wrapped object,\n// but may add something of their own to the result. Decorators\n// can execute the added behavior either before or after the\n// call to a wrapped object.\nclass EncryptionDecorator extends DataSourceDecorator is\n    method writeData(data) is\n        // 1. Encrypt passed data.\n        // 2. Pass encrypted data to the wrappee's writeData\n        // method.\n\n    method readData():data is\n        // 1. Get data from the wrappee's readData method.\n        // 2. Try to decrypt it if it's encrypted.\n        // 3. Return the result.\n\n// You can wrap objects in several layers of decorators.\nclass CompressionDecorator extends DataSourceDecorator is\n    method writeData(data) is\n        // 1. Compress passed data.\n        // 2. Pass compressed data to the wrappee's writeData\n        // method.\n\n    method readData():data is\n        // 1. Get data from the wrappee's readData method.\n        // 2. Try to decompress it if it's compressed.\n        // 3. Return the result.\n\n// Option 1. A simple example of a decorator assembly.\nclass Application is\n    method dumbUsageExample() is\n        source = new FileDataSource(\"somefile.dat\")\n        source.writeData(salaryRecords)\n        // The target file has been written with plain data.\n\n        source = new CompressionDecorator(source)\n        source.writeData(salaryRecords)\n        // The target file has been written with compressed\n        // data.\n\n        source = new EncryptionDecorator(source)\n        // The source variable now contains this:\n        // Encryption \u003e Compression \u003e FileDataSource\n        source.writeData(salaryRecords)\n        // The file has been written with compressed and\n        // encrypted data.\n\n// Option 2. Client code that uses an external data source.\n// SalaryManager objects neither know nor care about data\n// storage specifics. They work with a pre-configured data\n// source received from the app configurator.\nclass SalaryManager is\n    field source: DataSource\n\n    constructor SalaryManager(source: DataSource) { ... }\n\n    method load() is\n        return source.readData()\n\n    method save() is\n        source.writeData(salaryRecords)\n    // ...Other useful methods...\n\n// The app can assemble different stacks of decorators at\n// runtime, depending on the configuration or environment.\nclass ApplicationConfigurator is\n    method configurationExample() is\n        source = new FileDataSource(\"salary.dat\")\n        if (enabledEncryption)\n            source = new EncryptionDecorator(source)\n        if (enabledCompression)\n            source = new CompressionDecorator(source)\n\n        logger = new SalaryManager(source)\n        salary = logger.load()\n    // ...\n```\n\n## Applicability\n- Use the Decorator pattern when you need to be able to assign extra behaviors to objects at runtime without breaking the code that uses these objects.\n\t The Decorator lets you structure your business logic into layers, create a decorator for each layer and compose objects with various combinations of this logic at runtime. The client code can treat all these objects in the same way, since they all follow a common interface.\n\n- Use the pattern when it’s awkward or not possible to extend an object’s behavior using inheritance.\n\tMany programming languages have the `final` keyword that can be used to prevent further extension of a class. For a final class, the only way to reuse the existing behavior would be to wrap the class with your own wrapper, using the Decorator pattern.\n## How to Implement\n1.  Make sure your business domain can be represented as a primary component with multiple optional layers over it.\n2.  Figure out what methods are common to both the primary component and the optional layers. Create a component interface and declare those methods there.\n3.  Create a concrete component class and define the base behavior in it.\n4.  Create a base decorator class. It should have a field for storing a reference to a wrapped object. The field should be declared with the component interface type to allow linking to concrete components as well as decorators. The base decorator must delegate all work to the wrapped object.\n5.  Make sure all classes implement the component interface.\n6.  Create concrete decorators by extending them from the base decorator. A concrete decorator must execute its behavior before or after the call to the parent method (which always delegates to the wrapped object).\n7.  The client code must be responsible for creating decorators and composing them in the way the client needs.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can extend an object’s behavior without making a new subclass. | It’s hard to remove a specific wrapper from the wrappers stack.|\n| You can add or remove responsibilities from an object at runtime. | It’s hard to implement a decorator in such a way that its behavior doesn’t depend on the order in the decorators stack. |\n| You can combine several behaviors by wrapping an object into multiple decorators. | The initial configuration code of layers might look pretty ugly.\n|  [[CleanCode/Single Responsibility Principle]]. You can divide a monolithic class that implements many possible variants of behavior into several smaller classes. ||\n\n## Relations with Other Patterns\n[[CleanCode/Adapter]] changes the interface of an existing object, while Decorator enhances an object without changing its interface. In addition, Decorator supports recursive composition, which isn’t possible when you use [[CleanCode/Adapter]].\n\n[[CleanCode/Adapter]] provides a different interface to the wrapped object, [[CleanCode/Proxy]] provides it with the same interface, and Decorator provides it with an enhanced interface.\n\n[[CleanCode/Chain of Responsibility]] and Decorator have very similar class structures. Both patterns rely on recursive composition to pass the execution through a series of objects. However, there are several crucial differences.\n\nThe [[CleanCode/Chain of Responsibility|CoR]] handlers can execute arbitrary operations independently of each other. They can also stop passing the request further at any point. On the other hand, various Decorators can extend the object’s behavior while keeping it consistent with the base interface. In addition, decorators aren’t allowed to break the flow of the request.\n\n[[CleanCode/Composite]] and Decorator have similar structure diagrams since both rely on recursive composition to organize an open-ended number of objects.\n\nA Decorator is like a [[CleanCode/Composite]] but only has one child component. There’s another significant difference: Decorator adds additional responsibilities to the wrapped object, while [[CleanCode/Composite]] just “sums up” its children’s results.\n\nHowever, the patterns can also cooperate: you can use Decorator to extend the behavior of a specific object in the [[CleanCode/Composite]] tree.\n\nDesigns that make heavy use of [[CleanCode/Composite]] and Decorator can often benefit from using [[CleanCode/Prototype]]. Applying the pattern lets you clone complex structures instead of re-constructing them from scratch.\n\nDecorator lets you change the skin of an object, while [[CleanCode/Strategy]] lets you change the guts.\n\nDecorator and [[CleanCode/Proxy]] have similar structures, but very different intents. Both patterns are built on the composition principle, where one object is supposed to delegate some of the work to another. The difference is that a [[CleanCode/Proxy]] usually manages the life cycle of its service object on its own, whereas the composition of Decorators is always controlled by the client.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Dependency-Inversion-Principle":{"title":"Dependency Inversion Principle","content":"#cleancode \n# Dependency Inversion Principle (DIP)\n\n\u003e[!question] **Warum?**\n\u003ePunktgenaues Testen setzt Isolation von Klassen voraus. Isolation entsteht, wenn Klassen keine Abhängigkeiten von Implementationen mehr enthalten – weder zur Laufzeit, noch zur Übersetzungszeit. Konkrete Abhängigkeiten sollten deshalb so spät wie möglich entschieden werden. Am besten zur Laufzeit.\n\nAuch das Dependency Inversion Principle ([DIP](https://drive.google.com/file/d/0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz/view)) ist ein [[CleanCode/SOLID]] Prinzip. Es besagt folgendes:\n-   High-Level Klassen sollen nicht von Low-Level Klassen abhängig sein, sondern beide von Interfaces.\n-   Interfaces sollen nicht von Details abhängig sein, sondern Details von Interfaces.\n\nVerwendet eine High-Level Klasse eine Low-Level Klasse unmittelbar, so ergibt sich eine starke Kopplung zwischen beiden. Spätestens beim Versuch, die High-Level Klasse isoliert zu testen, wird man auf Schwierigkeiten stoßen. Aus diesem Grund sollte die High-Level Klasse von einem Interface abhängig sein, das wiederum von der Low-Level Klasse implementiert wird. So kann die Low-Level Klasse im Unit Test durch ein _Mockup_ ersetzt werden.\n\nUm zur Laufzeit die invertierte, abstrakte Abhängigkeit mit einem konkreten Objekt aufzulösen, bieten sich im Prinzip drei Möglichkeiten:\n\n-   mittels Konstruktorparameter „per Hand“\n-   Einsatz eines Inversion of Control Containers ([[CleanCode/Inversion of Control Container|IoC]] Container) wie etwa Castle Windsor\n-   Dependency Lookup\n\nIm [gelben Grad](https://www.notion.so/Clean-Code-Developer-bb88b9ccb7d040c4a45f408e73b9d1c2) injizieren wir die Abhängigkeiten zunächst nur über die Parameter der Konstruktoren. Dies ist anfangs die einfachste Lösung und funktioniert mit einer handvoll Klassen ganz gut. Später im [grünen Grad](https://www.notion.so/Clean-Code-Developer-bb88b9ccb7d040c4a45f408e73b9d1c2) nutzen wir einen [[CleanCode/Inversion of Control Container|IoC]] Container und Dependency Lookup.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Design-Patterns":{"title":"Design Patterns","content":"tags: #cleancode/designpatterns #cleancode/refactoring \n\n# Design Patterns\n**Design patterns** are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code\n## Creational\nThese patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.\n- [[CleanCode/Factory]]\n- [[CleanCode/Abstract Factory]]\n- [[CleanCode/Builder]]\n- [[CleanCode/Prototype]]\n- [[CleanCode/Singleton]]\n## Structural\nThese patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient.\n- [[CleanCode/Adapter]]\n- [[CleanCode/Bridge]]\n- [[CleanCode/Composite]]\n- [[CleanCode/Decorator]]\n- [[CleanCode/Facade]]\n- [[CleanCode/Flyweight]]\n- [[CleanCode/Proxy]]\n## Behavioral\nThese patterns are concerned with algorithms and the assignment of responsibilities between objects.\n- [[CleanCode/Chain of Responsibility]]\n- [[CleanCode/Command]]\n- [[CleanCode/Iterator]]\n- [[CleanCode/Mediator]]\n- [[CleanCode/Memento]]\n- [[CleanCode/Observer]]\n- [[CleanCode/State]]\n- [[CleanCode/Strategy]]\n- [[CleanCode/Template Method]]\n- [[CleanCode/Visitor]]\n\n## Source\nThe initial Version of the listed Design Pattern pages will be a copy of [Refactoring Guru](https://refactoring.guru/design-patterns)","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Design-and-Implementation-Dont-Overlapp":{"title":"Design and Implementation Don't Overlapp","content":"tags: #cleancode \n\n# Design and Implementation Don’t Overlapp\n\n\u003e**Warum?**\n\u003ePlanungsunterlagen, die mit der Umsetzung nichts mehr gemein haben, schaden mehr, als dass sie nützen. Deshalb nicht die Planung aufgeben, sondern die Chance auf Inkonsistenz minimieren.\n\nEines der grundlegenden Probleme der Softwareentwicklung sind Implementationen, denen eine vorausgegangene Planung nicht mehr anzusehen ist. Da hängen dann Entwurfsdiagramme an der Wand, die kaum noch etwas mit der Coderealität zu tun haben. Die Ursache dafür ist eine Verletzung des fundamentalen [[CleanCode/DRY]]-Prinzips: Entwurf und Implementation sind Wiederholungen desselben, der Struktur einer Software. Da Implementation auf Entwurf folgt und den Löwenanteil der Arbeit ausmacht, geraten beide schnell aus dem Tritt, wenn Strukturänderungen während der Implementation nicht immer wieder in den Entwurf eingearbeitet werden. Entwurfsdiagramme sind nach Beginn der Implementation sonst bald nichts mehr wert.\n\nWie kann die Situation verbessert werden? Sollte vielleicht auf Entwurf verzichtet werden, wenn letztlich in der Implementation die „Strukturwahrheit“ liegt? Nein, sicher nicht. Entwurf muss sein. Ohne Planung gibt es keine Zielvorstellung. Aber Entwurf und Implementation müssen dem [[CleanCode/DRY]]-Prinzip gerecht werden. Deshalb sollten Entwurf und Implementation sich so wenig überlappen wie möglich. Ihre Schnittstelle sollte dünn sein. Wenn das der Fall ist, stellen sie keine Wiederholungen mehr dar, sondern beschreiben unterschiedliches. Das bedeutet: Entwurf/Architektur kümmert sich nicht um die Implementation und Implementation kümmert sich nicht um Architektur.\n\nUnd wo verläuft diese Trennlinie? Bei den so genannten Komponenten (s.u. Praktiken). Architekten kümmern sich nicht um den internen Aufbau von Komponenten. Für sie sind es Black Boxes, deren Klassenstruktur nicht architekturrelevant ist. Umgekehrt ist für einen Komponentenimplementierer die Architektur irrelevant. Was er zu implementieren hat, ergibt sich aus den Komponentenkontrakten, die seine Komponente importiert und exportiert. Einen größeren Zusammenhang muss er nicht kennen.\n\nDie Aufgabe der Architektur ist es mithin, Software in Komponenten zu zerlegen, deren Abhängigkeiten zu definieren und Leistungen in Kontrakten zu beschreiben. Diese Strukturen werden dann auch einzig durch Architekten gepflegt. Und die Aufgabe der Implementation ist es, die von der Architektur definierten Komponenten zu realisieren. Wie sie das tun, ist nicht architekturrelevant. Ihre innere Struktur ist für die Architektur unsichtbar.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Design-before-Implementation":{"title":"Design before Implementation","content":"tags: #cleancode \n\n# Design before Implementation\n\n\u003e**Warum?**\n\u003eVor der Umsetzung muss eine Lösung entworfen werden. Andernfalls findet kein konsequentes Nachdenken über die Lösung statt.\n\nDie Aufgabe eines Entwicklers besteht darin, Anforderungen in Code zu übersetzen. Dazu ist es erforderlich, eine Lösung für die Anforderungen zu entwickeln. Es muss nachgedacht werden. Wie kann das aber auf gute Weise geschehen, wenn Entwickler direkt ins Codieren springen?\n\nIn trivialen Fällen mag es möglich sein, direkt Code zu schreiben. Dennoch wird auch beim unmittelbaren Sprung ins Codieren über die Lösung nachgedacht. Allerdings geschieht dies eher unbewusst, vor allem aber _während_ der Umsetzung. Der Entwickler denkt ein wenig nach, codiert, denk nach, codiert, usw. Es fehlt hier ein konsequentes Durchdenken der Lösung, getrennt von der Umsetzung.\n\nSpätestens, wenn eine Gruppe von Entwicklern gemeinsam als Team arbeiten möchte, muss der Entwurf zeitlich getrennt von der Umsetzung stattfinden. Andernfalls ist keine flüssige arbeitsteilige Vorgehensweise möglich.\n\nDer Entwurf ermöglicht es dem Team bzw. einem einzelnen Entwickler, bereits vor der Codierung über wichtige Prinzipien nachzudenken. Es entstehen bspw. erst gar keine Methoden oder Klassen mit mehreren Verantwortlichkeiten, da schon auf der Ebene des Entwurfs über das [[CleanCode/Single Responsibility Principle]] nachgedacht werden kann. Damit erspart sich das Team den Refaktorisierungsaufwand der entsteht, wenn „drauf los“ codiert wird.\n\nSiehe auch [](https://flow-design.info/)[https://flow-design.info](https://flow-design.info).","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Error-Measurement":{"title":"Error Measurement","content":"tags: #cleancode \n\n# Error Measurement\n\n\u003e**Warum?**\n\u003eNur wer weiß, wie viele Fehler auftreten, kann sein Vorgehen so verändern, dass die Fehlerrate sinkt.\n\nWährend der Softwareentwicklung passieren Fehler. Die passieren in allen Phasen: falsch verstandene oder unklar formulierte Anforderungen führen zu Fehlern genauso wie fehlerhafte Implementierungen. Am Ende ist alles ein Fehler, was dazu führt, dass der Kunde eine Software erhält, die nicht seinen Anforderungen entspricht. Iteratives Vorgehen und Reflexion sind zwei Bausteine, die dazu dienen, den Prozess zu verbessern. Um jedoch zu erkennen, ob tatsächlich eine Verbesserung eintritt, muss eine Messgröße vorliegen, an der man eine Entwicklung zum Besseren überhaupt ablesen kann.\n\nDas Messen der Fehler kann durch Zählen oder durch Zeitnahme erfolgen. Dabei steht nicht die Präzision im Vordergrund, solange die Messmethode vergleichbare Daten liefert. Die Entwicklungstendenz über mehrere Iterationen hinweg soll ersichtlich werden. Ferner geht es nicht darum, die Verantwortlichkeit für einen Fehler zu klären. Am Ende ist es egal, wer den Fehler verursacht hat, so lange das Team daraus lernt und seinen Prozess verbessert.\n\nWelche Fehler sind zu messen? Es sind nicht die Fehler, die während der Entwicklung auftreten. Die sind nicht zu vermeiden und führen hoffentlich dahin, dass am Ende einer Iteration ein fehlerfreies Produkt ausgeliefert wird. Vielmehr geht es um die Fehler, die nach einer Iteration zurückgemeldet werden vom Kunden bzw. seinem Stellvertreter (z.B. [[Product Owner]] oder Support). Das sind Fehler, die die Umsetzung neuer Anforderungen behindern. Zu messende Fehler sind also die, die auftreten, wenn man glaubt, dass es sie nicht geben dürfte ;-) Wann im Prozess ein Team diesen Punkt erreicht und flucht, weil da wieder so ein Fehler der sonstigen Arbeit dazwischenfunkt, ist teamindividuell zu bestimmen.\n\nWeiter geht es beim [[CleanCode/Blauer Grad|blauen Grad]].","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Facade":{"title":"Facade","content":"tags:  #cleancode/designpatterns \n\n# Facade\n\n## Intent\n**Facade** is a structural design pattern that provides a simplified interface to a library, a framework, or any other complex set of classes.\n\n## Problem\nImagine that you must make your code work with a broad set of objects that belong to a sophisticated library or framework. Ordinarily, you’d need to initialize all of those objects, keep track of dependencies, execute methods in the correct order, and so on.\n\nAs a result, the business logic of your classes would become tightly coupled to the implementation details of 3rd-party classes, making it hard to comprehend and maintain.\n\n##  Solution\n\nA facade is a class that provides a simple interface to a complex subsystem which contains lots of moving parts. A facade might provide limited functionality in comparison to working with the subsystem directly. However, it includes only those features that clients really care about.\n\nHaving a facade is handy when you need to integrate your app with a sophisticated library that has dozens of features, but you just need a tiny bit of its functionality.\n\nFor instance, an app that uploads short funny videos with cats to social media could potentially use a professional video conversion library. However, all that it really needs is a class with the single method `encode(filename, format)`. After creating such a class and connecting it with the video conversion library, you’ll have your first facade.\n\n##  Real-World Analogy\n\n![An example of taking a phone order](https://refactoring.guru/images/patterns/diagrams/facade/live-example-en.png?id=461900f9fbacdd0ce981dcd24e121078)\n\nPlacing orders by phone.\n\nWhen you call a shop to place a phone order, an operator is your facade to all services and departments of the shop. The operator provides you with a simple voice interface to the ordering system, payment gateways, and various delivery services.\n\n##  Structure\n\n![Structure of the Facade design pattern](https://refactoring.guru/images/patterns/diagrams/facade/structure-indexed.png?id=2da06d6b850701ea15cf72f9d2642fb8)\n\n1.  The **Facade** provides convenient access to a particular part of the subsystem’s functionality. It knows where to direct the client’s request and how to operate all the moving parts.\n2.  An **Additional Facade** class can be created to prevent polluting a single facade with unrelated features that might make it yet another complex structure. Additional facades can be used by both clients and other facades.\n3.  The **Complex Subsystem** consists of dozens of various objects. To make them all do something meaningful, you have to dive deep into the subsystem’s implementation details, such as initializing objects in the correct order and supplying them with data in the proper format.\n    \n    Subsystem classes aren’t aware of the facade’s existence. They operate within the system and work with each other directly.\n4.  The **Client** uses the facade instead of calling the subsystem objects directly.\n##  Pseudocode\n\nIn this example, the **Facade** pattern simplifies interaction with a complex video conversion framework.\n\n![The structure of the Facade pattern example](https://refactoring.guru/images/patterns/diagrams/facade/example.png?id=2249d134e3ff83819dfc19032f02eced)\n\nAn example of isolating multiple dependencies within a single facade class.\n\nInstead of making your code work with dozens of the framework classes directly, you create a facade class which encapsulates that functionality and hides it from the rest of the code. This structure also helps you to minimize the effort of upgrading to future versions of the framework or replacing it with another one. The only thing you’d need to change in your app would be the implementation of the facade’s methods.\n```kotlin\n// These are some of the classes of a complex 3rd-party video\n// conversion framework. We don't control that code, therefore\n// can't simplify it.\n\nclass VideoFile\n// ...\n\nclass OggCompressionCodec\n// ...\n\nclass MPEG4CompressionCodec\n// ...\n\nclass CodecFactory\n// ...\n\nclass BitrateReader\n// ...\n\nclass AudioMixer\n// ...\n\n// We create a facade class to hide the framework's complexity\n// behind a simple interface. It's a trade-off between\n// functionality and simplicity.\nclass VideoConverter is\n    method convert(filename, format):File is\n        file = new VideoFile(filename)\n        sourceCodec = new CodecFactory.extract(file)\n        if (format == \"mp4\")\n            destinationCodec = new MPEG4CompressionCodec()\n        else\n            destinationCodec = new OggCompressionCodec()\n        buffer = BitrateReader.read(filename, sourceCodec)\n        result = BitrateReader.convert(buffer, destinationCodec)\n        result = (new AudioMixer()).fix(result)\n        return new File(result)\n\n// Application classes don't depend on a billion classes\n// provided by the complex framework. Also, if you decide to\n// switch frameworks, you only need to rewrite the facade class.\nclass Application is\n    method main() is\n        convertor = new VideoConverter()\n        mp4 = convertor.convert(\"funny-cats-video.ogg\", \"mp4\")\n        mp4.save()\n```\n\n## Applicability\n- **Use the Facade pattern when you need to have a limited but straightforward interface to a complex subsystem.**\n\tOften, subsystems get more complex over time. Even applying design patterns typically leads to creating more classes. A subsystem may become more flexible and easier to reuse in various contexts, but the amount of configuration and boilerplate code it demands from a client grows ever larger. The Facade attempts to fix this problem by providing a shortcut to the most-used features of the subsystem which fit most client requirements.\n\n- **Use the Facade when you want to structure a subsystem into layers.**\n\tCreate facades to define entry points to each level of a subsystem. You can reduce coupling between multiple subsystems by requiring them to communicate only through facades.\n\t\n\tFor example, let’s return to our video conversion framework. It can be broken down into two layers: video- and audio-related. For each layer, you can create a facade and then make the classes of each layer communicate with each another via those facades. This approach looks very similar to the [[CleanCode/Mediator]] pattern.\n\n## How to Implement\n1.  Check whether it’s possible to provide a simpler interface than what an existing subsystem already provides. You’re on the right track if this interface makes the client code independent from many of the subsystem’s classes.\n2.  Declare and implement this interface in a new facade class. The facade should redirect the calls from the client code to appropriate objects of the subsystem. The facade should be responsible for initializing the subsystem and managing its further life cycle unless the client code already does this.\n3.  To get the full benefit from the pattern, make all the client code communicate with the subsystem only via the facade. Now the client code is protected from any changes in the subsystem code. For example, when a subsystem gets upgraded to a new version, you will only need to modify the code in the facade.\n4.  If the facade becomes [[Large Class]], consider extracting part of its behavior to a new, refined facade class.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can isolate your code from the complexity of a subsystem. | A facade can become a god object coupled to all classes of an app. |\n\n## Relations with Other Patterns\n- [[CleanCode/Facade]] defines a new interface for existing objects, whereas [[CleanCode/Adapter]] tries to make the existing interface usable. Adapter usually wraps just one object, while Facade works with an entire subsystem of objects.\n- [[CleanCode/Abstract Factory ]]can serve as an alternative to [[CleanCode/Facade]] when you only want to hide the way the subsystem objects are created from the client code.\n- [[CleanCode/Flyweight]] shows how to make lots of little objects, whereas [[CleanCode/Facade]] shows how to make a single object that represents an entire subsystem.\n- [[CleanCode/Facade]] and [[CleanCode/Mediator]] have similar jobs: they try to organize collaboration between lots of tightly coupled classes.\n\t- [[CleanCode/Facade]] defines a simplified interface to a subsystem of objects, but it doesn’t introduce any new functionality. The subsystem itself is unaware of the facade. Objects within the subsystem can communicate directly.\n\t- [[CleanCode/Mediator]] centralizes communication between components of the system. The components only know about the mediator object and don’t communicate directly.\n- A [[CleanCode/Facade]] class can often be transformed into a [[CleanCode/Singleton]] since a single facade object is sufficient in most cases.\n- [[CleanCode/Facade]] is similar to [[CleanCode/Proxy]] in that both buffer a complex entity and initialize it on its own. Unlike [[CleanCode/Facade]], [[CleanCode/Proxy]] has the same interface as its service object, which makes them interchangeable.","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Factory":{"title":"Factory","content":"#cleancode/designpatterns \n# Factory\n\n## Intent\n**Factory Method** is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.\n\n## Problem\nImagine that you’re creating a logistics management application. The first version of your app can only handle transportation by trucks, so the bulk of your code lives inside the `Truck` class.\n\nAfter a while, your app becomes pretty popular. Each day you receive dozens of requests from sea transportation companies to incorporate sea logistics into the app.\n\n![Adding a new transportation class to the program causes an issue](https://refactoring.guru/images/patterns/diagrams/factory-method/problem1-en.png)\n\nAdding a new class to the program isn’t that simple if the rest of the code is already coupled to existing classes.\n\nGreat news, right? But how about the code? At present, most of your code is coupled to the `Truck` class. Adding `Ships` into the app would require making changes to the entire codebase. Moreover, if later you decide to add another type of transportation to the app, you will probably need to make all of these changes again.\n\nAs a result, you will end up with pretty nasty code, riddled with conditionals that switch the app’s behavior depending on the class of transportation objects.\n\n## Solution\n\nThe Factory Method pattern suggests that you replace direct object construction calls (using the `new` operator) with calls to a special _factory_ method. Don’t worry: the objects are still created via the `new` operator, but it’s being called from within the factory method. Objects returned by a factory method are often referred to as _products._\n\n![The structure of creator classes](https://refactoring.guru/images/patterns/diagrams/factory-method/solution1.png)\n\nSubclasses can alter the class of objects being returned by the factory method.\n\nAt first glance, this change may look pointless: we just moved the constructor call from one part of the program to another. However, consider this: now you can override the factory method in a subclass and change the class of products being created by the method.\n\nThere’s a slight limitation though: subclasses may return different types of products only if these products have a common base class or interface. Also, the factory method in the base class should have its return type declared as this interface.\n\n![The structure of the products hierarchy](https://refactoring.guru/images/patterns/diagrams/factory-method/solution2-en.png)\n\nAll products must follow the same interface.\n\nFor example, both `Truck` and `Ship` classes should implement the `Transport` interface, which declares a method called `deliver`. Each class implements this method differently: trucks deliver cargo by land, ships deliver cargo by sea. The factory method in the `RoadLogistics` class returns truck objects, whereas the factory method in the `SeaLogistics` class returns ships.\n\n![The structure of the code after applying the factory method pattern](https://refactoring.guru/images/patterns/diagrams/factory-method/solution3-en.png)\n\nAs long as all product classes implement a common interface, you can pass their objects to the client code without breaking it.\n\nThe code that uses the factory method (often called the _client_ code) doesn’t see a difference between the actual products returned by various subclasses. The client treats all the products as abstract `Transport`. The client knows that all transport objects are supposed to have the `deliver` method, but exactly how it works isn’t important to the client.\n## Structure\n![The structure of the Factory Method pattern](https://refactoring.guru/images/patterns/diagrams/factory-method/structure.png)\n\n1.  The **Product** declares the interface, which is common to all objects that can be produced by the creator and its subclasses.\n    \n2.  **Concrete Products** are different implementations of the product interface.\n    \n3.  The **Creator** class declares the factory method that returns new product objects. It’s important that the return type of this method matches the product interface.\n    \n    You can declare the factory method as `abstract` to force all subclasses to implement their own versions of the method. As an alternative, the base factory method can return some default product type.\n    \n    Note, despite its name, product creation is **not** the primary responsibility of the creator. Usually, the creator class already has some core business logic related to products. The factory method helps to decouple this logic from the concrete product classes. Here is an analogy: a large software development company can have a training department for programmers. However, the primary function of the company as a whole is still writing code, not producing programmers.\n    \n4.  **Concrete Creators** override the base factory method so it returns a different type of product.\n    \n    Note that the factory method doesn’t have to **create** new instances all the time. It can also return existing objects from a cache, an object pool, or another source.\n## Pseudocode\nThis example illustrates how the **Factory Method** can be used for creating cross-platform UI elements without coupling the client code to concrete UI classes.\n\n![The structure of the Factory Method pattern example](https://refactoring.guru/images/patterns/diagrams/factory-method/example.png)\n\nThe cross-platform dialog example.\n\nThe base `Dialog` class uses different UI elements to render its window. Under various operating systems, these elements may look a little bit different, but they should still behave consistently. A button in Windows is still a button in Linux.\n\nWhen the factory method comes into play, you don’t need to rewrite the logic of the `Dialog` class for each operating system. If we declare a factory method that produces buttons inside the base `Dialog` class, we can later create a subclass that returns Windows-styled buttons from the factory method. The subclass then inherits most of the code from the base class, but, thanks to the factory method, can render Windows-looking buttons on the screen.\n\nFor this pattern to work, the base `Dialog` class must work with abstract buttons: a base class or an interface that all concrete buttons follow. This way the code within `Dialog` remains functional, whichever type of buttons it works with.\n\nOf course, you can apply this approach to other UI elements as well. However, with each new factory method you add to the `Dialog`, you get closer to the [Abstract Factory](https://refactoring.guru/design-patterns/abstract-factory) pattern. Fear not, we’ll talk about this pattern later.\n\n```kotlin\n// The creator class declares the factory method that must\n// return an object of a product class. The creator's subclasses\n// usually provide the implementation of this method.\nclass Dialog is\n    // The creator may also provide some default implementation\n    // of the factory method.\n    abstract method createButton():Button\n\n    // Note that, despite its name, the creator's primary\n    // responsibility isn't creating products. It usually\n    // contains some core business logic that relies on product\n    // objects returned by the factory method. Subclasses can\n    // indirectly change that business logic by overriding the\n    // factory method and returning a different type of product\n    // from it.\n    method render() is\n        // Call the factory method to create a product object.\n        Button okButton = createButton()\n        // Now use the product.\n        okButton.onClick(closeDialog)\n        okButton.render()\n\n// Concrete creators override the factory method to change the\n// resulting product's type.\nclass WindowsDialog extends Dialog is\n    method createButton():Button is\n        return new WindowsButton()\n\nclass WebDialog extends Dialog is\n    method createButton():Button is\n        return new HTMLButton()\n\n// The product interface declares the operations that all\n// concrete products must implement.\ninterface Button is\n    method render()\n    method onClick(f)\n\n// Concrete products provide various implementations of the\n// product interface.\nclass WindowsButton implements Button is\n    method render(a, b) is\n        // Render a button in Windows style.\n    method onClick(f) is\n        // Bind a native OS click event.\n\nclass HTMLButton implements Button is\n    method render(a, b) is\n        // Return an HTML representation of a button.\n    method onClick(f) is\n        // Bind a web browser click event.\n\nclass Application is\n    field dialog: Dialog\n\n    // The application picks a creator's type depending on the\n    // current configuration or environment settings.\n    method initialize() is\n        config = readApplicationConfigFile()\n\n        if (config.OS == \"Windows\") then\n            dialog = new WindowsDialog()\n        else if (config.OS == \"Web\") then\n            dialog = new WebDialog()\n        else\n            throw new Exception(\"Error! Unknown operating system.\")\n\n    // The client code works with an instance of a concrete\n    // creator, albeit through its base interface. As long as\n    // the client keeps working with the creator via the base\n    // interface, you can pass it any creator's subclass.\n    method main() is\n        this.initialize()\n        dialog.render()\n```\n\n## Applicability\n- **Use the Factory Method when you don’t know beforehand the exact types and dependencies of the objects your code should work with.**\n  The Factory Method separates product construction code from the code that actually uses the product. Therefore it’s easier to extend the product construction code independently from the rest of the code.\n  \n  For example, to add a new product type to the app, you’ll only need to create a new creator subclass and override the factory method in it.\n  \n- **Use the Factory Method when you want to provide users of your library or framework with a way to extend its internal components.**\n  Inheritance is probably the easiest way to extend the default behavior of a library or framework. But how would the framework recognize that your subclass should be used instead of a standard component?\n  \n  The solution is to reduce the code that constructs components across the framework into a single factory method and let anyone override this method in addition to extending the component itself.\n  \n  Let’s see how that would work. Imagine that you write an app using an open source UI framework. Your app should have round buttons, but the framework only provides square ones. You extend the standard `Button` class with a glorious `RoundButton` subclass. But now you need to tell the main `UIFramework` class to use the new button subclass instead of a default one.\n  \n  To achieve this, you create a subclass `UIWithRoundButtons` from a base framework class and override its `createButton` method. While this method returns `Button` objects in the base class, you make your subclass return `RoundButton` objects. Now use the `UIWithRoundButtons` class instead of `UIFramework`. And that’s about it!\n\n- **Use the Factory Method when you want to save system resources by reusing existing objects instead of rebuilding them each time.**\n  \n  You often experience this need when dealing with large, resource-intensive objects such as database connections, file systems, and network resources.\n  \n  Let’s think about what has to be done to reuse an existing object:\n  1. First, you need to create some storage to keep track of all of the created objects.\n  2.  When someone requests an object, the program should look for a free object inside that pool.\n  3.  … and then return it to the client code.\n  4.  If there are no free objects, the program should create a new one (and add it to the pool).\n     \n That’s a lot of code! And it must all be put into a single place so that you don’t pollute the program with duplicate code.\n \n Probably the most obvious and convenient place where this code could be placed is the constructor of the class whose objects we’re trying to reuse. However, a constructor must always return **new objects** by definition. It can’t return existing instances.\n\nTherefore, you need to have a regular method capable of creating new objects as well as reusing existing ones. That sounds very much like a factory method.\n\n## How to Implement\n\n1.  Make all products follow the same interface. This interface should declare methods that make sense in every product.\n    \n2.  Add an empty factory method inside the creator class. The return type of the method should match the common product interface.\n    \n3.  In the creator’s code find all references to product constructors. One by one, replace them with calls to the factory method, while extracting the product creation code into the factory method.\n    \n    You might need to add a temporary parameter to the factory method to control the type of returned product.\n    \n    At this point, the code of the factory method may look pretty ugly. It may have a large `switch` statement that picks which product class to instantiate. But don’t worry, we’ll fix it soon enough.\n    \n4.  Now, create a set of creator subclasses for each type of product listed in the factory method. Override the factory method in the subclasses and extract the appropriate bits of construction code from the base method.\n    \n5.  If there are too many product types and it doesn’t make sense to create subclasses for all of them, you can reuse the control parameter from the base class in subclasses.\n    \n    For instance, imagine that you have the following hierarchy of classes: the base `Mail` class with a couple of subclasses: `AirMail` and `GroundMail`; the `Transport` classes are `Plane`, `Truck` and `Train`. While the `AirMail` class only uses `Plane` objects, `GroundMail` may work with both `Truck` and `Train` objects. You can create a new subclass (say `TrainMail`) to handle both cases, but there’s another option. The client code can pass an argument to the factory method of the `GroundMail` class to control which product it wants to receive.\n    \n6.  If, after all of the extractions, the base factory method has become empty, you can make it abstract. If there’s something left, you can make it a default behavior of the method.\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You avoid tight coupling between the creator and the concrete products. | The code may become more complicated since you need to introduce a lot of new subclasses to implement the pattern. The best case scenario is when you’re introducing the pattern into an existing hierarchy of creator classes. |\n|  _[[CleanCode/Single Responsibility Principle]]_. You can move the product creation code into one place in the program, making the code easier to support. | |\n| _[[CleanCode/Open Closed Principle]]_. You can introduce new types of products into the program without breaking existing client code. |\n## Relations with Other Patterns\n- Many designs start by using Factory Method (less complicated and more customizable via subclasses) and evolve toward [[CleanCode/Abstract Factory]], [[CleanCode/Prototype]], or [[CleanCode/Builder]] (more flexible, but more complicated).\n- [[CleanCode/Abstract Factory]] classes are often based on a set of Factory Methods, but you can also use [[CleanCode/Prototype]] to compose the methods on these classes.\n- You can use Factory Method along with [[CleanCode/Iterator]] to let collection subclasses return different types of iterators that are compatible with the collections.\n- [[CleanCode/Prototype]] isn’t based on inheritance, so it doesn’t have its drawbacks. On the other hand, [[CleanCode/Prototype]] requires a complicated initialization of the cloned object. Factory Method is based on inheritance but doesn’t require an initialization step.\n- Factory Method is a specialization of [[CleanCode/Template Method]]. At the same time, a Factory Method may serve as a step in a large [[CleanCode/Template Method]].\n ","lastmodified":"2023-02-21T12:09:42.534800016Z","tags":null},"/CleanCode/Favour-Composition-over-Inheritance":{"title":"Favour Composition over Inheritance","content":"#cleancode \n# Favour Composition over Inheritance (FCoI)\n\n\u003e**Warum?**\n\u003eKomposition fördert die lose Kopplung und die Testbarkeit eines Systems und ist oft flexibler.\n\nFür die Wiederverwendung von Funktionalität kennt die Objektorientierte Programmierung ([[OOP]]) zwei sehr bekannte Kandidaten: Die Vererbung (whitebox – reuse) und die Komposition (blackbox – reuse). Verwendet man Funktionalität wieder durch das Ableiten von einer Klasse, so ist die Subklasse abhängig von der Elternklasse. Dies macht ein System in vielen Fällen unnötig komplex, schlechter testbar und erschwert das Austauschen von Funktionalität zur Laufzeit. [[CleanCode/Clean Code Developer]] hat für das korrekte Ableiten das [[CleanCode/Liskov Substitution Principle]] bereit, das es dabei zu befolgen gilt.\n\nBei der Komposition verwendet eine Klasse eine andere. Verwendet man dazu eine klar definierte Schnittstelle, fördert das die Entkopplung. Auch können verschiedene Implementationen einfach ausgetauscht werden. Bevor man sich also der  stellt, fordert Favour Composition over Inheritance, sich die Frage zu stellen, ob man der Komposition nicht Vorrang geben kann.\n\n\u003e „_Because inheritance exposes a subclass to details of its parent’s implementation, it’s often said that ‚inheritance breaks encapsulation_„. (Gang of Four 1995:19)\n\n","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Flyweight":{"title":"Flyweight","content":"tags:  #cleancode/designpatterns \n\n# Flyweight\n\n## Intent\n**Flyweight** is a structural design pattern that lets you fit more objects into the available amount of RAM by sharing common parts of state between multiple objects instead of keeping all of the data in each object.\n## Problem\nTo have some fun after long working hours, you decided to create a simple video game: players would be moving around a map and shooting each other. You chose to implement a realistic particle system and make it a distinctive feature of the game. Vast quantities of bullets, missiles, and shrapnel from explosions should fly all over the map and deliver a thrilling experience to the player.\n\nUpon its completion, you pushed the last commit, built the game and sent it to your friend for a test drive. Although the game was running flawlessly on your machine, your friend wasn’t able to play for long. On his computer, the game kept crashing after a few minutes of gameplay. After spending several hours digging through debug logs, you discovered that the game crashed because of an insufficient amount of RAM. It turned out that your friend’s rig was much less powerful than your own computer, and that’s why the problem emerged so quickly on his machine.\n\nThe actual problem was related to your particle system. Each particle, such as a bullet, a missile or a piece of shrapnel was represented by a separate object containing plenty of data. At some point, when the carnage on a player’s screen reached its climax, newly created particles no longer fit into the remaining RAM, so the program crashed.\n\n![Flyweight pattern problem](https://refactoring.guru/images/patterns/diagrams/flyweight/problem-en.png)\n\n##  Solution\n\nOn closer inspection of the `Particle` class, you may notice that the color and sprite fields consume a lot more memory than other fields. What’s worse is that these two fields store almost identical data across all particles. For example, all bullets have the same color and sprite.\n\n![Flyweight pattern solution](https://refactoring.guru/images/patterns/diagrams/flyweight/solution1-en.png)\n\nOther parts of a particle’s state, such as coordinates, movement vector and speed, are unique to each particle. After all, the values of these fields change over time. This data represents the always changing context in which the particle exists, while the color and sprite remain constant for each particle.\n\nThis constant data of an object is usually called the _intrinsic state_. It lives within the object; other objects can only read it, not change it. The rest of the object’s state, often altered “from the outside” by other objects, is called the _extrinsic state_.\n\nThe Flyweight pattern suggests that you stop storing the extrinsic state inside the object. Instead, you should pass this state to specific methods which rely on it. Only the intrinsic state stays within the object, letting you reuse it in different contexts. As a result, you’d need fewer of these objects since they only differ in the intrinsic state, which has much fewer variations than the extrinsic.\n\n![Flyweight pattern solution](https://refactoring.guru/images/patterns/diagrams/flyweight/solution3-en.png)\n\nLet’s return to our game. Assuming that we had extracted the extrinsic state from our particle class, only three different objects would suffice to represent all particles in the game: a bullet, a missile, and a piece of shrapnel. As you’ve probably guessed by now, an object that only stores the intrinsic state is called a flyweight.\n\n### Extrinsic state storage\n\nWhere does the extrinsic state move to? Some class should still store it, right? In most cases, it gets moved to the container object, which aggregates objects before we apply the pattern.\n\nIn our case, that’s the main `Game` object that stores all particles in the `particles` field. To move the extrinsic state into this class, you need to create several array fields for storing coordinates, vectors, and speed of each individual particle. But that’s not all. You need another array for storing references to a specific flyweight that represents a particle. These arrays must be in sync so that you can access all data of a particle using the same index.\n\n![Flyweight pattern solution](https://refactoring.guru/images/patterns/diagrams/flyweight/solution2-en.png)\n\nA more elegant solution is to create a separate context class that would store the extrinsic state along with reference to the flyweight object. This approach would require having just a single array in the container class.\n\nWait a second! Won’t we need to have as many of these contextual objects as we had at the very beginning? Technically, yes. But the thing is, these objects are much smaller than before. The most memory-consuming fields have been moved to just a few flyweight objects. Now, a thousand small contextual objects can reuse a single heavy flyweight object instead of storing a thousand copies of its data.\n\n### Flyweight and immutability\n\nSince the same flyweight object can be used in different contexts, you have to make sure that its state can’t be modified. A flyweight should initialize its state just once, via constructor parameters. It shouldn’t expose any setters or public fields to other objects.\n\n### Flyweight factory\n\nFor more convenient access to various flyweights, you can create a factory method that manages a pool of existing flyweight objects. The method accepts the intrinsic state of the desired flyweight from a client, looks for an existing flyweight object matching this state, and returns it if it was found. If not, it creates a new flyweight and adds it to the pool.\n\nThere are several options where this method could be placed. The most obvious place is a flyweight container. Alternatively, you could create a new factory class. Or you could make the factory method static and put it inside an actual flyweight class.\n\n## Structure\n\n![Structure of the Flyweight design pattern](https://refactoring.guru/images/patterns/diagrams/flyweight/structure.png)\n\n1.  The Flyweight pattern is merely an optimization. Before applying it, make sure your program does have the RAM consumption problem related to having a massive number of similar objects in memory at the same time. Make sure that this problem can’t be solved in any other meaningful way.\n2.  The **Flyweight** class contains the portion of the original object’s state that can be shared between multiple objects. The same flyweight object can be used in many different contexts. The state stored inside a flyweight is called _intrinsic._ The state passed to the flyweight’s methods is called _extrinsic._\n3.  The **Context** class contains the extrinsic state, unique across all original objects. When a context is paired with one of the flyweight objects, it represents the full state of the original object.\n4.  Usually, the behavior of the original object remains in the flyweight class. In this case, whoever calls a flyweight’s method must also pass appropriate bits of the extrinsic state into the method’s parameters. On the other hand, the behavior can be moved to the context class, which would use the linked flyweight merely as a data object.\n5.  The **Client** calculates or stores the extrinsic state of flyweights. From the client’s perspective, a flyweight is a template object which can be configured at runtime by passing some contextual data into parameters of its methods.    \n6.  The **Flyweight Factory** manages a pool of existing flyweights. With the factory, clients don’t create flyweights directly. Instead, they call the factory, passing it bits of the intrinsic state of the desired flyweight. The factory looks over previously created flyweights and either returns an existing one that matches search criteria or creates a new one if nothing is found.\n\n##  Pseudocode\nIn this example, the **Flyweight** pattern helps to reduce memory usage when rendering millions of tree objects on a canvas.\n\n![Flyweight pattern example](https://refactoring.guru/images/patterns/diagrams/flyweight/example.png)\n\nThe pattern extracts the repeating intrinsic state from a main `Tree` class and moves it into the flyweight class `TreeType`.\n\nNow instead of storing the same data in multiple objects, it’s kept in just a few flyweight objects and linked to appropriate `Tree` objects which act as contexts. The client code creates new tree objects using the flyweight factory, which encapsulates the complexity of searching for the right object and reusing it if needed.\n\n```kotlin\n// The flyweight class contains a portion of the state of a\n// tree. These fields store values that are unique for each\n// particular tree. For instance, you won't find here the tree\n// coordinates. But the texture and colors shared between many\n// trees are here. Since this data is usually BIG, you'd waste a\n// lot of memory by keeping it in each tree object. Instead, we\n// can extract texture, color and other repeating data into a\n// separate object which lots of individual tree objects can\n// reference.\nclass TreeType is\n    field name\n    field color\n    field texture\n    constructor TreeType(name, color, texture) { ... }\n    method draw(canvas, x, y) is\n        // 1. Create a bitmap of a given type, color \u0026 texture.\n        // 2. Draw the bitmap on the canvas at X and Y coords.\n\n// Flyweight factory decides whether to re-use existing\n// flyweight or to create a new object.\nclass TreeFactory is\n    static field treeTypes: collection of tree types\n    static method getTreeType(name, color, texture) is\n        type = treeTypes.find(name, color, texture)\n        if (type == null)\n            type = new TreeType(name, color, texture)\n            treeTypes.add(type)\n        return type\n\n// The contextual object contains the extrinsic part of the tree\n// state. An application can create billions of these since they\n// are pretty small: just two integer coordinates and one\n// reference field.\nclass Tree is\n    field x,y\n    field type: TreeType\n    constructor Tree(x, y, type) { ... }\n    method draw(canvas) is\n        type.draw(canvas, this.x, this.y)\n\n// The Tree and the Forest classes are the flyweight's clients.\n// You can merge them if you don't plan to develop the Tree\n// class any further.\nclass Forest is\n    field trees: collection of Trees\n\n    method plantTree(x, y, name, color, texture) is\n        type = TreeFactory.getTreeType(name, color, texture)\n        tree = new Tree(x, y, type)\n        trees.add(tree)\n\n    method draw(canvas) is\n        foreach (tree in trees) do\n            tree.draw(canvas)\n```\n\n## Applicability\n- Use the Flyweight pattern only when your program must support a huge number of objects which barely fit into available RAM.\n\tThe benefit of applying the pattern depends heavily on how and where it’s used. It’s most useful when:\n\t- an application needs to spawn a huge number of similar objects\n\t- this drains all available RAM on a target device\n\t- the objects contain duplicate states which can be extracted and shared between multiple objects\n\n## How to Implement\n1.  Divide fields of a class that will become a flyweight into two parts:\n    \n    -   the intrinsic state: the fields that contain unchanging data duplicated across many objects\n    -   the extrinsic state: the fields that contain contextual data unique to each object\n2.  Leave the fields that represent the intrinsic state in the class, but make sure they’re immutable. They should take their initial values only inside the constructor.\n3.  Go over methods that use fields of the extrinsic state. For each field used in the method, introduce a new parameter and use it instead of the field.\n4.  Optionally, create a factory class to manage the pool of flyweights. It should check for an existing flyweight before creating a new one. Once the factory is in place, clients must only request flyweights through it. They should describe the desired flyweight by passing its intrinsic state to the factory.\n5.  The client must store or calculate values of the extrinsic state (context) to be able to call methods of flyweight objects. For the sake of convenience, the extrinsic state along with the flyweight-referencing field may be moved to a separate context class.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can save lots of RAM, assuming your program has tons of similar objects. | You might be trading RAM over CPU cycles when some of the context data needs to be recalculated each time somebody calls a flyweight method. |\n|| The code becomes much more complicated. New team members will always be wondering why the state of an entity was separated in such a way.|\n\n## Relations with Other Patterns\n- You can implement shared leaf nodes of the [[CleanCode/Composite]] tree as Flyweights to save some RAM.\n- Flyweight shows how to make lots of little objects, whereas [[CleanCode/Facade]] shows how to make a single object that represents an entire subsystem.\n- Flyweight would resemble [[CleanCode/Singleton]] if you somehow managed to reduce all shared states of the objects to just one flyweight object. But there are two fundamental differences between these patterns:\n\t1. There should be only one [[CleanCode/Singleton]] instance, whereas a Flyweight class can have multiple instances with different intrinsic states.\n\t2. The [[CleanCode/Singleton]] object can be mutable. Flyweight objects are immutable.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Gelber-Grad":{"title":"Gelber Grad","content":"#cleancode \n# Gelber Grad\n## Prinzipien\n- [[CleanCode/Interface Segragation Principle]]\n- [[CleanCode/Dependency Inversion Principle]]\n- [[CleanCode/Liskov Substitution Principle]]\n- [[CleanCode/Principle of Least Astonishment]]\n- [[CleanCode/Information Hiding Principle]]\n\n## Praktiken\n- [[CleanCode/Automated Unit Tests]]\n- [[CleanCode/Mockups]]\n- [[CleanCode/Code Coverage Analysis]]\n- [[CleanCode/Partizipation in Professional Events]]\n- [[CleanCode/Complex Refactorings]]","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Gr%C3%BCner-Grad":{"title":"Grüner Grad","content":"#cleancode \n# Grüner Grad\n## Prinzipien\n- [[CleanCode/Open Closed Principle]]\n- [[CleanCode/Tell, don't ask]]\n- [[CleanCode/Law of Demeter]]\n\n## Praktiken\n- [[CleanCode/Continuous Integration]]\n- [[CleanCode/Statical Code Analysis]]\n- [[CleanCode/Inversion of Control Container]]\n- [[CleanCode/Share Experience]]\n- [[CleanCode/Error Measurement]]","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Implementation-Reflects-Design":{"title":"Implementation Reflects Design","content":"tags: #cleancode \n\n# Implementation Reflects Design\n\n\u003e**Warum?**\n\u003eUmsetzung, die von der Planung beliebig abweichen kann, führt direkt in die Unwartbarkeit. Umsetzung braucht daher einen durch die Planung vorgegebenen physischen Rahmen.\n\nArchitektur und Implementation sollen nicht überlappen, damit sie das [[CleanCode/DRY]]-Prinzip nicht verletzten. So werden Inkonsistenzen vermieden, die dadurch entstehen können, dass auf der einen Seite etwas geändert wird, ohne diese Änderung auf der anderen Seite nachzuführen.\n\nNichtsdestotrotz macht die Architektur aber ja Aussagen über die Implementation. Nicht ihre Details, aber ihre grundsätzliche Form. Architektur definiert die Strukturelemente und deren Beziehungen innerhalb eines Codesystems. Implementation existiert also auch bei Abwesenheit von Überlappungen nicht unabhängig von Architektur, sondern sozusagen in ihr.\n\nGenau das sollte sich dann aber auch in der Implementation ausdrücken. So wird die leichter verständlich, so kann besser sichergestellt werden, dass die Implementation tatsächlich der Architektur folgt. Die von der Architektur auf verschiedenen Abstraktionsebenen definierten Strukturelemente sollten deshalb nicht in einem großen „Codetopf“ (z.b. eine große Visual Studio Solution) „zusammengerührt werden“. Viel besser auch im Sinne hoher Produktivität und einfacher Testbarkeit ist es, die logischen Strukturen der Architektur so physisch wie möglich zu manifestieren.\n\n1.  Die von der Architektur geplanten Strukturen auf verschiedenen Abstraktionsebenen sollten sich so weitgehend wie möglich in der Codeorganisation widerspiegeln. Das bedeutet zum einen, dass die Architektur als Strukturelemente vor allem physische Codeeinheiten benutzt. Und zum anderen sollen diese Strukturelemente dann aber auch im Quellcode bzw. in der Codeorganisation im Repository klar sichtbar sein.\n2.  Bei der Arbeit an der Implementation der Strukturelemente und insbesondere innerhalb von Komponenten sollen Architekturänderungen „im Vorbeigehen“ unmöglich sein. Wer in bzw. an einem Strukturelement arbeitet, also an einem Teil, darf nicht ad hoc die umliegende Struktur, d.h. das Ganze, ändern können. Nur wenn das gewährleistet ist, wächst die Entropie einer Software nicht unkontrolliert. Das ist wichtig, da das Hauptziel von Architektur ist, die Entropie und damit die Komplexität von Software zu minimieren.\n\nPlanung muss sein. Implementation darf Planung nicht torpedieren. (Wenn auch Erkenntnisse während der Implementation natürlich auf die Planung zurückwirken dürfen.) Deshalb sind Planung und Implementation zu entkoppeln. Und wo das nicht möglich ist, da sollte die Planung mit Mitteln der Implementation arbeiten und die Implementation physisch die Planung widerspiegeln.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Incremental-Development":{"title":"Incremental Development","content":"tags: #cleancode \n\n# Incremental Development\n\n\u003e**Warum?**\n\u003eNur die Arbeit in Inkrementen ermöglicht es dem Product Owner, Feedback zu geben.\n\nEin Inkrement stellt einen vertikalen Schnitt durch die verschiedenen Aspekte eines Softwaresystems dar. Somit ist ein Inkrement ein Stück ausführbare Software. Das Inkrement kann einem [[Product Owner]] auf einer Testmaschine zur Verfügung gestellt werden, um Feedback einzuholen.\n\nRegelmäßiges Feedback in kurzen Abständen, jeweils am Ende einer Iteration, ist die Definition von Agilität.\n\nWird dagegen horizontal statt vertikal vorgegangen, entstehen Module, die nicht eigenständig ausführbar sind. Zu solchen Modulen kann ein [[Product Owner]] kein Feedback geben. Somit ist kein echtes agiles Vorgehen möglich.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Information-Hiding-Principle":{"title":"Information Hiding Principle","content":"#cleancode \n# Information Hiding Principle\n\n\u003e**Warum?**\n\u003eDurch das Verbergen von Details in einer Schnittstelle werden die Abhängigkeiten reduziert.\n\nBeim Design einer Schnittstelle sollte man sich fragen, welche Details außen unbedingt sichtbar sein müssen. Mit Schnittstelle sind hier nicht nur Interfaces im objektorientierten Sinne gemeint, sondern auch implizite Schnittstellen. Jede Klasse hat zwangsläufig eine implizite Schnittstelle – sie enthält alle nach außen sichtbaren Details. Je mehr Details von außen sichtbar sind, desto höher ist die Kopplung zwischen der Klasse und ihren Verwendern. Benutzen die Verwender einer Klasse erstmal ein Detail, wird es schwerer, dieses Detail zu verändern. Dies steht der Wandelbarkeit der Software entgegen.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Integration-Operation-Segregation-Principle-IOSP":{"title":"Integration Operation Segregation Principle (IOSP)","content":"#cleancode \n# Integration Operation Segregation Principle (IOSP)\n\n\u003e**Warum?**\n\u003eEin deutliches Symptom schlecht wandelbaren Codes sind tiefe Hierarchien funktionaler Abhängigkeit. Sie reduzieren die Verständlichkeit und erschweren automatisierte Tests wie Refactoring.\n\nIndem in Methoden verhaltenserzeugende Anweisungen (Logik) gemischt mit Aufrufen anderer Methoden derselben Codebasis steht, ist nicht mehr klar erkennbar, wie Gesamtverhalten entsteht; die Anweisungen sind ja verschmiert über eine u.U. sehr tiefe Hierarchie. Zudem tendieren Methoden mit solcher Mischung dazu, unbegrenzt zu wachsen.\n\nDem stellt sich das IOSP mit einer klaren Trennung entgegen:\n\n-   Entweder enthält eine Methode nur Logik, d.h. Transformationen, Kontrollstrukturen oder I/O- bzw. allgemeiner: API-Aufrufe. Dann wird sie _Operation_ genannt.\n-   Oder eine Methode enthält keinerlei Logik, sondern nur Aufrufe von anderen Methoden derselben Codebasis. Dann wird sie _Integration_ genannt.\n\nDiese strikte Unterscheidung führt zu mehrerlei positiven Effekten:\n\n1.  Methoden tendieren dazu, sehr kurz zu bleiben. Denn mehr als 10, 20 oder 30 Zeilen reine Logik oder ausschließlich Methodenaufrufe „fühlen sich nicht gut an“. Da eine Mischung nicht erlaubt ist, werden weitere kleine Methoden extrahiert.\n2.  Kurze Methoden, die nur Logik enthalten, sind leicht zu testen, da sie keine Abhängigkeiten haben.\n3.  Kurze Methoden, die nur Logik enthalten, sind vergleichsweise leicht zu verstehen. Der Methodenname kann wirklich bedeutungsstiftend wirken.\n4.  Kurze Methoden, die ausschließlich integrieren, sind sehr gut zu verstehen und beschreiben „auf einen Blick“, was geschieht.\n5.  Die Korrektheit von Integrationen lässt sich sehr leicht durch Augenscheinnahme prüfen. Es ist lediglich festzustellen, ob Verarbeitungsschritte grundsätzlich in der korrekten Reihenfolge angeordnet sind. Den Rest übernimmt der Compiler – bzw. die Testabdeckung der Operationen.\n6.  Integrationen lassen sich leicht durch „Zwischenschieben“ weiterer Methoden erweitern, um neue Anforderungen zu erfüllen. Die Verständlichkeit bleibt dabei erhalten.\n\nDas IOSP lässt sich „aus dem Stand“ von jedem Entwickler guten Willens anwenden. Seine Einhaltung ist durch jedermann leicht zu überprüfen. Integrationen und Operationen unterscheiden sich in der Form deutlich. Weitere Details, insbesondere zur Abgrenzung zum [[CleanCode/Dependency Inversion Principle]], [findest du bspw. hier](https://ccd-akademie.de/dip-oder-iosp/).","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Integration-Tests":{"title":"Integration Tests","content":"tags: #cleancode \n\n# Integration Tests","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Interface-Segragation-Principle":{"title":"Interface Segragation Principle","content":"#cleancode \n# Interface Segregation Principle (ISP)\n\n\u003e[!question] **Warum?**\n\u003eLeistungsbeschreibungen, die unabhängig von einer konkreten Erfüllung sind, machen unabhängig.\n\nDas Interface Segregation Principle ([ISP](https://drive.google.com/file/d/0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi/view)) ist ein weiteres [[CleanCode/SOLID]] Prinzip. _Segregation_ bedeutet _Abtrennung_. Das Prinzip besagt, dass ein Client nicht von Details eines Service abhängig sein soll, die er gar nicht benötigt. Je weniger in dessen Interface enthalten ist, desto geringer ist die Kopplung zwischen den beiden Komponenten.\n\nStellen wir uns vor, wir müssten einen Stecker planen, mit dem ein Monitor an einen Computer angeschlossen werden soll. Wir entscheiden uns, einfach alle Signale die in einem Computer so anfallen, per Stecker zur Verfügung zu stellen. Der hat dann zwar einige Hundert Pins, aber dafür ist er maximal flexibel. Dummerweise ist damit die Kopplung ebenfalls maximal.\n\nBeim Beispiel des Steckers ist es offensichtlich, dass eine Monitorverbindung nur jene Signale enthalten soll, die zur Darstellung eines Bildes auf dem Monitor erforderlich sind. Genauso verhält es sich mit Software Interfaces. Auch sie sollten so klein wie möglich sein, um unnötige Kopplung zu vermeiden. Und genau wie beim Monitorstecker sollte das Interface eine hohe Kohäsion haben: Es sollte nur Dinge enthalten, die wirklich eng zusammen gehören.\n\nUm das Interface Segregation Principle anzuwenden, stehen die beiden Refaktorisierungen [Extract Interface](http://refactoring.com/catalog/extractInterface.html) und [Extract Superclass](http://refactoring.com/catalog/extractSuperclass.html) zur Verfügung.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Inversion-of-Control-Container":{"title":"Inversion of Control Container","content":"#cleancode \n# Inversion of Control Container\n\n\u003e**Warum?**\n\u003eNur, was nicht fest verdrahtet ist, kann leichter umkonfiguriert werden.\n\nBereits im [[CleanCode/Gelber Grad|gelben Grad]] hat der [[CleanCode/Clean Code Developer|CCD]] das [[CleanCode/Dependency Inversion Principle]] kennengelernt. Dabei wurden die Abhängigkeiten noch „von Hand“ aufgelöst. Der nächste logische Schritt besteht nun darin, das Auflösen der Abhängigkeiten zu automatisieren. Dazu stehen zwei Verfahren zur Verfügung:\n\n-   Locator\n-   Container\n\nBeide verwenden einen sogenannten _Inversion of Control Container_ (IoC Container). Vor der Verwendung des Containers müssen die verwendeten Klassen im Container hinterlegt werden. Anschließend kann der Container Instanzen der hinterlegten Klassen liefern. Beim _[[Locator]]_ geschieht dies explizit. Dies hat den Vorteil, dass die Abhängigkeiten nicht alle im Konstruktor der Klasse aufgeführt werden müssen. Bei Querschnittsaufgaben wie beispielsweise _[[Logging]]_ ist dies ein übliches Vorgehen. In der Regel werden die Abhängigkeiten jedoch als Parameter des Konstruktors aufgeführt. Dies hat den Vorteil dass alle Abhängigkeiten sichtbar sind. Der Container ist damit in der Lage die Abhängigkeiten implizit aufzulösen in dem er rekursiv alle benötigten Objekte über den Container instanziert.\n\nIoC Container werden wichtig, sobald die Anzahl der Klassen wächst. Wenn man _[[CleanCode/Separation of Concerns]]_ beherzigt, entstehen viele kleine Klassen mit überschaubaren Aufgaben. Das Zusammensetzen von Instanzen dieser Klassen wird entsprechend aufwendiger. Genau hier setzt der IoC Container an, er hilft beim Instanziieren und Verbinden der vielen kleinen Objekte.\n\nEin weiterer Vorteil von IoC Containern ist die Tatsache, dass der _Lebenszyklus_ eines Objektes per Konfiguration bestimmt werden kann. Soll es zur Laufzeit nur eine einzige Instanz eines Objektes geben (_[[CleanCode/Singleton]]_) kann der Container angewiesen werden, immer ein und dieselbe Instanz zu liefern. Auch andere Lebenszyklen wie z.B. _eine Instanz pro Session_ werden unterstützt.\n\nUm bei Verwendung eines Locators nicht in Abhängigkeit zu einem bestimmten IoC Container zu geraten, kann der _[[Microsoft Common Service Locator]]_ (siehe Tools) verwendet werden. Dieser bietet eine vereinheitlichte Schnittstelle zu den gängigen IoC Containern.\n\nZum Verständnis der Mechanik die hinter einem IoC Container steckt, ist es nützlich die Funktionalität einmal selber zu implementieren. Dabei soll kein vollständiger Container implementiert werden sondern lediglich die Grundfunktionen.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Issue-Tracking":{"title":"Issue Tracking","content":"tags: #cleancode \n\n# Issue Tracking\n\n\u003e**Warum?**\n\u003eNur, was man aufschreibt, vergisst man nicht und kann man effektiv delegieren und verfolgen.\n\nEine strukturierte Verwaltung aller „Issues“ ist schon deshalb erforderlich, damit nichts verloren geht. Und nur wenn ein Überblick über alle offenen Punkte möglich ist, können die Punkte priorisiert und in eine Reihenfolge gebracht werden. Dazu bedarf es nicht zwangsläufig ausgeklügelter Tools, ein Board mit Pappkarten kann den Zweck auch erfüllen. Vor allem sollte hier nicht das Tool im Vordergrund stehen, sondern die Tätigkeit.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Iterative-Development":{"title":"Iterative Development","content":"tags: #cleancode \n\n# Iterative Development\n\n\u003e**Warum?**\n\u003eFrei nach von Clausewitz: Kein Entwurf, keine Implementation überlebt den Kontakt mit dem Kunden. Softwareentwicklung tut daher gut daran, ihren Kurs korrigieren zu können.\n\nNatürlich schreitet Softwareentwicklung immer von einer Planung über die Implementation zu einem Test durch den Kunden voran. Irrig ist allerdings die Annahme, ein Projekt käme mit einer Planungsphase und einer Implementationsphase und einer Kundentestphase aus. Das funktioniert – wenn überhaupt – nur in trivialen Szenarien, wo in der Planungsphase alle Anforderungen bekannt sind. In realen Projekten jedoch liefert jede Phase Erkenntnisse für vorhergehende Phasen. Allemal durch den Kundentest ergeben sich Konsequenzen für die Planung und Implementation.\n\nSolche Erkenntnisse können allerdings nur Einfluss auf ein Projekt nehmen, wenn das Vorgehen nicht linear ist. Wenn es von einer späteren Phase keinen Weg zurück zu einer früheren Phase gibt, ist Feedback nutzlos.\n\nUm Feedback in ein Softwareprodukt einfließen lassen zu können, muss der Entwicklungsprozess Schleifen enthalten. Allemal die Schleife von der Kundentestphase zurück zur Planung ist nötig. Das heißt, Softwareentwicklung kann nur iterativ, also in mehreren Durchläufen, über den Anforderungskatalog des Kunden stattfinden. Wer versucht, „mit einem Mal“ (big bang) auszuliefern, handelt dieser Erkenntnis zuwider. Der Softwareentwicklungsprozes ist vielmehr so zu planen, dass er sich durch die Anforderungen „in kleinen Happen durchbeißt“. Jeder dieser Happen sollte nicht größer sein, als dass der Durchlauf von Planung bis Kundentest mehr als 2-4 Wochen dauert. Nur dann kommt das Feedback vom Kunden häufig genug, um nicht allzu lange in der Umsetzung in die Irre zu laufen.\n\nSoftwareentwicklung ist damit ein Lernprozess. In seinem Verlauf lernt das Projektteam etwas über die Anforderungen des Kunden. Es hört ihm zu, plant, implementiert, und händigt eine Softwareversion aus, die das Verständnis des Gehörten widerspiegelt. Dann hört das Team wieder zu, plant weiter/erneut nach den aktuellen Erkenntnissen usw. usf. immer im Kreis. Iteration für Iteration. Manchmal wird etwas aus einer früheren Iteration verfeinert, manchmal Neues hinzugefügt.\n\nDoch nicht nur die Entwicklung einer Software ist ein Lernprozess. Lernen sollte auch auf organisatorischer Ebene stattfinden. Das Team sollte nicht nur über den Kunden etwas lernen, sondern auch über sich selbst. Deshalb sollte es auch immer wieder „Haltepunkte“ geben, an denen das Team über sein Vorgehen reflektiert. Die Erkenntnisse aus solcher Retrospektive fließen dann ein in die nächste Iteration der organisatorischen Entwicklung. Hier schließt der blaue Grad an den roten Grad an, zu dem die tägliche persönliche Reflexion gehört.\n\nNatürlich muss jede Iteration auch ein Ende haben. Und damit man weiß ob man fertig ist, muss vorher klar definiert sein, was in der Iteration erreicht werden soll. Die Erreichbarkeit von Zielen kann immer nur geschätzt werden, auch dabei hilft die Reflexion, um die Schätzungen schrittweise soweit zu verbessern, dass sie für die Planung ausreichend genau sind. Doch wann ist das vorher definierte Ziel erreicht? [‚What is done?‘](http://www.hanselminutes.com/119/what-is-done-a-conversation-with-scrum-co-creator-ken-schwaber) Oberstes Ziel ist die Lieferung funktionsfähiger Software an unsere Kunden. Folglich kann das Ziel nur erreicht sein wenn wir auslieferungsfertige Software produziert haben. Das bedeutet insbesondere, dass die Software getestet ist und dass sie per Setup installiert werden kann. Durch [[CleanCode/Continuous Integration]] stellen wir dies kontinuierlich sicher. Keinesfalls dürfen wir kurz vor Ende einer Iteration entscheiden, dass ein Ziel erreicht ist, obwohl noch nicht alle Tests abgeschlossen sind.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Iterator":{"title":"Iterator","content":"tags:  #cleancode/designpatterns \n\n# Iterator\n\n## Intent\n**Iterator** is a behavioral design pattern that lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.).\nCollections are one of the most used data types in programming. Nonetheless, a collection is just a container for a group of objects.\n\n## Problem\n![Various types of collections](https://refactoring.guru/images/patterns/diagrams/iterator/problem1.png)\n\nVarious types of collections.\n\nMost collections store their elements in simple lists. However, some of them are based on stacks, trees, graphs and other complex data structures.\n\nBut no matter how a collection is structured, it must provide some way of accessing its elements so that other code can use these elements. There should be a way to go through each element of the collection without accessing the same elements over and over.\n\nThis may sound like an easy job if you have a collection based on a list. You just loop over all of the elements. But how do you sequentially traverse elements of a complex data structure, such as a tree? For example, one day you might be just fine with depth-first traversal of a tree. Yet the next day you might require breadth-first traversal. And the next week, you might need something else, like random access to the tree elements.\n\n![Various traversal algorithms](https://refactoring.guru/images/patterns/diagrams/iterator/problem2.png)\n\nThe same collection can be traversed in several different ways.\n\nAdding more and more traversal algorithms to the collection gradually blurs its primary responsibility, which is efficient data storage. Additionally, some algorithms might be tailored for a specific application, so including them into a generic collection class would be weird.\n\nOn the other hand, the client code that’s supposed to work with various collections may not even care how they store their elements. However, since collections all provide different ways of accessing their elements, you have no option other than to couple your code to the specific collection classes.\n\n##  Solution\n\nThe main idea of the Iterator pattern is to extract the traversal behavior of a collection into a separate object called an _iterator_.\n\n![Iterators implement various traversal algorithms](https://refactoring.guru/images/patterns/diagrams/iterator/solution1.png)\n\nIterators implement various traversal algorithms. Several iterator objects can traverse the same collection at the same time.\n\nIn addition to implementing the algorithm itself, an iterator object encapsulates all of the traversal details, such as the current position and how many elements are left till the end. Because of this, several iterators can go through the same collection at the same time, independently of each other.\n\nUsually, iterators provide one primary method for fetching elements of the collection. The client can keep running this method until it doesn’t return anything, which means that the iterator has traversed all of the elements.\n\nAll iterators must implement the same interface. This makes the client code compatible with any collection type or any traversal algorithm as long as there’s a proper iterator. If you need a special way to traverse a collection, you just create a new iterator class, without having to change the collection or the client.\n\n##  Real-World Analogy\n\n![Various ways to walk around Rome](https://refactoring.guru/images/patterns/content/iterator/iterator-comic-1-en.png)\n\nVarious ways to walk around Rome.\n\nYou plan to visit Rome for a few days and visit all of its main sights and attractions. But once there, you could waste a lot of time walking in circles, unable to find even the Colosseum.\n\nOn the other hand, you could buy a virtual guide app for your smartphone and use it for navigation. It’s smart and inexpensive, and you could be staying at some interesting places for as long as you want.\n\nA third alternative is that you could spend some of the trip’s budget and hire a local guide who knows the city like the back of his hand. The guide would be able to tailor the tour to your likings, show you every attraction and tell a lot of exciting stories. That’ll be even more fun; but, alas, more expensive, too.\n\nAll of these options—the random directions born in your head, the smartphone navigator or the human guide—act as iterators over the vast collection of sights and attractions located in Rome.\n\n##  Structure\n\n![Structure of the Iterator design pattern](https://refactoring.guru/images/patterns/diagrams/iterator/structure.png)\n\n1.  The **Iterator** interface declares the operations required for traversing a collection: fetching the next element, retrieving the current position, restarting iteration, etc.\n    \n2.  **Concrete Iterators** implement specific algorithms for traversing a collection. The iterator object should track the traversal progress on its own. This allows several iterators to traverse the same collection independently of each other.\n    \n3.  The **Collection** interface declares one or multiple methods for getting iterators compatible with the collection. Note that the return type of the methods must be declared as the iterator interface so that the concrete collections can return various kinds of iterators.\n    \n4.  **Concrete Collections** return new instances of a particular concrete iterator class each time the client requests one. You might be wondering, where’s the rest of the collection’s code? Don’t worry, it should be in the same class. It’s just that these details aren’t crucial to the actual pattern, so we’re omitting them.\n    \n5.  The **Client** works with both collections and iterators via their interfaces. This way the client isn’t coupled to concrete classes, allowing you to use various collections and iterators with the same client code.\n    \n    Typically, clients don’t create iterators on their own, but instead get them from collections. Yet, in certain cases, the client can create one directly; for example, when the client defines its own special iterator.\n    \n\n##  Pseudocode\n\nIn this example, the **Iterator** pattern is used to walk through a special kind of collection which encapsulates access to Facebook’s social graph. The collection provides several iterators that can traverse profiles in various ways.\n\n![Structure of the Iterator pattern example](https://refactoring.guru/images/patterns/diagrams/iterator/example.png)\n\nExample of iterating over social profiles.\n\nThe ‘friends’ iterator can be used to go over the friends of a given profile. The ‘colleagues’ iterator does the same, except it omits friends who don’t work at the same company as a target person. Both iterators implement a common interface which allows clients to fetch profiles without diving into implementation details such as authentication and sending REST requests.\n\nThe client code isn’t coupled to concrete classes because it works with collections and iterators only through interfaces. If you decide to connect your app to a new social network, you simply need to provide new collection and iterator classes without changing the existing code.\n\n```kotlin\n// The collection interface must declare a factory method for\n// producing iterators. You can declare several methods if there\n// are different kinds of iteration available in your program.\ninterface SocialNetwork is\n    method createFriendsIterator(profileId):ProfileIterator\n    method createCoworkersIterator(profileId):ProfileIterator\n\n// Each concrete collection is coupled to a set of concrete\n// iterator classes it returns. But the client isn't, since the\n// signature of these methods returns iterator interfaces.\nclass Facebook implements SocialNetwork is\n    // ... The bulk of the collection's code should go here ...\n\n    // Iterator creation code.\n    method createFriendsIterator(profileId) is\n        return new FacebookIterator(this, profileId, \"friends\")\n    method createCoworkersIterator(profileId) is\n        return new FacebookIterator(this, profileId, \"coworkers\")\n\n// The common interface for all iterators.\ninterface ProfileIterator is\n    method getNext():Profile\n    method hasMore():bool\n\n// The concrete iterator class.\nclass FacebookIterator implements ProfileIterator is\n    // The iterator needs a reference to the collection that it\n    // traverses.\n    private field facebook: Facebook\n    private field profileId, type: string\n\n    // An iterator object traverses the collection independently\n    // from other iterators. Therefore it has to store the\n    // iteration state.\n    private field currentPosition\n    private field cache: array of Profile\n\n    constructor FacebookIterator(facebook, profileId, type) is\n        this.facebook = facebook\n        this.profileId = profileId\n        this.type = type\n\n    private method lazyInit() is\n        if (cache == null)\n            cache = facebook.socialGraphRequest(profileId, type)\n\n    // Each concrete iterator class has its own implementation\n    // of the common iterator interface.\n    method getNext() is\n        if (hasMore())\n            currentPosition++\n            return cache[currentPosition]\n\n    method hasMore() is\n        lazyInit()\n        return currentPosition \u003c cache.length\n\n// Here is another useful trick: you can pass an iterator to a\n// client class instead of giving it access to a whole\n// collection. This way, you don't expose the collection to the\n// client.\n//\n// And there's another benefit: you can change the way the\n// client works with the collection at runtime by passing it a\n// different iterator. This is possible because the client code\n// isn't coupled to concrete iterator classes.\nclass SocialSpammer is\n    method send(iterator: ProfileIterator, message: string) is\n        while (iterator.hasMore())\n            profile = iterator.getNext()\n            System.sendEmail(profile.getEmail(), message)\n\n// The application class configures collections and iterators\n// and then passes them to the client code.\nclass Application is\n    field network: SocialNetwork\n    field spammer: SocialSpammer\n\n    method config() is\n        if working with Facebook\n            this.network = new Facebook()\n        if working with LinkedIn\n            this.network = new LinkedIn()\n        this.spammer = new SocialSpammer()\n\n    method sendSpamToFriends(profile) is\n        iterator = network.createFriendsIterator(profile.getId())\n        spammer.send(iterator, \"Very important message\")\n\n    method sendSpamToCoworkers(profile) is\n        iterator = network.createCoworkersIterator(profile.getId())\n        spammer.send(iterator, \"Very important message\")\n```\n\n## Applicability\n- **Use the Iterator pattern when your collection has a complex data structure under the hood, but you want to hide its complexity from clients (either for convenience or security reasons).**\n\t The iterator encapsulates the details of working with a complex data structure, providing the client with several simple methods of accessing the collection elements. While this approach is very convenient for the client, it also protects the collection from careless or malicious actions which the client would be able to perform if working with the collection directly.\n- **Use the pattern to reduce duplication of the traversal code across your app.**\n\t The code of non-trivial iteration algorithms tends to be very bulky. When placed within the business logic of an app, it may blur the responsibility of the original code and make it less maintainable. Moving the traversal code to designated iterators can help you make the code of the application more lean and clean.\n- **Use the Iterator when you want your code to be able to traverse different data structures or when types of these structures are unknown beforehand.**\n\t The pattern provides a couple of generic interfaces for both collections and iterators. Given that your code now uses these interfaces, it’ll still work if you pass it various kinds of collections and iterators that implement these interfaces.\n\n##  How to Implement\n\n1.  Declare the iterator interface. At the very least, it must have a method for fetching the next element from a collection. But for the sake of convenience you can add a couple of other methods, such as fetching the previous element, tracking the current position, and checking the end of the iteration.\n    \n2.  Declare the collection interface and describe a method for fetching iterators. The return type should be equal to that of the iterator interface. You may declare similar methods if you plan to have several distinct groups of iterators.\n    \n3.  Implement concrete iterator classes for the collections that you want to be traversable with iterators. An iterator object must be linked with a single collection instance. Usually, this link is established via the iterator’s constructor.\n    \n4.  Implement the collection interface in your collection classes. The main idea is to provide the client with a shortcut for creating iterators, tailored for a particular collection class. The collection object must pass itself to the iterator’s constructor to establish a link between them.\n    \n5.  Go over the client code to replace all of the collection traversal code with the use of iterators. The client fetches a new iterator object each time it needs to iterate over the collection elements.\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| _[[CleanCode/Single Responsibility Principle]]_. You can clean up the client code and the collections by extracting bulky traversal algorithms into separate classes. |  Applying the pattern can be an overkill if your app only works with simple collections. |\n| [[CleanCode/Open Closed Principle]]. You can implement new types of collections and iterators and pass them to existing code without breaking anything. | Using an iterator may be less efficient than going through elements of some specialized collections directly.|\n| You can iterate over the same collection in parallel because each iterator object contains its own iteration state. ||\n| For the same reason, you can delay an iteration and continue it when needed. | |\n \n## Relations with Other Patterns\n- You can use Iterators to traverse [[CleanCode/Composite]] trees.\n- You can use [[CleanCode/Factory]] Method along with Iterator to let collection subclasses return different types of iterators that are compatible with the collections.\n- You can use [[CleanCode/Memento]] along with Iterator to capture the current iteration state and roll it back if necessary.\n- You can use [[CleanCode/Visitor]] along with Iterator to traverse a complex data structure and execute some operation over its elements, even if they all have different classes.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/KISS":{"title":"KISS","content":"#cleancode \n# Keep it simple, stupid (KISS)\n\n\u003e**Warum?**\n\u003eWer mehr tut als das Einfachste, lässt den Kunden warten und macht die Lösung unnötig kompliziert.\n\nOder um es mit Albert Einsteins Worten zu sagen: \n\u003e„Alles sollte so einfach wie möglich gemacht werden, aber nicht einfacher.“\n \n Für die Wandelbarkeit des Codes ist zwingende Voraussetzung, dass der Code verständlich ist. Eine einfache, klare und leicht verständliche Lösung sollte daher immer bevorzugt werden. Wenn man seinen eigenen Code nach kurzer Zeit schon nicht mehr versteht, sollten die Alarmglocken klingen. Noch wichtiger aber ist, dass auch andere Entwickler den Code schnell verstehen können. Dabei helfen regelmäßige [[CleanCode/Code Reviews]] und [[Pair Programming]]. Sie dienen der Kontrolle, ob tatsächlich die einfachste Lösung verwendet wurde.\n\nGerade in technischen Details steckt die Versuchung, eine komplizierte Lösung anzustreben. Das Bekannte, naheliegende ist manchmal zu „langweilig“ – und schon hat sich eine komplizierte Lösung eingeschlichen. Wenn die einfache Lösung auch funktioniert, sollte ihr Vorrang gewährt werden. Das gleiche gilt für Datenstrukturen. Wenn ein [[IEnumerable]] reicht, sollte keine [[ICollection]] oder sogar [[IList]] verwendet werden.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Law-of-Demeter":{"title":"Law of Demeter","content":"tags: #cleancode \n\n# Law of Demeter\n\n\u003e**Warum?**\n\u003eAbhängigkeiten von Objekten über mehrere Glieder einer Dienstleistungskette hinweg führen zu unschön enger Kopplung.\n\nBeim [Law of Demeter](http://www.lieser-online.de/blog/?p=124) geht es darum, das Zusammenspiel von Objekten auf ein gesundes Maß zu beschränken. Man kann es vereinfacht umschreiben mit „Don’t talk to strangers“. Nach dem Law of Demeter soll eine Methode nur folgende andere Methoden verwenden:\n\n-   Methoden der eigenen Klasse\n-   Methoden der Parameter\n-   Methoden assoziierter Klassen\n-   Methoden selbst erzeugter Objekte\n\nAllerdings: Es ist zu berücksichtigen, dass ab und zu auch reine Datenhaltungsklassen Sinn ergeben. Auf diese muss man das Law of Demeter natürlich nicht anwenden. Es kann z.B. durchaus sinnvoll sein, die Konfigurationsdaten in mehrere Klassen hierarchisch zu verteilen, so dass sich am Ende folgender Zugriff auf einen Wert ergeben könnte:\n\n```csharp\nint margin = config.Pages.Margins.Left;\n```\n\nWürde man hier das Law of Demeter anwenden, wäre nur der Zugriff auf config.Pages gestattet.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Legacy-Code":{"title":"Legacy Code","content":"tags: #cleancode/refactoring\n\n# Legacy Code","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Liskov-Substitution-Principle":{"title":"Liskov Substitution Principle","content":"#cleancode \n# Liskov Substitution Principle\n\n\u003e[!question] **Warum?**\n\u003eWer mit Erben zu tun hat, möchte keine Überraschungen erleben, wenn er mit Erblassern vertraut ist.\n\nAuch das Liskov Substitution Principle ([LSP](https://drive.google.com/file/d/0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh/view)) ist ein [[CleanCode/SOLID]] Prinzip. Es besagt, dass Subtypen sich so verhalten müssen wie ihr Basistyp. Dies klingt zunächst banal. Am Beispiel von Exceptions wird deutlich, welche Probleme entstehen, wenn das Prinzip verletzt wird: Löst der Basistyp bei der Ausführung einer Methode keine Exception aus, müssen alle Subtypen sich an diese Regel halten. Löst die Methode eines Subtyps dennoch eine Exception aus, würde dies bei Verwendern, die ein Objekt vom Basistyp erwarten, Probleme verursachen, weil sie nicht darauf vorbereitet sind. Wenn der Basistyp an der Stelle keine Exception auslöst, ist der Verwender nicht darauf eingestellt, Exceptions behandeln zu müssen.\n\nAllgemeiner kann man das Prinzip auch so ausdrücken, dass ein Subtyp die Funktionalität eines Basistyps lediglich erweitern, aber nicht einschränken darf. Wenn eine Methode im Basistyp auf einem bestimmten Wertebereich definiert ist, darf der Subtyp diesen Wertebereich übernehmen oder auch erweitern, er darf ihn jedoch keinesfall einschränken.\n\nAus dem Liskov Substitution Principle ergibt sich ferner die Empfehlung, über Vererbung sehr genau nachzudenken. In den allermeisten Fällen ist die Komposition der Vererbung vorzuziehen (_[[CleanCode/Favour Composition over Inheritance]]_). Bei der Vererbung sollte man in jedem Fall über das Verhalten nachdenken, nicht nur über die Struktur. Statt Vererbung als_is-a_ Relation zu betrachten und dabei nur die (Daten-)Struktur zu bedenken, sollte man besser von einer _behaves-as_ Relation ausgehen und das Verhalten der Klasse berücksichtigen.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Mediator":{"title":"Mediator","content":"tags:  #cleancode/designpatterns \n\n# Mediator\n\n## Intent\n**Mediator** is a behavioral design pattern that lets you reduce chaotic dependencies between objects. The pattern restricts direct communications between the objects and forces them to collaborate only via a mediator object.\n## Problem\nSay you have a dialog for creating and editing customer profiles. It consists of various form controls such as text fields, checkboxes, buttons, etc.\n\n![Chaotic relations between elements of the user interface](https://refactoring.guru/images/patterns/diagrams/mediator/problem1-en.png)\n\nRelations between elements of the user interface can become chaotic as the application evolves.\n\nSome of the form elements may interact with others. For instance, selecting the “I have a dog” checkbox may reveal a hidden text field for entering the dog’s name. Another example is the submit button that has to validate values of all fields before saving the data.\n\n![Elements of the UI are interdependent](https://refactoring.guru/images/patterns/diagrams/mediator/problem2.png)\n\nElements can have lots of relations with other elements. Hence, changes to some elements may affect the others.\n\nBy having this logic implemented directly inside the code of the form elements you make these elements’ classes much harder to reuse in other forms of the app. For example, you won’t be able to use that checkbox class inside another form, because it’s coupled to the dog’s text field. You can use either all the classes involved in rendering the profile form, or none at all.\n\n##  Solution\n\nThe Mediator pattern suggests that you should cease all direct communication between the components which you want to make independent of each other. Instead, these components must collaborate indirectly, by calling a special mediator object that redirects the calls to appropriate components. As a result, the components depend only on a single mediator class instead of being coupled to dozens of their colleagues.\n\nIn our example with the profile editing form, the dialog class itself may act as the mediator. Most likely, the dialog class is already aware of all of its sub-elements, so you won’t even need to introduce new dependencies into this class.\n\n![UI elements should communicate via the mediator.](https://refactoring.guru/images/patterns/diagrams/mediator/solution1-en.png)\n\nUI elements should communicate indirectly, via the mediator object.\n\nThe most significant change happens to the actual form elements. Let’s consider the submit button. Previously, each time a user clicked the button, it had to validate the values of all individual form elements. Now its single job is to notify the dialog about the click. Upon receiving this notification, the dialog itself performs the validations or passes the task to the individual elements. Thus, instead of being tied to a dozen form elements, the button is only dependent on the dialog class.\n\nYou can go further and make the dependency even looser by extracting the common interface for all types of dialogs. The interface would declare the notification method which all form elements can use to notify the dialog about events happening to those elements. Thus, our submit button should now be able to work with any dialog that implements that interface.\n\nThis way, the Mediator pattern lets you encapsulate a complex web of relations between various objects inside a single mediator object. The fewer dependencies a class has, the easier it becomes to modify, extend or reuse that class.\n\n##  Real-World Analogy\n\n![Air traffic control tower](https://refactoring.guru/images/patterns/diagrams/mediator/live-example.png)\n\nAircraft pilots don’t talk to each other directly when deciding who gets to land their plane next. All communication goes through the control tower.\n\nPilots of aircraft that approach or depart the airport control area don’t communicate directly with each other. Instead, they speak to an air traffic controller, who sits in a tall tower somewhere near the airstrip. Without the air traffic controller, pilots would need to be aware of every plane in the vicinity of the airport, discussing landing priorities with a committee of dozens of other pilots. That would probably skyrocket the airplane crash statistics.\n\nThe tower doesn’t need to control the whole flight. It exists only to enforce constraints in the terminal area because the number of involved actors there might be overwhelming to a pilot.\n\n##  Structure\n\n![Structure of the Mediator design pattern](https://refactoring.guru/images/patterns/diagrams/mediator/structure.png)\n\n1.  **Components** are various classes that contain some business logic. Each component has a reference to a mediator, declared with the type of the mediator interface. The component isn’t aware of the actual class of the mediator, so you can reuse the component in other programs by linking it to a different mediator.\n    \n2.  The **Mediator** interface declares methods of communication with components, which usually include just a single notification method. Components may pass any context as arguments of this method, including their own objects, but only in such a way that no coupling occurs between a receiving component and the sender’s class.\n    \n3.  **Concrete Mediators** encapsulate relations between various components. Concrete mediators often keep references to all components they manage and sometimes even manage their lifecycle.\n    \n4.  Components must not be aware of other components. If something important happens within or to a component, it must only notify the mediator. When the mediator receives the notification, it can easily identify the sender, which might be just enough to decide what component should be triggered in return.\n    \n    From a component’s perspective, it all looks like a total black box. The sender doesn’t know who’ll end up handling its request, and the receiver doesn’t know who sent the request in the first place.\n    \n\n##  Pseudocode\n\nIn this example, the **Mediator** pattern helps you eliminate mutual dependencies between various UI classes: buttons, checkboxes and text labels.\n\n![Structure of the Mediator pattern example](https://refactoring.guru/images/patterns/diagrams/mediator/example.png)\n\nStructure of the UI dialog classes.\n\nAn element, triggered by a user, doesn’t communicate with other elements directly, even if it looks like it’s supposed to. Instead, the element only needs to let its mediator know about the event, passing any contextual info along with that notification.\n\nIn this example, the whole authentication dialog acts as the mediator. It knows how concrete elements are supposed to collaborate and facilitates their indirect communication. Upon receiving a notification about an event, the dialog decides what element should address the event and redirects the call accordingly.\n\n```kotlin\n// The mediator interface declares a method used by components\n// to notify the mediator about various events. The mediator may\n// react to these events and pass the execution to other\n// components.\ninterface Mediator is\n    method notify(sender: Component, event: string)\n\n// The concrete mediator class. The intertwined web of\n// connections between individual components has been untangled\n// and moved into the mediator.\nclass AuthenticationDialog implements Mediator is\n    private field title: string\n    private field loginOrRegisterChkBx: Checkbox\n    private field loginUsername, loginPassword: Textbox\n    private field registrationUsername, registrationPassword,\n                  registrationEmail: Textbox\n    private field okBtn, cancelBtn: Button\n\n    constructor AuthenticationDialog() is\n        // Create all component objects by passing the current\n        // mediator into their constructors to establish links.\n\n    // When something happens with a component, it notifies the\n    // mediator. Upon receiving a notification, the mediator may\n    // do something on its own or pass the request to another\n    // component.\n    method notify(sender, event) is\n        if (sender == loginOrRegisterChkBx and event == \"check\")\n            if (loginOrRegisterChkBx.checked)\n                title = \"Log in\"\n                // 1. Show login form components.\n                // 2. Hide registration form components.\n            else\n                title = \"Register\"\n                // 1. Show registration form components.\n                // 2. Hide login form components\n\n        if (sender == okBtn \u0026\u0026 event == \"click\")\n            if (loginOrRegister.checked)\n                // Try to find a user using login credentials.\n                if (!found)\n                    // Show an error message above the login\n                    // field.\n            else\n                // 1. Create a user account using data from the\n                // registration fields.\n                // 2. Log that user in.\n                // ...\n\n// Components communicate with a mediator using the mediator\n// interface. Thanks to that, you can use the same components in\n// other contexts by linking them with different mediator\n// objects.\nclass Component is\n    field dialog: Mediator\n\n    constructor Component(dialog) is\n        this.dialog = dialog\n\n    method click() is\n        dialog.notify(this, \"click\")\n\n    method keypress() is\n        dialog.notify(this, \"keypress\")\n\n// Concrete components don't talk to each other. They have only\n// one communication channel, which is sending notifications to\n// the mediator.\nclass Button extends Component is\n    // ...\n\nclass Textbox extends Component is\n    // ...\n\nclass Checkbox extends Component is\n    method check() is\n        dialog.notify(this, \"check\")\n    // ...\n```\n##  Applicability\n\n- **Use the Mediator pattern when it’s hard to change some of the classes because they are tightly coupled to a bunch of other classes.**\n\t The pattern lets you extract all the relationships between classes into a separate class, isolating any changes to a specific component from the rest of the components.\n- **Use the pattern when you can’t reuse a component in a different program because it’s too dependent on other components.**\n\t After you apply the Mediator, individual components become unaware of the other components. They could still communicate with each other, albeit indirectly, through a mediator object. To reuse a component in a different app, you need to provide it with a new mediator class.\n- **Use the Mediator when you find yourself creating tons of component subclasses just to reuse some basic behavior in various contexts.**\n\tSince all relations between components are contained within the mediator, it’s easy to define entirely new ways for these components to collaborate by introducing new mediator classes, without having to change the components themselves.\n\n##  How to Implement\n\n1.  Identify a group of tightly coupled classes which would benefit from being more independent (e.g., for easier maintenance or simpler reuse of these classes).\n    \n2.  Declare the mediator interface and describe the desired communication protocol between mediators and various components. In most cases, a single method for receiving notifications from components is sufficient.\n    \n    This interface is crucial when you want to reuse component classes in different contexts. As long as the component works with its mediator via the generic interface, you can link the component with a different implementation of the mediator.\n    \n3.  Implement the concrete mediator class. Consider storing references to all components inside the mediator. This way, you could call any component from the mediator’s methods.\n    \n4.  You can go even further and make the mediator responsible for the creation and destruction of component objects. After this, the mediator may resemble a [[CleanCode/Factory]] or a [[CleanCode/Facade]].\n    \n5.  Components should store a reference to the mediator object. The connection is usually established in the component’s constructor, where a mediator object is passed as an argument.\n    \n6.  Change the components’ code so that they call the mediator’s notification method instead of methods on other components. Extract the code that involves calling other components into the mediator class. Execute this code whenever the mediator receives notifications from that component.\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| [[CleanCode/Single Responsibility Principle]]. You can extract the communications between various components into a single place, making it easier to comprehend and maintain. |  Over time a mediator can evolve into a [[God Object]].\n| [[CleanCode/Open Closed Principle]]. You can introduce new mediators without having to change the actual components. ||\n| You can reduce coupling between various components of a program.||\n| You can reuse individual components more easily.||\n\n## Relations with Other Patterns\n- [[CleanCode/Chain of Responsibility]], [[CleanCode/Command]], Mediator and [[CleanCode/Observer]] address various ways of connecting senders and receivers of requests:\n\t- [[CleanCode/Chain of Responsibility]] passes a request sequentially along a dynamic chain of potential receivers until one of them handles it.\n\t- [[CleanCode/Command]] establishes unidirectional connections between senders and receivers.\n\t- Mediator eliminates direct connections between senders and receivers, forcing them to communicate indirectly via a mediator object.\n\t- [[CleanCode/Observer]] lets receivers dynamically subscribe to and unsubscribe from receiving requests.\n- [[CleanCode/Facade]] and Mediator have similar jobs: they try to organize collaboration between lots of tightly coupled classes.\n\t- [[CleanCode/Facade]] defines a simplified interface to a subsystem of objects, but it doesn’t introduce any new functionality. The subsystem itself is unaware of the [[CleanCode/Facade]]. Objects within the subsystem can communicate directly.\n\t- Mediator centralizes communication between components of the system. The components only know about the mediator object and don’t communicate directly.\n- The difference between Mediator and [[CleanCode/Observer]] is often elusive. In most cases, you can implement either of these patterns; but sometimes you can apply both simultaneously. Let’s see how we can do that.\n\t\n\tThe primary goal of Mediator is to eliminate mutual dependencies among a set of system components. Instead, these components become dependent on a single mediator object. The goal of [[CleanCode/Observer]] is to establish dynamic one-way connections between objects, where some objects act as subordinates of others.\n\n\tThere’s a popular implementation of the Mediator pattern that relies on [[CleanCode/Observer]]. The mediator object plays the role of publisher, and the components act as subscribers which subscribe to and unsubscribe from the mediator’s events. When Mediator is implemented this way, it may look very similar to [[CleanCode/Observer]].\n\n\tWhen you’re confused, remember that you can implement the Mediator pattern in other ways. For example, you can permanently link all the components to the same mediator object. This implementation won’t resemble [[CleanCode/Observer]] but will still be an instance of the Mediator pattern.\n\n\tNow imagine a program where all components have become publishers, allowing dynamic connections between each other. There won’t be a centralized mediator object, only a distributed set of observers.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Memento":{"title":"Memento","content":"tags:  #cleancode/designpatterns \n\n# Memento\n\n## Intent\n**Memento** is a behavioral design pattern that lets you save and restore the previous state of an object without revealing the details of its implementation.\n## Problem\nImagine that you’re creating a text editor app. In addition to simple text editing, your editor can format text, insert inline images, etc.\n\nAt some point, you decided to let users undo any operations carried out on the text. This feature has become so common over the years that nowadays people expect every app to have it. For the implementation, you chose to take the direct approach. Before performing any operation, the app records the state of all objects and saves it in some storage. Later, when a user decides to revert an action, the app fetches the latest snapshot from the history and uses it to restore the state of all objects.\n\n![Reverting operations in the editor](https://refactoring.guru/images/patterns/diagrams/memento/problem1-en.png)\n\nBefore executing an operation, the app saves a snapshot of the objects’ state, which can later be used to restore objects to their previous state.\n\nLet’s think about those state snapshots. How exactly would you produce one? You’d probably need to go over all the fields in an object and copy their values into storage. However, this would only work if the object had quite relaxed access restrictions to its contents. Unfortunately, most real objects won’t let others peek inside them that easily, hiding all significant data in private fields.\n\nIgnore that problem for now and let’s assume that our objects behave like hippies: preferring open relations and keeping their state public. While this approach would solve the immediate problem and let you produce snapshots of objects’ states at will, it still has some serious issues. In the future, you might decide to refactor some of the editor classes, or add or remove some of the fields. Sounds easy, but this would also require changing the classes responsible for copying the state of the affected objects.\n\n![How to make a copy of the object’s private state?](https://refactoring.guru/images/patterns/diagrams/memento/problem2-en.png)\n\nHow to make a copy of the object’s private state?\n\nBut there’s more. Let’s consider the actual “snapshots” of the editor’s state. What data does it contain? At a bare minimum, it must contain the actual text, cursor coordinates, current scroll position, etc. To make a snapshot, you’d need to collect these values and put them into some kind of container.\n\nMost likely, you’re going to store lots of these container objects inside some list that would represent the history. Therefore the containers would probably end up being objects of one class. The class would have almost no methods, but lots of fields that mirror the editor’s state. To allow other objects to write and read data to and from a snapshot, you’d probably need to make its fields public. That would expose all the editor’s states, private or not. Other classes would become dependent on every little change to the snapshot class, which would otherwise happen within private fields and methods without affecting outer classes.\n\nIt looks like we’ve reached a dead end: you either expose all internal details of classes, making them too fragile, or restrict access to their state, making it impossible to produce snapshots. Is there any other way to implement the \"undo\"?\n\n##  Solution\n\nAll problems that we’ve just experienced are caused by broken encapsulation. Some objects try to do more than they are supposed to. To collect the data required to perform some action, they invade the private space of other objects instead of letting these objects perform the actual action.\n\nThe Memento pattern delegates creating the state snapshots to the actual owner of that state, the _originator_ object. Hence, instead of other objects trying to copy the editor’s state from the “outside,” the editor class itself can make the snapshot since it has full access to its own state.\n\nThe pattern suggests storing the copy of the object’s state in a special object called _memento_. The contents of the memento aren’t accessible to any other object except the one that produced it. Other objects must communicate with mementos using a limited interface which may allow fetching the snapshot’s metadata (creation time, the name of the performed operation, etc.), but not the original object’s state contained in the snapshot.\n\n![The originator has full access to the memento, whereas the caretaker can only access the metadata](https://refactoring.guru/images/patterns/diagrams/memento/solution-en.png)\n\nThe originator has full access to the memento, whereas the caretaker can only access the metadata.\n\nSuch a restrictive policy lets you store mementos inside other objects, usually called _caretakers_. Since the caretaker works with the memento only via the limited interface, it’s not able to tamper with the state stored inside the memento. At the same time, the originator has access to all fields inside the memento, allowing it to restore its previous state at will.\n\nIn our text editor example, we can create a separate history class to act as the caretaker. A stack of mementos stored inside the caretaker will grow each time the editor is about to execute an operation. You could even render this stack within the app’s UI, displaying the history of previously performed operations to a user.\n\nWhen a user triggers the undo, the history grabs the most recent memento from the stack and passes it back to the editor, requesting a roll-back. Since the editor has full access to the memento, it changes its own state with the values taken from the memento.\n\n##  Structure\n\n### Implementation based on nested classes\n\nThe classic implementation of the pattern relies on support for nested classes, available in many popular programming languages (such as C++, C#, and Java).\n\n![Memento based on nested classes](https://refactoring.guru/images/patterns/diagrams/memento/structure1.png)\n\n1.  The **Originator** class can produce snapshots of its own state, as well as restore its state from snapshots when needed.\n    \n2.  The **Memento** is a value object that acts as a snapshot of the originator’s state. It’s a common practice to make the memento immutable and pass it the data only once, via the constructor.\n    \n3.  The **Caretaker** knows not only “when” and “why” to capture the originator’s state, but also when the state should be restored.\n    \n    A caretaker can keep track of the originator’s history by storing a stack of mementos. When the originator has to travel back in history, the caretaker fetches the topmost memento from the stack and passes it to the originator’s restoration method.\n    \n4.  In this implementation, the memento class is nested inside the originator. This lets the originator access the fields and methods of the memento, even though they’re declared private. On the other hand, the caretaker has very limited access to the memento’s fields and methods, which lets it store mementos in a stack but not tamper with their state.\n    \n\n### Implementation based on an intermediate interface\n\nThere’s an alternative implementation, suitable for programming languages that don’t support nested classes (yeah, PHP, I’m talking about you).\n\n![Memento without nested classes](https://refactoring.guru/images/patterns/diagrams/memento/structure2.png)\n\n1.  In the absence of nested classes, you can restrict access to the memento’s fields by establishing a convention that caretakers can work with a memento only through an explicitly declared intermediary interface, which would only declare methods related to the memento’s metadata.\n    \n2.  On the other hand, originators can work with a memento object directly, accessing fields and methods declared in the memento class. The downside of this approach is that you need to declare all members of the memento public.\n    \n\n### Implementation with even stricter encapsulation\n\nThere’s another implementation which is useful when you don’t want to leave even the slightest chance of other classes accessing the state of the originator through the memento.\n\n![Memento with strict encapsulation](https://refactoring.guru/images/patterns/diagrams/memento/structure3.png)\n\n1.  This implementation allows having multiple types of originators and mementos. Each originator works with a corresponding memento class. Neither originators nor mementos expose their state to anyone.\n    \n2.  Caretakers are now explicitly restricted from changing the state stored in mementos. Moreover, the caretaker class becomes independent from the originator because the restoration method is now defined in the memento class.\n    \n3.  Each memento becomes linked to the originator that produced it. The originator passes itself to the memento’s constructor, along with the values of its state. Thanks to the close relationship between these classes, a memento can restore the state of its originator, given that the latter has defined the appropriate setters.\n    \n##  Pseudocode\n\nThis example uses the Memento pattern alongside the [Command](https://refactoring.guru/design-patterns/command) pattern for storing snapshots of the complex text editor’s state and restoring an earlier state from these snapshots when needed.\n\n![Structure of the Memento example](https://refactoring.guru/images/patterns/diagrams/memento/example.png)\n\nSaving snapshots of the text editor’s state.\n\nThe command objects act as caretakers. They fetch the editor’s memento before executing operations related to commands. When a user attempts to undo the most recent command, the editor can use the memento stored in that command to revert itself to the previous state.\n\nThe memento class doesn’t declare any public fields, getters or setters. Therefore no object can alter its contents. Mementos are linked to the editor object that created them. This lets a memento restore the linked editor’s state by passing the data via setters on the editor object. Since mementos are linked to specific editor objects, you can make your app support several independent editor windows with a centralized undo stack.\n\n```kotlin\n// The originator holds some important data that may change over\n// time. It also defines a method for saving its state inside a\n// memento and another method for restoring the state from it.\nclass Editor is\n    private field text, curX, curY, selectionWidth\n\n    method setText(text) is\n        this.text = text\n\n    method setCursor(x, y) is\n        this.curX = x\n        this.curY = y\n\n    method setSelectionWidth(width) is\n        this.selectionWidth = width\n\n    // Saves the current state inside a memento.\n    method createSnapshot():Snapshot is\n        // Memento is an immutable object; that's why the\n        // originator passes its state to the memento's\n        // constructor parameters.\n        return new Snapshot(this, text, curX, curY, selectionWidth)\n\n// The memento class stores the past state of the editor.\nclass Snapshot is\n    private field editor: Editor\n    private field text, curX, curY, selectionWidth\n\n    constructor Snapshot(editor, text, curX, curY, selectionWidth) is\n        this.editor = editor\n        this.text = text\n        this.curX = x\n        this.curY = y\n        this.selectionWidth = selectionWidth\n\n    // At some point, a previous state of the editor can be\n    // restored using a memento object.\n    method restore() is\n        editor.setText(text)\n        editor.setCursor(curX, curY)\n        editor.setSelectionWidth(selectionWidth)\n\n// A command object can act as a caretaker. In that case, the\n// command gets a memento just before it changes the\n// originator's state. When undo is requested, it restores the\n// originator's state from a memento.\nclass Command is\n    private field backup: Snapshot\n\n    method makeBackup() is\n        backup = editor.createSnapshot()\n\n    method undo() is\n        if (backup != null)\n            backup.restore()\n    // ...\n\n```\n\n## Applicability\n- **Use the Memento pattern when you want to produce snapshots of the object’s state to be able to restore a previous state of the object.**\n\tThe Memento pattern lets you make full copies of an object’s state, including private fields, and store them separately from the object. While most people remember this pattern thanks to the “undo” use case, it’s also indispensable when dealing with transactions (i.e., if you need to roll back an operation on error).\n- **Use the pattern when direct access to the object’s fields/getters/setters violates its encapsulation.**\n\tThe Memento makes the object itself responsible for creating a snapshot of its state. No other object can read the snapshot, making the original object’s state data safe and secure.\n\n## How to Implement\n1.  Determine what class will play the role of the originator. It’s important to know whether the program uses one central object of this type or multiple smaller ones.\n    \n2.  Create the memento class. One by one, declare a set of fields that mirror the fields declared inside the originator class.\n    \n3.  Make the memento class immutable. A memento should accept the data just once, via the constructor. The class should have no setters.\n    \n4.  If your programming language supports nested classes, nest the memento inside the originator. If not, extract a blank interface from the memento class and make all other objects use it to refer to the memento. You may add some metadata operations to the interface, but nothing that exposes the originator’s state.\n    \n5.  Add a method for producing mementos to the originator class. The originator should pass its state to the memento via one or multiple arguments of the memento’s constructor.\n    \n    The return type of the method should be of the interface you extracted in the previous step (assuming that you extracted it at all). Under the hood, the memento-producing method should work directly with the memento class.\n    \n6.  Add a method for restoring the originator’s state to its class. It should accept a memento object as an argument. If you extracted an interface in the previous step, make it the type of the parameter. In this case, you need to typecast the incoming object to the memento class, since the originator needs full access to that object.\n    \n7.  The caretaker, whether it represents a command object, a history, or something entirely different, should know when to request new mementos from the originator, how to store them and when to restore the originator with a particular memento.\n    \n8.  The link between caretakers and originators may be moved into the memento class. In this case, each memento must be connected to the originator that had created it. The restoration method would also move to the memento class. However, this would all make sense only if the memento class is nested into originator or the originator class provides sufficient setters for overriding its state.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can produce snapshots of the object’s state without violating its encapsulation. | The app might consume lots of RAM if clients create mementos too often. |\n| You can simplify the originator’s code by letting the caretaker maintain the history of the originator’s state. | Caretakers should track the originator’s lifecycle to be able to destroy obsolete mementos. |\n| | Most dynamic programming languages, such as PHP, Python and JavaScript, can’t guarantee that the state within the memento stays untouched. |\n\n## Relations with Other Patterns\n- You can use [[CleanCode/Command]] and Memento together when implementing “undo”. In this case, commands are responsible for performing various operations over a target object, while mementos save the state of that object just before a [[CleanCode/Command]] gets executed.\n- You can use Memento along with [[CleanCode/Iterator]] to capture the current iteration state and roll it back if necessary.\n- Sometimes [[CleanCode/Prototype]] can be a simpler alternative to Memento. This works if the object, the state of which you want to store in the history, is fairly straightforward and doesn’t have links to external resources, or the links are easy to re-establish.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Mockups":{"title":"Mockups","content":"#cleancode \n# Mockups\n\n\u003e**Warum?**\n\u003eOhne Attrappen keine einfach kontrollierbaren Tests.\n\nIn der Regel verwenden Komponenten andere Komponenten. Will man eine Komponente isoliert testen, müssen diese Abhängigkeiten abgetrennt werden. Dabei interessiert uns nun ausschließlich die Funktionalität der zu testenden Komponente (_System Under Test (SUT)_). Und es interessiert uns, wie die Komponente mit den anderen interagiert.\n\nBeim Isolieren verwenden wir sogenannte Mockups. Diese werden anstelle der echten Komponenten verwendet. So interagiert das System Under Test während der Tests mit gut kontrollierbaren Attrappen statt mit realen Komponenten.\n\nDie Literatur kennt noch andere Bezeichnungen für Attrappen wie _Stub_, _Dummy_ oder _Fake_, die teilweise synonym zu Mockup benutzt werden, aber durchaus für [unterschiedliche Funktionsweisen](http://martinfowler.com/articles/mocksArentStubs.html) stehen. Bevor man ein Mock Framework wie z.B. [Rhino Mocks](https://hibernatingrhinos.com/oss/rhino-mocks) verwendet, sollte man ein Mockup zunächst „per Hand“ implementieren. Dies hilft, den Mechanismus zu verstehen.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Observer":{"title":"Observer","content":"tags:  #cleancode/designpatterns \n\n# Observer\n\n##  Intent\n\n**Observer** is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they’re observing.\n\n![Observer Design Pattern](https://refactoring.guru/images/patterns/content/observer/observer.png)\n\n##  Problem\n\nImagine that you have two types of objects: a `Customer` and a `Store`. The customer is very interested in a particular brand of product (say, it’s a new model of the iPhone) which should become available in the store very soon.\n\nThe customer could visit the store every day and check product availability. But while the product is still en route, most of these trips would be pointless.\n\n![Visiting store vs. sending spam](https://refactoring.guru/images/patterns/content/observer/observer-comic-1-en.png)\n\nVisiting the store vs. sending spam\n\nOn the other hand, the store could send tons of emails (which might be considered spam) to all customers each time a new product becomes available. This would save some customers from endless trips to the store. At the same time, it’d upset other customers who aren’t interested in new products.\n\nIt looks like we’ve got a conflict. Either the customer wastes time checking product availability or the store wastes resources notifying the wrong customers.\n\n##  Solution\n\nThe object that has some interesting state is often called _subject_, but since it’s also going to notify other objects about the changes to its state, we’ll call it _publisher_. All other objects that want to track changes to the publisher’s state are called _subscribers_.\n\nThe Observer pattern suggests that you add a subscription mechanism to the publisher class so individual objects can subscribe to or unsubscribe from a stream of events coming from that publisher. Fear not! Everything isn’t as complicated as it sounds. In reality, this mechanism consists of 1) an array field for storing a list of references to subscriber objects and 2) several public methods which allow adding subscribers to and removing them from that list.\n\n![Subscription mechanism](https://refactoring.guru/images/patterns/diagrams/observer/solution1-en.png)\n\nA subscription mechanism lets individual objects subscribe to event notifications.\n\nNow, whenever an important event happens to the publisher, it goes over its subscribers and calls the specific notification method on their objects.\n\nReal apps might have dozens of different subscriber classes that are interested in tracking events of the same publisher class. You wouldn’t want to couple the publisher to all of those classes. Besides, you might not even know about some of them beforehand if your publisher class is supposed to be used by other people.\n\nThat’s why it’s crucial that all subscribers implement the same interface and that the publisher communicates with them only via that interface. This interface should declare the notification method along with a set of parameters that the publisher can use to pass some contextual data along with the notification.\n\n![Notification methods](https://refactoring.guru/images/patterns/diagrams/observer/solution2-en.png)\n\nPublisher notifies subscribers by calling the specific notification method on their objects.\n\nIf your app has several different types of publishers and you want to make your subscribers compatible with all of them, you can go even further and make all publishers follow the same interface. This interface would only need to describe a few subscription methods. The interface would allow subscribers to observe publishers’ states without coupling to their concrete classes.\n\n##  Real-World Analogy\n\n![Magazine and newspaper subscriptions](https://refactoring.guru/images/patterns/content/observer/observer-comic-2-en.png)\n\nMagazine and newspaper subscriptions.\n\nIf you subscribe to a newspaper or magazine, you no longer need to go to the store to check if the next issue is available. Instead, the publisher sends new issues directly to your mailbox right after publication or even in advance.\n\nThe publisher maintains a list of subscribers and knows which magazines they’re interested in. Subscribers can leave the list at any time when they wish to stop the publisher sending new magazine issues to them.\n\n##  Structure\n\n![Structure of the Observer design pattern](https://refactoring.guru/images/patterns/diagrams/observer/structure.png)\n\n1.  The **Publisher** issues events of interest to other objects. These events occur when the publisher changes its state or executes some behaviors. Publishers contain a subscription infrastructure that lets new subscribers join and current subscribers leave the list.\n    \n2.  When a new event happens, the publisher goes over the subscription list and calls the notification method declared in the subscriber interface on each subscriber object.\n    \n3.  The **Subscriber** interface declares the notification interface. In most cases, it consists of a single `update` method. The method may have several parameters that let the publisher pass some event details along with the update.\n    \n4.  **Concrete Subscribers** perform some actions in response to notifications issued by the publisher. All of these classes must implement the same interface so the publisher isn’t coupled to concrete classes.\n    \n5.  Usually, subscribers need some contextual information to handle the update correctly. For this reason, publishers often pass some context data as arguments of the notification method. The publisher can pass itself as an argument, letting subscriber fetch any required data directly.\n    \n6.  The **Client** creates publisher and subscriber objects separately and then registers subscribers for publisher updates.\n    \n\n##  Pseudocode\n\nIn this example, the **Observer** pattern lets the text editor object notify other service objects about changes in its state.\n\n![Structure of the Observer pattern example](https://refactoring.guru/images/patterns/diagrams/observer/example.png)\n\nNotifying objects about events that happen to other objects.\n\nThe list of subscribers is compiled dynamically: objects can start or stop listening to notifications at runtime, depending on the desired behavior of your app.\n\nIn this implementation, the editor class doesn’t maintain the subscription list by itself. It delegates this job to the special helper object devoted to just that. You could upgrade that object to serve as a centralized event dispatcher, letting any object act as a publisher.\n\nAdding new subscribers to the program doesn’t require changes to existing publisher classes, as long as they work with all subscribers through the same interface.\n```kotlin\n// The base publisher class includes subscription management\n// code and notification methods.\nclass EventManager is\n    private field listeners: hash map of event types and listeners\n\n    method subscribe(eventType, listener) is\n        listeners.add(eventType, listener)\n\n    method unsubscribe(eventType, listener) is\n        listeners.remove(eventType, listener)\n\n    method notify(eventType, data) is\n        foreach (listener in listeners.of(eventType)) do\n            listener.update(data)\n\n// The concrete publisher contains real business logic that's\n// interesting for some subscribers. We could derive this class\n// from the base publisher, but that isn't always possible in\n// real life because the concrete publisher might already be a\n// subclass. In this case, you can patch the subscription logic\n// in with composition, as we did here.\nclass Editor is\n    public field events: EventManager\n    private field file: File\n\n    constructor Editor() is\n        events = new EventManager()\n\n    // Methods of business logic can notify subscribers about\n    // changes.\n    method openFile(path) is\n        this.file = new File(path)\n        events.notify(\"open\", file.name)\n\n    method saveFile() is\n        file.write()\n        events.notify(\"save\", file.name)\n\n    // ...\n\n// Here's the subscriber interface. If your programming language\n// supports functional types, you can replace the whole\n// subscriber hierarchy with a set of functions.\ninterface EventListener is\n    method update(filename)\n\n// Concrete subscribers react to updates issued by the publisher\n// they are attached to.\nclass LoggingListener implements EventListener is\n    private field log: File\n    private field message: string\n\n    constructor LoggingListener(log_filename, message) is\n        this.log = new File(log_filename)\n        this.message = message\n\n    method update(filename) is\n        log.write(replace('%s',filename,message))\n\nclass EmailAlertsListener implements EventListener is\n    private field email: string\n    private field message: string\n\n    constructor EmailAlertsListener(email, message) is\n        this.email = email\n        this.message = message\n\n    method update(filename) is\n        system.email(email, replace('%s',filename,message))\n\n// An application can configure publishers and subscribers at\n// runtime.\nclass Application is\n    method config() is\n        editor = new Editor()\n\n        logger = new LoggingListener(\n            \"/path/to/log.txt\",\n            \"Someone has opened the file: %s\")\n        editor.events.subscribe(\"open\", logger)\n\n        emailAlerts = new EmailAlertsListener(\n            \"admin@example.com\",\n            \"Someone has changed the file: %s\")\n        editor.events.subscribe(\"save\", emailAlerts)\n```\n\n##  Applicability\n- **Use the Observer pattern when changes to the state of one object may require changing other objects, and the actual set of objects is unknown beforehand or changes dynamically.**\n\t\n\tYou can often experience this problem when working with classes of the graphical user interface. For example, you created custom button classes, and you want to let the clients hook some custom code to your buttons so that it fires whenever a user presses a button.\n\t\n\tThe Observer pattern lets any object that implements the subscriber interface subscribe for event notifications in publisher objects. You can add the subscription mechanism to your buttons, letting the clients hook up their custom code via custom subscriber classes.\n- **Use the pattern when some objects in your app must observe others, but only for a limited time or in specific cases.**\n\t The subscription list is dynamic, so subscribers can join or leave the list whenever they need to.\n\n##  How to Implement\n\n1.  Look over your business logic and try to break it down into two parts: the core functionality, independent from other code, will act as the publisher; the rest will turn into a set of subscriber classes.\n2.  Declare the subscriber interface. At a bare minimum, it should declare a single `update` method.\n3.  Declare the publisher interface and describe a pair of methods for adding a subscriber object to and removing it from the list. Remember that publishers must work with subscribers only via the subscriber interface.\n4.  Decide where to put the actual subscription list and the implementation of subscription methods. Usually, this code looks the same for all types of publishers, so the obvious place to put it is in an abstract class derived directly from the publisher interface. Concrete publishers extend that class, inheriting the subscription behavior.\n    \n    However, if you’re applying the pattern to an existing class hierarchy, consider an approach based on composition: put the subscription logic into a separate object, and make all real publishers use it.\n5.  Create concrete publisher classes. Each time something important happens inside a publisher, it must notify all its subscribers.\n6.  Implement the update notification methods in concrete subscriber classes. Most subscribers would need some context data about the event. It can be passed as an argument of the notification method.\n    \n    But there’s another option. Upon receiving a notification, the subscriber can fetch any data directly from the notification. In this case, the publisher must pass itself via the update method. The less flexible option is to link a publisher to the subscriber permanently via the constructor.\n7.  The client must create all necessary subscribers and register them with proper publishers.\n\n##  Pros and Cons\n| Pros | Cons |\n| --- | --- |\n| _[[CleanCode/Open Closed Principle]]_. You can introduce new subscriber classes without having to change the publisher’s code (and vice versa if there’s a publisher interface). | Subscribers are notified in random order.|\n| You can establish relations between objects at runtime. ||\n\n##  Relations with Other Patterns\n\n-   [[CleanCode/Chain of Responsibility]], [[CleanCode/Command]], [[CleanCode/Mediator]] and [[CleanCode/Observer]] address various ways of connecting senders and receivers of requests:\n    \n    -   _Chain of Responsibility_ passes a request sequentially along a dynamic chain of potential receivers until one of them handles it.\n    -   _Command_ establishes unidirectional connections between senders and receivers.\n    -   _Mediator_ eliminates direct connections between senders and receivers, forcing them to communicate indirectly via a mediator object.\n    -   _Observer_ lets receivers dynamically subscribe to and unsubscribe from receiving requests.\n-   The difference between [[CleanCode/Mediator]] and [[CleanCode/Observer]] is often elusive. In most cases, you can implement either of these patterns; but sometimes you can apply both simultaneously. Let’s see how we can do that.\n    \n    The primary goal of _[[CleanCode/Mediator]]_ is to eliminate mutual dependencies among a set of system components. Instead, these components become dependent on a single mediator object. The goal of _[[CleanCode/Observer]]_ is to establish dynamic one-way connections between objects, where some objects act as subordinates of others.\n    \n    There’s a popular implementation of the _[[CleanCode/Mediator]]_ pattern that relies on _[[CleanCode/Observer]]_. The mediator object plays the role of publisher, and the components act as subscribers which subscribe to and unsubscribe from the mediator’s events. When _[[CleanCode/Mediator]]_ is implemented this way, it may look very similar to _[[CleanCode/Observer]]_.\n    \n    When you’re confused, remember that you can implement the [[CleanCode/Mediator]] pattern in other ways. For example, you can permanently link all the components to the same mediator object. This implementation won’t resemble _[[CleanCode/Observer]]_ but will still be an instance of the [[CleanCode/Mediator]] pattern.\n    \n    Now imagine a program where all components have become publishers, allowing dynamic connections between each other. There won’t be a centralized mediator object, only a distributed set of observers.\n","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Open-Closed-Principle":{"title":"Open Closed Principle","content":"#cleancode \n# Open Closed Principle (OCP)\n\u003e[!question] **Warum?**\n\u003eWeil das Risiko, durch neue Features ein bisher fehlerfreies System zu instabilisieren, so gering wie möglich gehalten werden sollte.\n\nDas *Open Closed Principle* ([OCP](https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle)) besagt, dass eine Klasse offen für Erweiterungen sein muss, jedoch geschlossen gegenüber Modifikationen. Es ist ein weiteres der [[CleanCode/SOLID]]-Prinzipien\n\nPrinzipien. Folgendes Codebeispiel soll verdeutlichen, wo das Problem liegt, wenn das Prinzip nicht befolgt wird:\n\n```csharp\npublic double Preis() {\n\n    const decimal StammkundenRabatt = 0.95m;\n\n    switch(kundenart) {\n\n        case Kundenart.Einmalkunde:\n\n            return menge * einzelpreis;\n\n        case Kundenart.Stammkunde:\n\n            return menge * einzelpreis * StammkundenRabatt;\n\n        default:\n\n            throw new ArgumentOutOfRangeException();\n\n    }\n    \n}\n```\n\nDas problematische an dieser Form der Implementierung ist, dass die Klasse modifiziert werden muss, wenn eine weitere Art der Preisberechnung erforderlich wird. Die Gefahr dabei ist, dass bei dieser Modifikation Fehler gemacht werden und die bisher schon vorhandenen Funktionen nicht mehr ordnungsgemäß funktionieren. Auch wenn automatisierte [[CleanCode/Unit Test|Unit Tests]] und [[CleanCode/Integration Tests|Integrationstests]] vorhanden sind besteht das Risiko, neue Bugs zu hinterlassen, weil man keine hundertprozentige Testabdeckung erreichen kann. Gesucht ist also generell ein Verfahren, welches die Klasse erweiterbar macht, ohne dass dazu die Klasse selbst modifiziert werden muss. Dies kann z.B. mit Hilfe des *[[CleanCode/Strategy|Strategy Patterns]]* erreicht werden:\n\n```csharp\npublic interface IPreisRechner {\n\n    double Preis(int menge, double einzelpreis);\n\n}\n\nprivate IPreisRechner preisRechner;\n\npublic double Preis() {\n    return preisRechner.Preis(menge, einzelpreis);\n} \n\npublic class Einmalkunde : IPreisRechner {\n\n    public double Preis(int menge, double einzelpreis) {\n        return menge * einzelpreis;\n    }\n\n}\npublic class Stammkunde : IPreisRechner {\n\n    const decimal StammkundenRabatt = 0.95m;\n    \n    public double Preis(int menge, double einzelpreis) {\n        return menge * einzelpreis * StammkundenRabatt;\n    }\n\n}\n```\n\nDie konkrete Berechnung des Preises wird über ein Interface in andere Klassen ausgelagert. Dadurch ist es möglich, jederzeit neue Implementierungen des Interfaces zu ergänzen. Damit ist die Klasse offen für Erweiterungen, gleichzeitig aber geschlossen gegenüber Modifikationen. Bestehender Code kann z.B. mit dem [[CleanCode/Refaktorisieren|Refactoring]] [Replace Conditional with Strategy](http://www.industriallogic.com/xp/refactoring/conditionalWithStrategy.html) so umgestaltet werden, dass das Open Closed Principle eingehalten wird.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Orangener-Grad":{"title":"Orangener Grad","content":"#cleancode \n# Orangener Grad\n## Prinzipien\n- [[CleanCode/Single Level of Abstraction]]\n- [[CleanCode/Single Responsibility Principle]]\n- [[CleanCode/Separation of Concerns]]\n- [[CleanCode/Source Code Conventions]]\n\n## Praktiken\n- [[CleanCode/Issue Tracking]]\n-  [[CleanCode/Automated Integrationtests]]\n- [[CleanCode/Read, Read, Read]]\n- [[CleanCode/Code Reviews]]","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Partizipation-in-Professional-Events":{"title":"Partizipation in Professional Events","content":"tags: #cleancode \n\n# Partizipation in Professional Events\n\n\u003e**Warum?**\n\u003eAm besten lernen wir von anderen und in Gemeinschaft.\n\nUm nicht nur „im eigenen Saft zu schmoren“, ist es wichtig, regelmäßig mit anderen Softwareentwicklern zu diskutieren und Erfahrungen auszutauschen. Um dabei auch über den Tellerrand zu blicken, sollte der Austausch mit Entwicklern außerhalb des eigenen Teams, der täglichen Routine, erfolgen. Gut geeignet sind User Groups, die sich in allen Regionen Deutschlands finden lassen.\n\nBei den regionalen User Groups steht der Erfahrungsaustausch im Vordergrund. Der ist wichtig. Je länger der aber innerhalb derselben Gruppe stattfindet, je besser man die Gesprächspartner kennt, desto mehr gleichen sich die Meinungen auch in einer User Group wieder an. Deshalb ist es wichtig, immer wieder auch über diesen Tellerrand hinaus zu schauen. Neues Gedankenfutter und Diskussionen mit ganz anderen Entwicklern bieten dafür überregionale Entwicklerkonferenzen.\n\nFür Gedankenaustausch und Inspiration sollte ein [[CleanCode/Clean Code Developer|CCD]] also drei Ebenen im Blick behalten: das eigene Entwicklerteam, die regionale User Group und die überregionale Konferenz. Jede Ebene hat dabei ihren eigenen Rhythmus: täglich, monatlich, jährlich.\n\nLinks:\n-   [.Net User Groups in Deutschlands](http://ineta-deutschland.de/user-groups/)\n-   [Python User Groups in Deutschland](https://wiki.python.org/moin/LocalUserGroups#User_Groups)\n-   [Einige deutsche Java User Groups](http://web.archive.org/web/20120305144023/http://www.ijug.eu:80/index.php?option=com_content\u0026view=article\u0026id=6\u0026Itemid=26)\n-   [IT-Termine in Karlsruhe](http://ka.stadtblog.de/it-termine)","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Principle-of-Least-Astonishment":{"title":"Principle of Least Astonishment","content":"#cleancode \n# Principle of Least Astonishment\n\n\u003e**Warum?**\n\u003eWenn sich eine Komponente überraschenderweise anders verhält als erwartet, wird ihre Anwendung unnötig kompliziert und fehleranfällig.\n\nSoftwareentwicklung ist in hohem Maße ein kreativer Prozess. In diesem Prozess ist es wichtig, in den Fluss einzutauchen (engl. Flow). Wenn man diesen Zustand erreicht hat, sprudelt der Code nur so heraus. Jegliche Störung des Flow führt zu Unterbrechungen und letztlich dazu, dass in der zur Verfügung stehenden Zeit nur wenig Code produziert wird bzw. die Qualität des Code nicht optimal ist. Denn nach jeder Unterbrechung muss der Entwickler erst wieder Fahrt aufnehmen und erneut in den Fluss zu kommen. Überraschungen stellen Störungen dar. Sie führen zu Unterbrechungen und Fehlern. Dazu ein Beispiel: Ist die Tastenbelegung in der Entwicklungsumgebung so gewählt, dass eine übliche Tastenkombination wie z.B. Ctrl-C eine völlig andere Bedeutung hat, behindert dies den Entwickler. Ein Entwickler wird sich jedes mal ärgern, wenn er die „falsche“ Tastenkombination verwendet. Dies behindert kreatives Arbeiten.\n\nSoftware sollte überraschungsarm implementiert sein. Wenn eine Abfragemethode namens _`GetValue()`_ nicht nur einen Wert liefert, sondern gleichzeitig den Zustand des Systems ändert, wird der Entwickler diese Methode im besten Fall meiden, da er mit bösen Überraschungen rechnet. Im ungünstigen Fall fällt ihm dieses merkwürdige Verhalten nicht rechtzeitig auf. (Abfragemethoden die den Zustand ändern, verstoßen gegen das _[[Command Query Separation]]_ Prinzip). Die [[Test-Driven-Development]] fördert überraschungsarme Schnittstellen, da die Schnittstelle aus der Sichtweise ihrer Verwendung entworfen und implementiert wird.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Prototype":{"title":"Prototype","content":"tags:  #cleancode/designpatterns \n\n# Prototype\n\n## Intent\n**Prototype** is a creational design pattern that lets you copy existing objects without making your code dependent on their classes.\n\n## Problem\nSay you have an object, and you want to create an exact copy of it. How would you do it? First, you have to create a new object of the same class. Then you have to go through all the fields of the original object and copy their values over to the new object.\n\nNice! But there’s a catch. Not all objects can be copied that way because some of the object’s fields may be private and not visible from outside of the object itself.\n\n![What can go wrong when copying things “from the outside\"?” width=](https://refactoring.guru/images/patterns/content/prototype/prototype-comic-1-en.png)\n\nCopying an object “from the outside” [isn’t](https://refactoring.guru/cargo-cult) always possible.\n\nThere’s one more problem with the direct approach. Since you have to know the object’s class to create a duplicate, your code becomes dependent on that class. If the extra dependency doesn’t scare you, there’s another catch. Sometimes you only know the interface that the object follows, but not its concrete class, when, for example, a parameter in a method accepts any objects that follow some interface.\n\n## Solution\nThe Prototype pattern delegates the cloning process to the actual objects that are being cloned. The pattern declares a common interface for all objects that support cloning. This interface lets you clone an object without coupling your code to the class of that object. Usually, such an interface contains just a single `clone` method.\n\nThe implementation of the `clone` method is very similar in all classes. The method creates an object of the current class and carries over all of the field values of the old object into the new one. You can even copy private fields because most programming languages let objects access private fields of other objects that belong to the same class.\n\nAn object that supports cloning is called a _prototype_. When your objects have dozens of fields and hundreds of possible configurations, cloning them might serve as an alternative to subclassing.\n\n![Pre-built prototypes](https://refactoring.guru/images/patterns/content/prototype/prototype-comic-2-en.png)\n\nPre-built prototypes can be an alternative to subclassing.\n\nHere’s how it works: you create a set of objects, configured in various ways. When you need an object like the one you’ve configured, you just clone a prototype instead of constructing a new object from scratch.\n\n## Real-World Analogy\nIn real life, prototypes are used for performing various tests before starting mass production of a product. However, in this case, prototypes don’t participate in any actual production, playing a passive role instead.\n\n![The cell division](https://refactoring.guru/images/patterns/content/prototype/prototype-comic-3-en.png)\n\nThe division of a cell.\n\nSince industrial prototypes don’t really copy themselves, a much closer analogy to the pattern is the process of mitotic cell division (biology, remember?). After mitotic division, a pair of identical cells is formed. The original cell acts as a prototype and takes an active role in creating the copy.\n\n## Structure\n#### Basic implementation\n\n![The structure of the Prototype design pattern](https://refactoring.guru/images/patterns/diagrams/prototype/structure.png)\n\n1.  The **Prototype** interface declares the cloning methods. In most cases, it’s a single `clone` method.\n2.  The **Concrete Prototype** class implements the cloning method. In addition to copying the original object’s data to the clone, this method may also handle some edge cases of the cloning process related to cloning linked objects, untangling recursive dependencies, etc.\n3.  The **Client** can produce a copy of any object that follows the prototype interface.\n\n#### Prototype registry implementation\n\n![The prototype registry](https://refactoring.guru/images/patterns/diagrams/prototype/structure-prototype-cache.png)\n\n1.  The **Prototype Registry** provides an easy way to access frequently-used prototypes. It stores a set of pre-built objects that are ready to be copied. The simplest prototype registry is a `name → prototype` hash map. However, if you need better search criteria than a simple name, you can build a much more robust version of the registry.\n\n## Pseudocode\nIn this example, the **Prototype** pattern lets you produce exact copies of geometric objects, without coupling the code to their classes.\n\n![The structure of the Prototype pattern example](https://refactoring.guru/images/patterns/diagrams/prototype/example.png)\n\nCloning a set of objects that belong to a class hierarchy.\n\nAll shape classes follow the same interface, which provides a cloning method. A subclass may call the parent’s cloning method before copying its own field values to the resulting object.\n\n```kotlin\n// Base prototype.\nabstract class Shape is\n    field X: int\n    field Y: int\n    field color: string\n\n    // A regular constructor.\n    constructor Shape() is\n        // ...\n\n    // The prototype constructor. A fresh object is initialized\n    // with values from the existing object.\n    constructor Shape(source: Shape) is\n        this()\n        this.X = source.X\n        this.Y = source.Y\n        this.color = source.color\n\n    // The clone operation returns one of the Shape subclasses.\n    abstract method clone():Shape\n\n// Concrete prototype. The cloning method creates a new object\n// in one go by calling the constructor of the current class and\n// passing the current object as the constructor's argument.\n// Performing all the actual copying in the constructor helps to\n// keep the result consistent: the constructor will not return a\n// result until the new object is fully built; thus, no object\n// can have a reference to a partially-built clone.\nclass Rectangle extends Shape is\n    field width: int\n    field height: int\n\n    constructor Rectangle(source: Rectangle) is\n        // A parent constructor call is needed to copy private\n        // fields defined in the parent class.\n        super(source)\n        this.width = source.width\n        this.height = source.height\n\n    method clone():Shape is\n        return new Rectangle(this)\n\nclass Circle extends Shape is\n    field radius: int\n\n    constructor Circle(source: Circle) is\n        super(source)\n        this.radius = source.radius\n\n    method clone():Shape is\n        return new Circle(this)\n\n// Somewhere in the client code.\nclass Application is\n    field shapes: array of Shape\n\n    constructor Application() is\n        Circle circle = new Circle()\n        circle.X = 10\n        circle.Y = 10\n        circle.radius = 20\n        shapes.add(circle)\n\n        Circle anotherCircle = circle.clone()\n        shapes.add(anotherCircle)\n        // The `anotherCircle` variable contains an exact copy\n        // of the `circle` object.\n\n        Rectangle rectangle = new Rectangle()\n        rectangle.width = 10\n        rectangle.height = 20\n        shapes.add(rectangle)\n\n    method businessLogic() is\n        // Prototype rocks because it lets you produce a copy of\n        // an object without knowing anything about its type.\n        Array shapesCopy = new Array of Shapes.\n\n        // For instance, we don't know the exact elements in the\n        // shapes array. All we know is that they are all\n        // shapes. But thanks to polymorphism, when we call the\n        // `clone` method on a shape the program checks its real\n        // class and runs the appropriate clone method defined\n        // in that class. That's why we get proper clones\n        // instead of a set of simple Shape objects.\n        foreach (s in shapes) do\n            shapesCopy.add(s.clone())\n\n        // The `shapesCopy` array contains exact copies of the\n        // `shape` array's children.\n```\n\n## Applicability\n- **Use the Prototype pattern when your code shouldn’t depend on the concrete classes of objects that you need to copy.**\n\tThis happens a lot when your code works with objects passed to you from 3rd-party code via some interface. The concrete classes of these objects are unknown, and you couldn’t depend on them even if you wanted to.\n\n\tThe Prototype pattern provides the client code with a general interface for working with all objects that support cloning. This interface makes the client code independent from the concrete classes of objects that it clones.\n\n- **Use the pattern when you want to reduce the number of subclasses that only differ in the way they initialize their respective objects.**\n\t Suppose you have a complex class that requires a laborious configuration before it can be used. There are several common ways to configure this class, and this code is scattered through your app. To reduce the duplication, you create several subclasses and put every common configuration code into their constructors. You solved the duplication problem, but now you have lots of dummy subclasses.\n\n\tThe Prototype pattern lets you use a set of pre-built objects configured in various ways as prototypes. Instead of instantiating a subclass that matches some configuration, the client can simply look for an appropriate prototype and clone it.\n\n## How to Implement\n1.  Create the prototype interface and declare the `clone` method in it. Or just add the method to all classes of an existing class hierarchy, if you have one.\n2.  A prototype class must define the alternative constructor that accepts an object of that class as an argument. The constructor must copy the values of all fields defined in the class from the passed object into the newly created instance. If you’re changing a subclass, you must call the parent constructor to let the superclass handle the cloning of its private fields.\n    \n    If your programming language doesn’t support method overloading, you won’t be able to create a separate “prototype” constructor. Thus, copying the object’s data into the newly created clone will have to be performed within the `clone` method. Still, having this code in a regular constructor is safer because the resulting object is returned fully configured right after you call the `new` operator.\n3.  The cloning method usually consists of just one line: running a `new` operator with the prototypical version of the constructor. Note, that every class must explicitly override the cloning method and use its own class name along with the `new` operator. Otherwise, the cloning method may produce an object of a parent class.\n4.  Optionally, create a centralized prototype registry to store a catalog of frequently used prototypes.\n    \n    You can implement the registry as a new factory class or put it in the base prototype class with a static method for fetching the prototype. This method should search for a prototype based on search criteria that the client code passes to the method. The criteria might either be a simple string tag or a complex set of search parameters. After the appropriate prototype is found, the registry should clone it and return the copy to the client.\n    \n    Finally, replace the direct calls to the subclasses’ constructors with calls to the factory method of the prototype registry.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can clone objects without coupling to their concrete classes. | Cloning complex objects that have circular references might be very tricky. |\n| You can get rid of repeated initialization code in favor of cloning pre-built prototypes. ||\n| You can produce complex objects more conveniently. ||\n| You get an alternative to inheritance when dealing with configuration presets for complex objects.||\n\n## Relations with Other Patterns\n- Many designs start by using [[CleanCode/Factory]] Method (less complicated and more customizable via subclasses) and evolve toward [[CleanCode/Abstract Factory]], Prototype, or [[CleanCode/Builder]] (more flexible, but more complicated).\n- Abstract [[CleanCode/Factory]] classes are often based on a set of [[CleanCode/Factory]] Methods, but you can also use Prototype to compose the methods on these classes.\n- Prototype can help when you need to save copies of Commands into history.\n- Designs that make heavy use of Composite and Decorator can often benefit from using Prototype. Applying the pattern lets you clone complex structures instead of re-constructing them from scratch.\n- Prototype isn’t based on inheritance, so it doesn’t have its drawbacks. On the other hand, Prototype requires a complicated initialization of the cloned object. [[CleanCode/Factory]] Method is based on inheritance but doesn’t require an initialization step.\n- Sometimes Prototype can be a simpler alternative to Memento. This works if the object, the state of which you want to store in the history, is fairly straightforward and doesn’t have links to external resources, or the links are easy to re-establish.\n- [[CleanCode/Abstract Factory]], [[CleanCode/Builder|Builders]] and [[CleanCode/Prototype]] can all be implemented as [[CleanCode/Singleton]].","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Proxy":{"title":"Proxy","content":"tags:  #cleancode/designpatterns \n\n# Proxy\n\n## Intent\n**Proxy** is a structural design pattern that lets you provide a substitute or placeholder for another object. A proxy controls access to the original object, allowing you to perform something either before or after the request gets through to the original object.\n## Problem\nWhy would you want to control access to an object? Here is an example: you have a massive object that consumes a vast amount of system resources. You need it from time to time, but not always.\n\n![Problem solved by Proxy pattern](https://refactoring.guru/images/patterns/diagrams/proxy/problem-en.png)\n\nDatabase queries can be really slow.\n\nYou could implement lazy initialization: create this object only when it’s actually needed. All of the object’s clients would need to execute some deferred initialization code. Unfortunately, this would probably cause a lot of code duplication.\n\nIn an ideal world, we’d want to put this code directly into our object’s class, but that isn’t always possible. For instance, the class may be part of a closed 3rd-party library.\n\n##  Solution\n\nThe Proxy pattern suggests that you create a new proxy class with the same interface as an original service object. Then you update your app so that it passes the proxy object to all of the original object’s clients. Upon receiving a request from a client, the proxy creates a real service object and delegates all the work to it.\n\n![Solution with the Proxy pattern](https://refactoring.guru/images/patterns/diagrams/proxy/solution-en.png)\n\nThe proxy disguises itself as a database object. It can handle lazy initialization and result caching without the client or the real database object even knowing.\n\nBut what’s the benefit? If you need to execute something either before or after the primary logic of the class, the proxy lets you do this without changing that class. Since the proxy implements the same interface as the original class, it can be passed to any client that expects a real service object.\n\n##  Real-World Analogy\n\n![A credit card is a proxy for a bundle of cash](https://refactoring.guru/images/patterns/diagrams/proxy/live-example.png)\n\nCredit cards can be used for payments just the same as cash.\n\nA credit card is a proxy for a bank account, which is a proxy for a bundle of cash. Both implement the same interface: they can be used for making a payment. A consumer feels great because there’s no need to carry loads of cash around. A shop owner is also happy since the income from a transaction gets added electronically to the shop’s bank account without the risk of losing the deposit or getting robbed on the way to the bank.\n\n##  Structure\n\n![Structure of the Proxy design pattern](https://refactoring.guru/images/patterns/diagrams/proxy/structure.png)\n\n1.  The **Service Interface** declares the interface of the Service. The proxy must follow this interface to be able to disguise itself as a service object.\n    \n2.  The **Service** is a class that provides some useful business logic.\n    \n3.  The **Proxy** class has a reference field that points to a service object. After the proxy finishes its processing (e.g., lazy initialization, logging, access control, caching, etc.), it passes the request to the service object.\n    \n    Usually, proxies manage the full lifecycle of their service objects.\n    \n4.  The **Client** should work with both services and proxies via the same interface. This way you can pass a proxy into any code that expects a service object.\n    \n\n##  Pseudocode\n\nThis example illustrates how the **Proxy** pattern can help to introduce lazy initialization and caching to a 3rd-party YouTube integration library.\n\n![Structure of the Proxy pattern example](https://refactoring.guru/images/patterns/diagrams/proxy/example.png)\n\nCaching results of a service with a proxy.\n\nThe library provides us with the video downloading class. However, it’s very inefficient. If the client application requests the same video multiple times, the library just downloads it over and over, instead of caching and reusing the first downloaded file.\n\nThe proxy class implements the same interface as the original downloader and delegates it all the work. However, it keeps track of the downloaded files and returns the cached result when the app requests the same video multiple times.\n```kotlin\n// The interface of a remote service.\ninterface ThirdPartyYouTubeLib is\n    method listVideos()\n    method getVideoInfo(id)\n    method downloadVideo(id)\n\n// The concrete implementation of a service connector. Methods\n// of this class can request information from YouTube. The speed\n// of the request depends on a user's internet connection as\n// well as YouTube's. The application will slow down if a lot of\n// requests are fired at the same time, even if they all request\n// the same information.\nclass ThirdPartyYouTubeClass implements ThirdPartyYouTubeLib is\n    method listVideos() is\n        // Send an API request to YouTube.\n\n    method getVideoInfo(id) is\n        // Get metadata about some video.\n\n    method downloadVideo(id) is\n        // Download a video file from YouTube.\n\n// To save some bandwidth, we can cache request results and keep\n// them for some time. But it may be impossible to put such code\n// directly into the service class. For example, it could have\n// been provided as part of a third party library and/or defined\n// as `final`. That's why we put the caching code into a new\n// proxy class which implements the same interface as the\n// service class. It delegates to the service object only when\n// the real requests have to be sent.\nclass CachedYouTubeClass implements ThirdPartyYouTubeLib is\n    private field service: ThirdPartyYouTubeLib\n    private field listCache, videoCache\n    field needReset\n\n    constructor CachedYouTubeClass(service: ThirdPartyYouTubeLib) is\n        this.service = service\n\n    method listVideos() is\n        if (listCache == null || needReset)\n            listCache = service.listVideos()\n        return listCache\n\n    method getVideoInfo(id) is\n        if (videoCache == null || needReset)\n            videoCache = service.getVideoInfo(id)\n        return videoCache\n\n    method downloadVideo(id) is\n        if (!downloadExists(id) || needReset)\n            service.downloadVideo(id)\n\n// The GUI class, which used to work directly with a service\n// object, stays unchanged as long as it works with the service\n// object through an interface. We can safely pass a proxy\n// object instead of a real service object since they both\n// implement the same interface.\nclass YouTubeManager is\n    protected field service: ThirdPartyYouTubeLib\n\n    constructor YouTubeManager(service: ThirdPartyYouTubeLib) is\n        this.service = service\n\n    method renderVideoPage(id) is\n        info = service.getVideoInfo(id)\n        // Render the video page.\n\n    method renderListPanel() is\n        list = service.listVideos()\n        // Render the list of video thumbnails.\n\n    method reactOnUserInput() is\n        renderVideoPage()\n        renderListPanel()\n\n// The application can configure proxies on the fly.\nclass Application is\n    method init() is\n        aYouTubeService = new ThirdPartyYouTubeClass()\n        aYouTubeProxy = new CachedYouTubeClass(aYouTubeService)\n        manager = new YouTubeManager(aYouTubeProxy)\n        manager.reactOnUserInput()     \n```\n## Applicability\nThere are dozens of ways to utilize the Proxy pattern. Let’s go over the most popular uses.\n\n- **Lazy initialization (virtual proxy). This is when you have a heavyweight service object that wastes system resources by being always up, even though you only need it from time to time.**\n\tInstead of creating the object when the app launches, you can delay the object’s initialization to a time when it’s really needed.\n- **Access control (protection proxy). This is when you want only specific clients to be able to use the service object; for instance, when your objects are crucial parts of an operating system and clients are various launched applications (including malicious ones).**\n\tThe proxy can pass the request to the service object only if the client’s credentials match some criteria.\n- **Local execution of a remote service (remote proxy). This is when the service object is located on a remote server.**\n\t In this case, the proxy passes the client request over the network, handling all of the nasty details of working with the network.\n- **Logging requests (logging proxy). This is when you want to keep a history of requests to the service object.**\n\tThe proxy can log each request before passing it to the service.\n- **Caching request results (caching proxy). This is when you need to cache results of client requests and manage the life cycle of this cache, especially if results are quite large.**\n\tThe proxy can implement caching for recurring requests that always yield the same results. The proxy may use the parameters of requests as the cache keys.\n- **Smart reference. This is when you need to be able to dismiss a heavyweight object once there are no clients that use it.**\n\tThe proxy can keep track of clients that obtained a reference to the service object or its results. From time to time, the proxy may go over the clients and check whether they are still active. If the client list gets empty, the proxy might dismiss the service object and free the underlying system resources.\n\t\n\tThe proxy can also track whether the client had modified the service object. Then the unchanged objects may be reused by other clients.\n## How to Implement\n1.  If there’s no pre-existing service interface, create one to make proxy and service objects interchangeable. Extracting the interface from the service class isn’t always possible, because you’d need to change all of the service’s clients to use that interface. Plan B is to make the proxy a subclass of the service class, and this way it’ll inherit the interface of the service.\n    \n2.  Create the proxy class. It should have a field for storing a reference to the service. Usually, proxies create and manage the whole life cycle of their services. On rare occasions, a service is passed to the proxy via a constructor by the client.\n    \n3.  Implement the proxy methods according to their purposes. In most cases, after doing some work, the proxy should delegate the work to the service object.\n    \n4.  Consider introducing a creation method that decides whether the client gets a proxy or a real service. This can be a simple static method in the proxy class or a full-blown factory method.\n    \n5.  Consider implementing lazy initialization for the service object.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can control the service object without clients knowing about it. | The code may become more complicated since you need to introduce a lot of new classes. |\n| You can manage the lifecycle of the service object when clients don’t care about it. | The response from the service might get delayed. |\n| The proxy works even if the service object isn’t ready or is not available. ||\n | [[CleanCode/Open Closed Principle]]. You can introduce new proxies without changing the service or clients. ||\n \n## Relations with Other Patterns\n- [[CleanCode/Adapter]] provides a different interface to the wrapped object, Proxy provides it with the same interface, and [[CleanCode/Decorator]] provides it with an enhanced interface.\n- [[CleanCode/Facade]] is similar to Proxy in that both buffer a complex entity and initialize it on its own. Unlike [[CleanCode/Facade]], Proxy has the same interface as its service object, which makes them interchangeable.\n- [[CleanCode/Decorator]] and Proxy have similar structures, but very different intents. Both patterns are built on the composition principle, where one object is supposed to delegate some of the work to another. The difference is that a Proxy usually manages the life cycle of its service object on its own, whereas the composition of Decorators is always controlled by the client.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Read-Read-Read":{"title":"Read, Read, Read","content":"tags: #cleancode \n\n# Read, Read, Read\n\n\u003e**Warum?**\n\u003eLesen bildet!\n\nLesen bildet – wir sind jedenfalls fest davon überzeugt, dass dies auch für Software-Entwickler gilt. Die Softwaretechnik entwickelt sich nach wie vor weiter. Neben den großen Entwicklungsschritten wie [[Prozedurale Programmierung]], [[OOP|Objektorientierte Programmierung]], [[Funktionale Programmierung]], [[Aspektorientierte Programmierung]], etc. gibt es ständig Entwicklungen im Kleinen mit denen sich ein professioneller Software-Entwickler auseinandersetzen muss. Da wären zum einen Techniken wie etwa _[[Dependency Injection]]_ oder _[[Object Relational Mapper]]_. Aber auch innerhalb dieser Techniken gibt es Entwicklungsschritte wie etwa _[[Domain Specific Languages]] (DSLs)_ zur Konfiguration vs. XML basierende Konfiguration. Neben den technischen Aspekten der Softwareentwicklung wird auch der Prozess ständig weiterentwickelt. So hat sich die Erkenntnis durchgesetzt, dass Wasserfallmodelle nicht funktionieren, verschiedene agile Prozesse werden entwickelt. All dies muss der [[CleanCode/Clean Code Developer]] im Blick haben.\n\nWir schlagen daher vor, pro Jahr wenigstens 6 Fachbücher zu lesen. Ferner sollten Periodika regelmäßig gelesen werden und darunter verstehen wir neben Fachzeitschriften auch Blogs.\n\nAnregungen finden Sie in der [Literaturliste](https://clean-code-developer.de/weitere-infos/literatur/).","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Refaktorisieren":{"title":"Refaktorisieren","content":"tags: #cleancode/refactoring\n\n# Refaktorisieren","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Robert-C.-Martin":{"title":"Robert C. Martin","content":"#cleancode ","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Root-Cause-Analysis":{"title":"Root Cause Analysis","content":"#cleancode \n# Root Cause Anaysis\n\n\u003e**Warum?**\n\u003eSymptome behandeln bringt vielleicht schnell eine Linderung – langfristig kostet es aber mehr Aufwand. Wer stattdessen unter die Oberfläche von Problemen schaut, arbeitet am Ende effizienter.\n\nRegel vom ersten Tag als [[CleanCode/Clean Code Developer]] an sollte sein, bei Problemen immer intensiv nach der wahren Wurzel des Übels zu suchen. [[CleanCode/Clean Code]] Developer geben sich nicht mit einer Symptomkur zufrieden. Beispiel: Die Sortierung von Daten im Speicher ist zu langsam. Eine oberflächliche Kur würde jetzt daran gehen, einzelne Anweisungen oder Anweisungsblöcke zu beschleunigen. Vielleicht wird der Einsatz von unsafe Code probiert, vielleicht eine Parallelisierung. Eine nähere Problemanalyse jedoch hätte ergeben, dass ein suboptimaler Algorithmus die Wurzel des Übels ist. Schwer verständliche Optimierungen auf niedriger Abstraktionsebene können also vermieden werden. Ein besserer Algorithmus ist die saubere Lösung.\n\nWurzelproblemanalyse ist also ein Dienst an der Verständlichkeit und am Aufwand. Denn bei Kenntnis des Wurzelproblems ist die Bereinigung meist weniger aufwändig als eine Symptomkur. Stößt der [[CleanCode/Clean Code]] Developer auf ein Problem, so hält er also als erstes inne, um sich eine Chance zu geben, hinter die Symptome zu schauen.\n\nDie Root Cause Analysis ist auch unter dem Begriff Five Why’s bekannt. Dieser Begriff stammt aus der Terminologie des Toyota Produktions Systems[[Toyota Produktions Systems]] (TPS). Die Grundidee: frage mindestens fünf mal „Warum?“.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Roter-Grad":{"title":"Roter Grad","content":"#cleancode\n# Roter Grad\n## Prinzipien\n- [[CleanCode/DRY]]\n- [[CleanCode/KISS]]\n- [[CleanCode/Beware of Premature Optimization]]\n- [[CleanCode/Favour Composition over Inheritance]]\n- [[CleanCode/Integration Operation Segregation Principle (IOSP)]]\n\n## Praktiken\n- [[CleanCode/Boy Scout Rule]]\n- [[CleanCode/Root Cause Analysis]]\n- [[CleanCode/Version Control System]]\n- [[CleanCode/Simple Refactorings]]\n- [[CleanCode/Daily Reflection]]","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/SOLID":{"title":"SOLID","content":"#cleancode \n# SOLID\nThe SOLID Principles are a part of the [[CleanCode/Clean Code]] Principles. The letters stand for:\n- [[CleanCode/Single Responsibility Principle]]\n- [[CleanCode/Open Closed Principle]]\n- [[CleanCode/Liskov Substitution Principle]]\n- [[CleanCode/Interface Segragation Principle]]\n- [[CleanCode/Dependency Inversion Principle]]\n","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Separation-of-Concerns":{"title":"Separation of Concerns","content":"tags:  #cleancode \n\n# Separation of Concerns (SoC)\n\n\u003e**Warum?**\n\u003eWenn eine Codeeinheit keine klare Aufgabe hat, ist es schwer sie zu verstehen, sie anzuwenden und sie ggf. zu korrigieren oder zu erweitern.\n\nÜbersetzt mit Trennung der Belange bedeutet dieses Prinzip, dass man nicht mehrere Belange in einer Klasse zusammenfassen soll. Was sind Belange? Belange sind „komplett verschiedene“ Zwecke. Man sagt auch, Belange seien orthogonal zu einander und vor allem orthogonal zur Hauptfunktionalität einer Funktionseinheit. Beispiele für typische Belange sind: Tracing, Logging, Transaktionalität, Caching. Diese Belange sollen nach dem Prinzip der Separation of Concerns in spezialisierte Funktionseinheiten ausgelagert werden.\n\nDas Separation of Concerns Prinzip hängt eng mit dem Single Responsibility Prinzip zusammen. Dabei sind Concerns eine Übermenge von Responsibilities. Jede Responsibility besteht im Idealfall aus genau einem Concern, nämlich ihrer Kernfunktionalität. Oft sind in einer Responsibility jedoch mehrere Concerns vermischt. Da sich dies technisch meist nicht ganz vermeiden läßt, besagt das Prinzip nicht etwa, dass eine Responsibility nur aus einem Concern bestehen darf, sondern dass die Concerns getrennt sein sollten. Innerhalb einer Methode sollte beispielsweise klar erkennbar sein, dass es mehrere Concerns gibt. Ferner sollten die Concerns nicht irgendwie über die Methode verstreut sein, sondern so gruppiert, dass klar ist, was zu einem Concern gehört.\n\nIm [[Domain Driven Design]] versucht man beispielsweise die [[Business Domain]] von der Infrastruktur strikt zu trennen. So darf dort eine Klasse aus der Business Domain keinerlei Infrastruktur, etwa für Datenbankzugriffe, enthalten, sondern soll ausschließlich die Geschäftslogik abbilden. Persistenz ist ein „Concern“ der nichts mit der Business Logik zu tun hat. Separation of Concerns führt zu loser Kopplung und hoher Kohäsion. Die einzelnen Komponenten sind jeweils auf eine Aufgabe, einen Concern, fokussiert und dadurch leicht verständlich. Alle Teile aus denen die Komponente besteht, sind auf diese eine Aufgabe ausgerichtet, dadurch hängen die Teile eng zusammen (hohe [[Kohäsion]]). Separation of Concerns führt darüber hinaus auch zu gut testbaren Komponenten. Denn wenn der Zweck einer Codeeinheit fokussiert ist, muss weniger breit getestet werden. In Bezug auf die zu testende Codeeinheit sind weniger Testparameterkombinationen zu prüfen. Soll die Trennung der Belange konsequent betrieben werden, muss die Objektorientierung um das Konzept der [[Aspektorientierten Programmierung]] (AOP) erweitert werden. Dadurch wird es möglich, Aspekte wie etwa [[Transaktionalität]], [[Tracing]] oder [[Caching]] vollständig aus einer Methode herauszuziehen.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Share-Experience":{"title":"Share Experience","content":"tags: #cleancode \n\n# Share Experience\n\u003e**Warum?**\n\u003eWer sein Wissen weitergibt, hilft nicht nur anderen, sondern auch sich selbst.\n\nZu professioneller Arbeit gehört selbstverständlich ein ständig akuelles Wissen. Das bedeutet natürlich nicht, dass irgendjemand alles zum Thema Softwareentwicklung und sei es auch nur auf der .NET-Plattform wissen kann und soll. Aktuelles Wissen bezieht sich auf die eigenen Spezialgebiete – welche das auch immer sein mögen. Bestandteil anderer Grade ist deshalb die Praktik der regelmäßigen Informationsaufnahme über verschiedene Medien.\n\nAus mehreren Gründen sollte solche Informationssammlung jedoch nur eine von zwei Seiten der Medaille „Lernen“ sein. Die andere ist die Informationsweitergabe, die Wissensvermittlung. Zur wahren Professionalität gehört unserer Ansicht nach nicht nur „Forschung“, sonder auch „Lehre“. Denn erst mit der „Lehre“ findet wahre Reflektion und Durchdringung eines Gegenstandes statt.\n\nEtwas Gehörtes/Gelesenes anwenden, ist eine Sache. Natürlich bemerkt man dabei auch Verständnislücken. Die „Erforschung“ eines Gegenstandes ist dabei jedoch durch den Einsatzzweck natürlich begrenzt. Wer nur soweit forscht, wie er eine Technologie/Konzept gerade braucht, der taucht nicht unbedingt tief ein.\n\nGanz anders ist das hingegen, wenn das Lernen mit dem Vorzeichen des Weitersagens stattfindet. Wer nicht nur für sich, sondern auch immer für andere lernt, der lernt tiefer. Das wird klar, wenn man versucht, (angeblich) Gelerntes anderen zu vermitteln. Wenn man das nicht beim Lernen im Blick hat, tauchen schnell Fragen auf, die man sich selbst nie gestellt hat. Andere haben eben immer ganz andere Blickwinkel.\n\nDeshalb meinen wir, dass wirklich solide nur lernt, wer sich auch immer wieder dem Lehren, dem Weitersagen, der Wissensvermittlung aussetzt. Nur wer Gelerntes nicht nur anwendet, sondern es mit eigenen Worten für ein Publikum formuliert, bemerkt in dem Prozess, wie tief sein Wissen wirklich ist. Denn wenn sich die Fragezeichen bei den „Schülern“ häufen, dann stimmt irgendetwas noch nicht.\n\nEin reales Publikum ist dafür natürlich am besten. Jeder [[CleanCode/Clean Code Developer|CCD]] sollte also möglichst regelmäßig Gelegenheiten suchen, um sein Wissen mündlich weiterzugeben (z.B. bei Veranstaltungen im Kollegenkreis oder User Group Treffen). Unmittelbares Feedback ist ihm dabei gewiss. Alternativ bzw. in Ergänzung taugen aber auch schriftliche Kompetenzäußerungen. Ein Blog ist in 5 Minuten aufgesetzt und Fachzeitschriften suchen ständig nach neuen Autoren. Feedback kommt hier zwar nicht so direkt zurück, dennoch ist die textuelle Ausformulierung von Kenntnissen eine sehr gute Übung.\n\n[[CleanCode/Clean Code Developer]] ab dem grünen Grad lernen daher nicht nur „passiv“ durch Informationsaufnahme, sondern „aktiv“ durch Weitergabe ihres Wissens mittels Präsentationen oder Texten. Das mag ungewohnt sein – ungewohnt ist aber auch womöglich [[CleanCode/Continuous Integration]]. In jedem Fall ist aktive Wissensvermittlung eine gute Übung zur Vertiefung der eigenen Kompetenzen frei nach dem Motto: „Tue Gutes und sprich darüber“ ;-)\n\nDass das „Lehren“ auch noch einen Nutzen für die Zuhörer/Leser hat, ist selbstverständlich. Vorteile für andere sind aber nicht so motivierend wie eigene Vorteile. Deshalb betonen wir hier vor allem den Nutzen der Wissensvermittlung für den [[CleanCode/Clean Code Developer]].","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Simple-Refactorings":{"title":"Simple Refactorings","content":"#cleancode \n# Simple Refactorings\n\n\u003e**Warum?**\n\u003eCode verbessern ist leichter, wenn man typische Verbesserungshandgriffe kennt. Ihre Anwendungsszenarien machen sensibel für Schwachpunkte im eigenen Code. Als anerkannte Muster stärken sie den Mut, sie anzuwenden.\n\n\nUm Code immer ein wenig besser zu hinterlassen, als man ihn vorgefunden hat, sind mehr oder weniger große Eingriffe nötig. Die kann ein Clean Code Developer dank des Versionskontrollsystems angstfrei vornehmen. Doch wie macht er sich die Arbeit möglichst einfach?\n\nDas Schlüsselwort lautet „Refaktorisierung“. [[Martin Fowler]] hat das [Refaktorisieren/Refactoring](http://www.amazon.de/Refactoring-Studentenausgabe-vorhandener-verbessern-Programmers/dp/3827322782) in seinem gleichnamigen Buch als grundlegende Technik zur Erhöhung der Codequalität beschrieben. Er definiert darin eine Anzahl von Codeveränderungsmustern, um „code smells“, d.h. suboptimale Strukturen oder allgemeiner Missachtungen von Prinzipien, zu bereinigen.\n\nFür den roten Grad ist darin vor allem die Refaktorisierung [Methode extrahieren](http://martinfowler.com/refactoring/catalog/extractMethod.html) relevant, um dem DRY-Prinzip zu genügen. Die wenden Clean Code Developer an, um mehrfach vorkommenden Code in eine Methode zu extrahieren, die statt seiner an den Wiederholungsorten aufgerufen wird.\n\nAls zweite Refaktorisierung sollte bei der Arbeit am roten Grad das [Umbenennen](http://martinfowler.com/refactoring/catalog/renameMethod.html) wo nötig eingesetzt werden. Sie passt zur Pfadfinderregel, denn eine oft anzutreffende „Unsauberkeit“ im Quellcode sind kryptische Namen.\n\nRefaktorisierungen können von Hand angewandt werden, doch es gibt auch Werkzeugunterstützung. Moderne IDEs wie Visual Studio bieten einige Refactoringmuster, weitere Tools listet unsere [Werkzeugliste](https://clean-code-developer.de/weitere-infos/werkzeuge/).\n\n„Refactoring“ wie „Clean Code“ gehören zur [Pflichtlektüre](https://clean-code-developer.de/weitere-infos/literatur/) jedes Clean Code Developers ab dem roten Grad.\n\nFür weitere Informationen siehe auch unter [refactoring-legacy-code.net](http://refactoring-legacy-code.net/category/einfache-refactorings/).","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Single-Level-of-Abstraction":{"title":"Single Level of Abstraction","content":"tags:  #cleancode \n\n# Single Level of Abstraction (SLA)\n\n\u003e**Warum?**\n\u003eDie Einhaltung eines Abstraktionsniveaus fördert die Lesbarkeit\n\nEine Codezeile kann auf verschiedenen Abstraktionsniveaus liegen. Die Zuweisung eines Wertes an eine Variable liegt auf einem niedrigeren Abstraktionsniveau als etwa ein Methodenaufruf. Schließlich kann sich hinter dem Methodenaufruf weit mehr Logik befinden als in der Zuweisung einer Variable. Selbst Methodenaufrufe können auf unterschiedlichen Abstraktionsniveaus stehen. Der Aufruf einer Methode aus einem Framework steht auf einem anderen Niveau, als der Aufruf einer Methode der Anwendung.\n\nDamit Code gut zu lesen und zu verstehen ist, sollte in einer Methode nur ein Abstraktionsniveau verwendet werden. Andernfalls fällt es dem Leser schwer, Essentielles von Details zu unterscheiden. Wenn Bitpfriemeleien erforderlich sind, sollten diese nicht mit dem Aufruf von Methoden vermischt werden.\n\nHilfreich als Analogie ist der Blick auf Artikel in der Tageszeitung: dort steht zu oberst das Allerwichtigste, die Überschrift. Aus ihr sollte in groben Zügen hervorgehen, wovon der Artikel handelt. Im ersten Satz des Artikels wird dies auf einem hohen Abstraktionsniveau beschrieben. Je weiter man im Artikel fortschreitet, desto mehr Details tauchen auf. So können wir auch unseren Code strukturieren. Der Name der Klasse ist die Überschrift. Dann folgen die öffentlichen Methoden auf hohem Abstraktionsniveau. Diese rufen möglicherweise Methoden auf niedrigerem Niveau auf, bis zuletzt die „Bitpfriemelmethoden“ übrig bleiben. Durch diese Einteilung kann ich als Leser der Klasse entscheiden, welchen Detaillierungsgrad ich mir ansehen möchte. Interessiert mich nur grob, wie die Klasse arbeitet, brauche ich mir nur die öffentlichen Methoden anzuschauen. In ihnen wird die Funktionalität auf einem hohen Abstraktionsniveau gelöst. Interessieren mich weitere Details, kann ich tiefer einsteigen und mir die privaten Methoden ansehen.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Single-Responsibility-Principle":{"title":"Single Responsibility Principle","content":"#cleancode \n# Single Responsibility Principle (SRP)\n\n\u003e[!question]  **Warum?**\n\u003eFokus erleichtert das Verständnis. Eine Klasse mit genau einer Aufgabe ist verständlicher als ein Gemischtwarenladen.\n\nDas Single Responsibility Principle ([SRP](http://web.archive.org/web/20160716150726/http://objectmentor.com/resources/articles/srp.pdf)) ist eines der [[CleanCode/SOLID]] Prinzipien. Es lautet: Eine Klasse sollte nur **eine** Verantwortlichkeit haben.\n\nHintergrund des Single Responsibility Principle ist die Überlegung, dass Änderungen oder Erweiterungen der Funktionalität einer Anwendung sich auf wenige Klassen beschränken sollen. Je mehr Klassen angepasst werden müssen, desto größer ist das Risiko, dass sich durch die erforderlichen Änderungen Probleme an Stellen ergeben, die im Kern nichts mit der Erweiterung zu tun haben. Eine Verletzung des Single Responsibility Principle führt zu Kopplung und damit zu erhöhter Komplexität, es wird schwieriger den Code zu verstehen.\n\n---\nSources:\n- https://clean-code-developer.de/die-grade/orangener-grad/#Single_Responsibility_Principle_SRP\n- https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Singleton":{"title":"Singleton","content":"tags: #cleancode/designpatterns \n\n# Singleton\n## Intent\n**Singleton** is a [[CleanCode/Design Patterns#Creational|creational design pattern]] that lets you ensure that a class has **only one instance**, while providing a global access point to this instance.\n\n## Problem\nThe Singleton pattern solves two problems at the same time, violating the _[[CleanCode/Single Responsibility Principle]]_:\n\n1.  **Ensure that a class has just a single instance**. Why would anyone want to control how many instances a class has? The most common reason for this is to control access to some shared resource—for example, a database or a file.\n    \n    Here’s how it works: imagine that you created an object, but after a while decided to create a new one. Instead of receiving a fresh object, you’ll get the one you already created.\n    \n    Note that this behavior is impossible to implement with a regular constructor since a constructor call **must** always return a new object by design.\n    \n\n![The global access to an object](https://refactoring.guru/images/patterns/content/singleton/singleton-comic-1-en.png)\n\nClients may not even realize that they’re working with the same object all the time.\n\n2.  **Provide a global access point to that instance**. Remember those global variables that you (all right, me) used to store some essential objects? While they’re very handy, they’re also very unsafe since any code can potentially overwrite the contents of those variables and crash the app.\n    \n    Just like a global variable, the Singleton pattern lets you access some object from anywhere in the program. However, it also protects that instance from being overwritten by other code.\n    \n    There’s another side to this problem: you don’t want the code that solves problem #1 to be scattered all over your program. It’s much better to have it within one class, especially if the rest of your code already depends on it.\n    \n\nNowadays, the Singleton pattern has become so popular that people may call something a _singleton_ even if it solves just one of the listed problems.\n\n## Solution\nAll implementations of the Singleton have these two steps in common:\n\n-   Make the default constructor private, to prevent other objects from using the `new` operator with the Singleton class.\n-   Create a static creation method that acts as a constructor. Under the hood, this method calls the private constructor to create an object and saves it in a static field. All following calls to this method return the cached object.\n\nIf your code has access to the Singleton class, then it’s able to call the Singleton’s static method. So whenever that method is called, the same object is always returned.\n\n## Real-World Analogy\nThe government is an excellent example of the Singleton pattern. A country can have only one official government. Regardless of the personal identities of the individuals who form governments, the title, “The Government of X”, is a global point of access that identifies the group of people in charge.\n\n## Structure\n![The structure of the Singleton pattern](https://refactoring.guru/images/patterns/diagrams/singleton/structure-en.png)\n\n## Pseudocode\n\nIn this example, the database connection class acts as a **Singleton**. This class doesn’t have a public constructor, so the only way to get its object is to call the `getInstance` method. This method caches the first created object and returns it in all subsequent calls.\n\n```kotlin\n// The Database class defines the `getInstance` method that lets\n// clients access the same instance of a database connection\n// throughout the program.\nclass Database is\n    // The field for storing the singleton instance should be\n    // declared static.\n    private static field instance: Database\n\n    // The singleton's constructor should always be private to\n    // prevent direct construction calls with the `new`\n    // operator.\n    private constructor Database() is\n        // Some initialization code, such as the actual\n        // connection to a database server.\n        // ...\n\n    // The static method that controls access to the singleton\n    // instance.\n    public static method getInstance() is\n        if (Database.instance == null) then\n            acquireThreadLock() and then\n                // Ensure that the instance hasn't yet been\n                // initialized by another thread while this one\n                // has been waiting for the lock's release.\n                if (Database.instance == null) then\n                    Database.instance = new Database()\n        return Database.instance\n\n    // Finally, any singleton should define some business logic\n    // which can be executed on its instance.\n    public method query(sql) is\n        // For instance, all database queries of an app go\n        // through this method. Therefore, you can place\n        // throttling or caching logic here.\n        // ...\n\nclass Application is\n    method main() is\n        Database foo = Database.getInstance()\n        foo.query(\"SELECT ...\")\n        // ...\n        Database bar = Database.getInstance()\n        bar.query(\"SELECT ...\")\n        // The variable `bar` will contain the same object as\n        // the variable `foo`.\n```\n## Applicability\n\n-  **Use the Singleton pattern when a class in your program should have just a single instance available to all clients; for example, a single database object shared by different parts of the program.**\n\t The Singleton pattern disables all other means of creating objects of a class except for the special creation method. This method either creates a new object or returns an existing one if it has already been created.\n\n- **Use the Singleton pattern when you need stricter control over global variables.**\n\tUnlike global variables, the Singleton pattern guarantees that there’s just one instance of a class. Nothing, except for the Singleton class itself, can replace the cached instance.\n\n\tNote that you can always adjust this limitation and allow creating any number of Singleton instances. The only piece of code that needs changing is the body of the `getInstance` method.\n\n## How to Implement\n1.  Add a private static field to the class for storing the singleton instance.\n2.  Declare a public static creation method for getting the singleton instance.\n3.  Implement “lazy initialization” inside the static method. It should create a new object on its first call and put it into the static field. The method should always return that instance on all subsequent calls.\n4.  Make the constructor of the class private. The static method of the class will still be able to call the constructor, but not the other objects.\n5.  Go over the client code and replace all direct calls to the singleton’s constructor with calls to its static creation method.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can be sure that a class has only a single instance. | Violates the _[[CleanCode/Single Responsibility Principle]]_. The pattern solves two problems at the time. |\n| You gain a global access point to that instance. |  The Singleton pattern can mask bad design, for instance, when the components of the program know too much about each other. |\n| The singleton object is initialized only when it’s requested for the first time. |  The Singleton pattern can mask bad design, for instance, when the components of the program know too much about each other. |\n| | The Singleton pattern can mask bad design, for instance, when the components of the program know too much about each other. |\n| | The pattern requires special treatment in a multithreaded environment so that multiple threads won’t create a singleton object several times. |\n| | It may be difficult to [[CleanCode/Unit Test]] the client code of the Singleton because many test frameworks rely on inheritance when producing mock objects. Since the constructor of the singleton class is private and overriding static methods is impossible in most languages, you will need to think of a creative way to mock the singleton. Or just don’t write the tests. Or don’t use the Singleton pattern. |\n\n## Relationship with Other Patterns\n-   A [[CleanCode/Facade]] class can often be transformed into a [[CleanCode/Singleton]] since a single facade object is sufficient in most cases.\n    \n-   [[CleanCode/Flyweight]] would resemble [[CleanCode/Singleton]] if you somehow managed to reduce all shared states of the objects to just one flyweight object. But there are two fundamental differences between these patterns:\n    1.  There should be only one Singleton instance, whereas a _[[CleanCode/Flyweight]]_ class can have multiple instances with different intrinsic states.\n    2.  The _Singleton_ object can be mutable. [[CleanCode/Flyweight]] objects are immutable.\n-   [[CleanCode/Abstract Factory]], [[CleanCode/Builder]] and [[CleanCode/Prototype]] can all be implemented as [[CleanCode/Singleton]].","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Source-Code-Conventions":{"title":"Source Code Conventions","content":"tags: #cleancode \n\n# Source Code Conventions\n\n\u003e**Warum?**\n\u003eCode wird häufiger gelesen als geschrieben. Daher sind Konventionen wichtig, die ein schnelles Lesen und Erfassen des Codes unterstützen.\n\nWir betrachten die folgenden Aspekte als wichtig:\n\n-   Namensregeln\n-   Richtig Kommentieren\n\nDamit wollen wir nicht zum Ausdruck bringen, dass andere Konventionen unwichtig sind, wir wollen nur mit diesen beiden beginnen, weil sie uns elementar erscheinen. Bei allen Code Konventionen ist uns nämlich eines ganz wichtig: es geht weniger um die konkrete Ausgestaltung, sondern um konsequentes Einhalten der Konvention. Und es geht um das Bewusstsein, dass Konventionen notwendig sind.\n\n## Namensregeln\n\n\u003e**Warum?**\n\u003eOhne Namensregeln muss man sich wieder und wieder auf den Stil einzelner Entwickler einstimmen.\n\nNamensregeln sollen den Leser des Codes dabei unterstützen den Code zu verstehen. Da es z.B. hilfreich ist, Felder von lokalen Variablen zu unterscheiden, könnte dies durch eine Namensregel unterstützt werden. Wie eine solche Konvention im Einzelfall aussieht ist Geschmacksache. Manche bevorzugen „this.xyz“ andere „_xyz“. Welche Variante man wählt ist uns nicht wichtig. Uns kommt es darauf an, dass die Konvention konsequent eingehalten wird. Die Notwendigkeit einer Namensregel für z.B. Felder hängt ferner vom Kontext ab. In einer Klasse mit 400 Zeilen wäre uns eine Namensregel, die Felder gegenüber Variablen hervorhebt, sehr wichtig, in überschaubaren Klassen tritt sie dagegen eher in den Hintergrund. Mit Hilfe der [[CleanCode/Root Cause Analysis]] geht der [[CleanCode/Clean Code Developer]] der eigentlichen Ursache für die Notwendigkeit einer Namensregel auf den Grund.\n\n## Richtig kommentieren\n\n\u003e**Warum?**\n\u003eUnnötige oder gar falsche Kommentare halten beim Lesen auf. Der Code sollte so klar und deutlich sein, dass er möglichst ohne Kommentare auskommt.\n\nSalopp gesagt ist ein Kommentar im Code ein Hinweis darauf, dass der Code noch verbessert werden kann. Typisch für solche Fälle sind 3 Zeilen Code, die mit einem Kommentar überschrieben sind. An der Stelle hilft es wahrscheinlich, die drei Zeilen als Methode zu extrahieren (Refactoring: Extract Method) und den Kommentar als Name der Methode zu verwenden. Ganz allgemein kann der Bedarf an Kommentaren reduziert werden, in dem man gute Namen verwendet für Variablen, Methoden, Klassen, etc.\n\nStatt\n```csharp\nint laenge; // in mm\n```\nbesser\n```csharp\nint laengeInMM;\n```\n\nStatt\n```csharp\npublic double Preis() {\n\t// Berechnet den Bruttopreis ...\n}\n```\nbesser\n```csharp\npublic Money BruttoPreis() {\n\t...\n}\n```\n\nKommentiert werden sollte nicht was man tut, sondern, wenn überhaupt, wieso man etwas tut.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/State":{"title":"State","content":"tags:  #cleancode/designpatterns \n\n# State\n\n## Intent\n**State** is a behavioral design pattern that lets an object alter its behavior when its internal state changes. It appears as if the object changed its class.\n\n## Problem\nThe State pattern is closely related to the concept of a _Finite-State Machine_ .\n\n![Finite-State Machine](https://refactoring.guru/images/patterns/diagrams/state/problem1.png)\n\nFinite-State Machine.\n\nThe main idea is that, at any given moment, there’s a _finite_ number of _states_ which a program can be in. Within any unique state, the program behaves differently, and the program can be switched from one state to another instantaneously. However, depending on a current state, the program may or may not switch to certain other states. These switching rules, called _transitions_, are also finite and predetermined.\n\nYou can also apply this approach to objects. Imagine that we have a `Document` class. A document can be in one of three states: `Draft`, `Moderation` and `Published`. The `publish` method of the document works a little bit differently in each state:\n\n-   In `Draft`, it moves the document to moderation.\n-   In `Moderation`, it makes the document public, but only if the current user is an administrator.\n-   In `Published`, it doesn’t do anything at all.\n\n![Possible states of a document object](https://refactoring.guru/images/patterns/diagrams/state/problem2-en.png)\n\nPossible states and transitions of a document object.\n\nState machines are usually implemented with lots of conditional statements (`if` or `switch`) that select the appropriate behavior depending on the current state of the object. Usually, this “state” is just a set of values of the object’s fields. Even if you’ve never heard about finite-state machines before, you’ve probably implemented a state at least once. Does the following code structure ring a bell?\n\n```kotlin\n\nclass Document is\n    field state: string\n    // ...\n    method publish() is\n        switch (state)\n            \"draft\":\n                state = \"moderation\"\n                break\n            \"moderation\":\n                if (currentUser.role == \"admin\")\n                    state = \"published\"\n                break\n            \"published\":\n                // Do nothing.\n                break\n    // ...\n\nThe biggest weakness of a state machine based on conditionals reveals itself once we start adding more and more states and state-dependent behaviors to the `Document` class. Most methods will contain monstrous conditionals that pick the proper behavior of a method according to the current state. Code like this is very difficult to maintain because any change to the transition logic may require changing state conditionals in every method.\n\nThe problem tends to get bigger as a project evolves. It’s quite difficult to predict all possible states and transitions at the design stage. Hence, a lean state machine built with a limited set of conditionals can grow into a bloated mess over time.\n```\n\n## Solution\nThe State pattern suggests that you create new classes for all possible states of an object and extract all state-specific behaviors into these classes.\n\nInstead of implementing all behaviors on its own, the original object, called _context_, stores a reference to one of the state objects that represents its current state, and delegates all the state-related work to that object.\n\n![Document delegates the work to a state object](https://refactoring.guru/images/patterns/diagrams/state/solution-en.png)\n\nDocument delegates the work to a state object.\n\nTo transition the context into another state, replace the active state object with another object that represents that new state. This is possible only if all state classes follow the same interface and the context itself works with these objects through that interface.\n\nThis structure may look similar to the [[CleanCode/Strategy|Strategy Pattern]], but there’s one key difference. In the State pattern, the particular states may be aware of each other and initiate transitions from one state to another, whereas strategies almost never know about each other.\n\n## Real-World Analogy\nThe buttons and switches in your smartphone behave differently depending on the current state of the device:\n\n-   When the phone is unlocked, pressing buttons leads to executing various functions.\n-   When the phone is locked, pressing any button leads to the unlock screen.\n-   When the phone’s charge is low, pressing any button shows the charging screen.\n\n## Structure\n![Structure of the State design pattern](https://refactoring.guru/images/patterns/diagrams/state/structure-en.png)\n1.  **Context** stores a reference to one of the concrete state objects and delegates to it all state-specific work. The context communicates with the state object via the state interface. The context exposes a setter for passing it a new state object.\n2.  The **State** interface declares the state-specific methods. These methods should make sense for all concrete states because you don’t want some of your states to have useless methods that will never be called.\n3.  **Concrete States** provide their own implementations for the state-specific methods. To avoid duplication of similar code across multiple states, you may provide intermediate abstract classes that encapsulate some common behavior.\n    \n    State objects may store a backreference to the context object. Through this reference, the state can fetch any required info from the context object, as well as initiate state transitions.\n4.  Both context and concrete states can set the next state of the context and perform the actual state transition by replacing the state object linked to the context.\n\n## Pseudocode\nIn this example, the **State** pattern lets the same controls of the media player behave differently, depending on the current playback state.\n\n![Structure of the State pattern example](https://refactoring.guru/images/patterns/diagrams/state/example.png)\n\nExample of changing object behavior with state objects.\n\nThe main object of the player is always linked to a state object that performs most of the work for the player. Some actions replace the current state object of the player with another, which changes the way the player reacts to user interactions.\n```kotlin\n// The AudioPlayer class acts as a context. It also maintains a\n// reference to an instance of one of the state classes that\n// represents the current state of the audio player.\nclass AudioPlayer is\n    field state: State\n    field UI, volume, playlist, currentSong\n\n    constructor AudioPlayer() is\n        this.state = new ReadyState(this)\n\n        // Context delegates handling user input to a state\n        // object. Naturally, the outcome depends on what state\n        // is currently active, since each state can handle the\n        // input differently.\n        UI = new UserInterface()\n        UI.lockButton.onClick(this.clickLock)\n        UI.playButton.onClick(this.clickPlay)\n        UI.nextButton.onClick(this.clickNext)\n        UI.prevButton.onClick(this.clickPrevious)\n\n    // Other objects must be able to switch the audio player's\n    // active state.\n    method changeState(state: State) is\n        this.state = state\n\n    // UI methods delegate execution to the active state.\n    method clickLock() is\n        state.clickLock()\n    method clickPlay() is\n        state.clickPlay()\n    method clickNext() is\n        state.clickNext()\n    method clickPrevious() is\n        state.clickPrevious()\n\n    // A state may call some service methods on the context.\n    method startPlayback() is\n        // ...\n    method stopPlayback() is\n        // ...\n    method nextSong() is\n        // ...\n    method previousSong() is\n        // ...\n    method fastForward(time) is\n        // ...\n    method rewind(time) is\n        // ...\n\n// The base state class declares methods that all concrete\n// states should implement and also provides a backreference to\n// the context object associated with the state. States can use\n// the backreference to transition the context to another state.\nabstract class State is\n    protected field player: AudioPlayer\n\n    // Context passes itself through the state constructor. This\n    // may help a state fetch some useful context data if it's\n    // needed.\n    constructor State(player) is\n        this.player = player\n\n    abstract method clickLock()\n    abstract method clickPlay()\n    abstract method clickNext()\n    abstract method clickPrevious()\n\n// Concrete states implement various behaviors associated with a\n// state of the context.\nclass LockedState extends State is\n\n    // When you unlock a locked player, it may assume one of two\n    // states.\n    method clickLock() is\n        if (player.playing)\n            player.changeState(new PlayingState(player))\n        else\n            player.changeState(new ReadyState(player))\n\n    method clickPlay() is\n        // Locked, so do nothing.\n\n    method clickNext() is\n        // Locked, so do nothing.\n\n    method clickPrevious() is\n        // Locked, so do nothing.\n\n// They can also trigger state transitions in the context.\nclass ReadyState extends State is\n    method clickLock() is\n        player.changeState(new LockedState(player))\n\n    method clickPlay() is\n        player.startPlayback()\n        player.changeState(new PlayingState(player))\n\n    method clickNext() is\n        player.nextSong()\n\n    method clickPrevious() is\n        player.previousSong()\n\nclass PlayingState extends State is\n    method clickLock() is\n        player.changeState(new LockedState(player))\n\n    method clickPlay() is\n        player.stopPlayback()\n        player.changeState(new ReadyState(player))\n\n    method clickNext() is\n        if (event.doubleclick)\n            player.nextSong()\n        else\n            player.fastForward(5)\n\n    method clickPrevious() is\n        if (event.doubleclick)\n            player.previous()\n        else\n            player.rewind(5)\n```\n\n## Applicability\n- **Use the State pattern when you have an object that behaves differently depending on its current state, the number of states is enormous, and the state-specific code changes frequently.**\n  The pattern suggests that you extract all state-specific code into a set of distinct classes. As a result, you can add new states or change existing ones independently of each other, reducing the maintenance cost.\n  \n- **Use the pattern when you have a class polluted with massive conditionals that alter how the class behaves according to the current values of the class’s fields.**\n  The State pattern lets you extract branches of these conditionals into methods of corresponding state classes. While doing so, you can also clean temporary fields and helper methods involved in state-specific code out of your main class.\n  \n- **Use State when you have a lot of duplicate code across similar states and transitions of a condition-based state machine.**\n  The State pattern lets you compose hierarchies of state classes and reduce duplication by extracting common code into abstract base classes.\n\n\n## How to Implement\n1.  Decide what class will act as the context. It could be an existing class which already has the state-dependent code; or a new class, if the state-specific code is distributed across multiple classes.\n2.  Declare the state interface. Although it may mirror all the methods declared in the context, aim only for those that may contain state-specific behavior.\n3.  For every actual state, create a class that derives from the state interface. Then go over the methods of the context and extract all code related to that state into your newly created class.\n    \n    While moving the code to the state class, you might discover that it depends on private members of the context. There are several workarounds:\n    \n    -   Make these fields or methods public.\n    -   Turn the behavior you’re extracting into a public method in the context and call it from the state class. This way is ugly but quick, and you can always fix it later.\n    -   Nest the state classes into the context class, but only if your programming language supports nesting classes.\n4.  In the context class, add a reference field of the state interface type and a public setter that allows overriding the value of that field.\n5.  Go over the method of the context again and replace empty state conditionals with calls to corresponding methods of the state object.\n6.  To switch the state of the context, create an instance of one of the state classes and pass it to the context. You can do this within the context itself, or in various states, or in the client. Wherever this is done, the class becomes dependent on the concrete state class that it instantiates.\n\n## Pro and  Cons\nPros | Cons\n--- | ---\n_[[CleanCode/Single Responsibility Principle]]_. Organize the code related to particular states into separate classes. | Applying the pattern can be overkill if a state machine has only a few states or rarely changes. \n_[[CleanCode/Open Closed Principle]]_. Introduce new states without changing existing state classes or the context. |\nSimplify the code of the context by eliminating bulky state machine conditionals. |\n\n## Relations with Other Patterns\n- [[CleanCode/Bridge]], [[CleanCode/State]], [[CleanCode/Strategy]] (and to some degree [[CleanCode/Adapter]]) have very similar structures. Indeed, all of these patterns are based on [[composition]], which is delegating work to other objects. However, they all solve different problems. A pattern isn’t just a recipe for structuring your code in a specific way. It can also communicate to other developers the problem the pattern solves.\n- State can be considered as an extension of [[CleanCode/Strategy]]. Both patterns are based on [[composition]]: they change the behavior of the context by delegating some work to helper objects. [[CleanCode/Strategy]] makes these objects completely independent and unaware of each other. However, State doesn’t restrict dependencies between concrete states, letting them alter the state of the context at will.\n","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Statical-Code-Analysis":{"title":"Statical Code Analysis","content":"tags:  #cleancode \n\n# Statical Code Analysis\n\n\u003e**Warum?**\n\u003eVertrauen ist gut, Kontrolle ist besser – und je automatischer, desto leichter ist sie.\n\nWie definiert sich eigentlich die Qualität einer Codeeinheit, z.B. einer Klasse oder Komponente? Reicht es, dass sie funktional die Anforderungen des Kunden erfüllt? Reicht es, dass er schnell genug und skalierbar genug ist? Automatische Tests und schließlich Tests durch den Kunden geben darüber ja Auskunft. Ohne solche Anforderungskonformität hat Software natürlich keine relevante Qualität. Wenn sie dem Kunden nicht nützt, erübrigt sich jede weitere Frage.\n\nAuf der anderen Seite reicht es, entgegen immer noch weit verbreiteter Annahme, allerdings auch nicht, anforderungskonform zu sein. Hohe Qualität ergibt sich nicht allein aus Funktionalität und z.B. Performance. Denn neben den funktionalen und nicht funktionalen Anforderungen gibt es auch noch eine meist unausgesprochene verborgene Anforderung: Kunden wollen auch immer, dass Software nicht nur heute ihre Anforderungen erfüllt, sondern auch noch morgen und übermorgen. Kunden wollen Investitionsschutz durch Wandelbarkeit.\n\nFür Kunden ist diese Anforderung meist implizit. Sie glauben, es sei selbstverständlich, dass ein immaterielles Produkt wie Software sich quasi unendlich und auf Knopfdruck an neue Anforderungen anpassen ließe. Auch Führungskräfte, die nicht aus der Softwareentwicklung stammen, glauben das oft. Und sogar Softwareentwickler selbst!\n\nGrößer könnte das Missverständnis über Software jedoch kaum sein. Wandelbarkeit ist weder selbstverständlich im Sinne eines von jedem Softwareentwickler ohnehin verfolgten Zieles, noch ergibt sie sich durch irgendetwas quasi von selbst. Wandelbarkeit ist vielmehr harte Arbeit und muss ständig gegen andere Werte abgewogen werden.\n\nWenn sonstige Anforderungskonformität sich nun durch (automatisierte) Tests feststellen lässt, wie steht es dann mit der Wandelbarkeit? Lässt sich die Qualität von Code im Hinblick auf seine (Über)Lebensfähigkeit auch automatisch messen? Zum Teil. Nicht alle Aspekte, die Software evolvierbar machen, sind automatisch prüfbar. Ob zum Beispiel Software offen für Erweiterungen durch ein Add-In-Konzept gehalten wird, ist nicht automatisiert erkennbar.\n\nDennoch gibt es [Metriken](http://en.wikipedia.org/wiki/Software_metric), deren Wert für eine Software sich „ausrechnen“ lässt. [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/) helfen dabei. Diese Tools sollten daher in jedem Softwareprojekt zum Einsatz kommen.\n\n-   Für [[CleanCode/Legacy Code]] können die Tools den Status Quo erheben und somit eine Grundlinie definieren, mit der die weitere Entwicklung des Codes (zum Besseren) verglichen werden kann.\n-   Für neuen Code, der mit Wandelbarkeit im Blick geplant wurde, zeigt solch statische Codeanalyse, ob er das Ideal der Planung erfüllt.\n\n[[CleanCode/Clean Code Developer|CCD]] sind nicht damit zufrieden, Code nur automatisiert zu testen. Sie haben auch immer ein Auge auf seine Wandelbarkeit, denn sie wissen, dass Kunden daran genauso interessiert sind – egal, ob sie es explizit gesagt haben oder nicht.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Strategy":{"title":"Strategy","content":"tags: #cleancode/designpatterns \n\n# Strategy\n\n## Intent\n\n**Strategy** is a [[CleanCode/Design Patterns#Behavioral|behavioral design pattern]] that lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable.\n\n## Problem\n\nOne day you decided to create a navigation app for casual travelers. The app was centered around a beautiful map which helped users quickly orient themselves in any city.\n\nOne of the most requested features for the app was automatic route planning. A user should be able to enter an address and see the fastest route to that destination displayed on the map.\n\nThe first version of the app could only build the routes over roads. People who traveled by car were bursting with joy. But apparently, not everybody likes to drive on their vacation. So with the next update, you added an option to build walking routes. Right after that, you added another option to let people use public transport in their routes.\n\nHowever, that was only the beginning. Later you planned to add route building for cyclists. And even later, another option for building routes through all of a city’s tourist attractions.\n\n![The code of the navigator became very bloated](https://refactoring.guru/images/patterns/diagrams/strategy/problem.png)\n\nThe code of the navigator became bloated.\n\nWhile from a business perspective the app was a success, the technical part caused you many headaches. Each time you added a new routing algorithm, the main class of the navigator doubled in size. At some point, the beast became too hard to maintain.\n\nAny change to one of the algorithms, whether it was a simple bug fix or a slight adjustment of the street score, affected the whole class, increasing the chance of creating an error in already-working code.\n\nIn addition, teamwork became inefficient. Your teammates, who had been hired right after the successful release, complain that they spend too much time resolving merge conflicts. Implementing a new feature requires you to change the same huge class, conflicting with the code produced by other people.\n\n## Solution\n\nThe Strategy pattern suggests that you take a class that does something specific in a lot of different ways and extract all of these algorithms into separate classes called _strategies_.\n\nThe original class, called _context_, must have a field for storing a reference to one of the strategies. The context delegates the work to a linked strategy object instead of executing it on its own.\n\nThe context isn’t responsible for selecting an appropriate algorithm for the job. Instead, the client passes the desired strategy to the context. In fact, the context doesn’t know much about strategies. It works with all strategies through the same generic interface, which only exposes a single method for triggering the algorithm encapsulated within the selected strategy.\n\nThis way the context becomes independent of concrete strategies, so you can add new algorithms or modify existing ones without changing the code of the context or other strategies.\n\n![Route planning strategies](https://refactoring.guru/images/patterns/diagrams/strategy/solution.png)\n\nRoute planning strategies.\n\nIn our navigation app, each routing algorithm can be extracted to its own class with a single `buildRoute` method. The method accepts an origin and destination and returns a collection of the route’s checkpoints.\n\nEven though given the same arguments, each routing class might build a different route, the main navigator class doesn’t really care which algorithm is selected since its primary job is to render a set of checkpoints on the map. The class has a method for switching the active routing strategy, so its clients, such as the buttons in the user interface, can replace the currently selected routing behavior with another one.\n\n## Real-World Analogy\n\n![Various transportation strategies](https://refactoring.guru/images/patterns/content/strategy/strategy-comic-1-en.png)\n\nVarious strategies for getting to the airport.\n\nImagine that you have to get to the airport. You can catch a bus, order a cab, or get on your bicycle. These are your transportation strategies. You can pick one of the strategies depending on factors such as budget or time constraints.\n\n## Structure\n\n![Structure of the Strategy design pattern](https://refactoring.guru/images/patterns/diagrams/strategy/structure.png)\n\n1.  The **Context** maintains a reference to one of the concrete strategies and communicates with this object only via the strategy interface.\n    \n2.  The **Strategy** interface is common to all concrete strategies. It declares a method the context uses to execute a strategy.\n    \n3.  **Concrete Strategies** implement different variations of an algorithm the context uses.\n    \n4.  The context calls the execution method on the linked strategy object each time it needs to run the algorithm. The context doesn’t know what type of strategy it works with or how the algorithm is executed.\n\n## Pseudocode\n\nIn this example, the context uses multiple **strategies** to execute various arithmetic operations.\n\n```kotlin\n// The strategy interface declares operations common to all\n// supported versions of some algorithm. The context uses this\n// interface to call the algorithm defined by the concrete\n// strategies.\ninterface Strategy is\n    method execute(a, b)\n\n// Concrete strategies implement the algorithm while following\n// the base strategy interface. The interface makes them\n// interchangeable in the context.\nclass ConcreteStrategyAdd implements Strategy is\n    method execute(a, b) is\n        return a + b\n\nclass ConcreteStrategySubtract implements Strategy is\n    method execute(a, b) is\n        return a - b\n\nclass ConcreteStrategyMultiply implements Strategy is\n    method execute(a, b) is\n        return a * b\n\n// The context defines the interface of interest to clients.\nclass Context is\n    // The context maintains a reference to one of the strategy\n    // objects. The context doesn't know the concrete class of a\n    // strategy. It should work with all strategies via the\n    // strategy interface.\n    private strategy: Strategy\n\n    // Usually the context accepts a strategy through the\n    // constructor, and also provides a setter so that the\n    // strategy can be switched at runtime.\n    method setStrategy(Strategy strategy) is\n        this.strategy = strategy\n\n    // The context delegates some work to the strategy object\n    // instead of implementing multiple versions of the\n    // algorithm on its own.\n    method executeStrategy(int a, int b) is\n        return strategy.execute(a, b)\n\n// The client code picks a concrete strategy and passes it to\n// the context. The client should be aware of the differences\n// between strategies in order to make the right choice.\nclass ExampleApplication is\n    method main() is\n        Create context object.\n\n        Read first number.\n        Read last number.\n        Read the desired action from user input.\n\n        if (action == addition) then\n            context.setStrategy(new ConcreteStrategyAdd())\n\n        if (action == subtraction) then\n            context.setStrategy(new ConcreteStrategySubtract())\n\n        if (action == multiplication) then\n            context.setStrategy(new ConcreteStrategyMultiply())\n\n        result = context.executeStrategy(First number, Second number)\n\n        Print result.\n```\n\n\n## Applicability\n- **Use the Strategy pattern when you want to use different variants of an algorithm within an object and be able to switch from one algorithm to another during runtime.**\n  The Strategy pattern lets you indirectly alter the object’s behavior at runtime by associating it with different sub-objects which can perform specific sub-tasks in different ways.\n- **Use the Strategy when you have a lot of similar classes that only differ in the way they execute some behavior.**\n   The Strategy pattern lets you extract the varying behavior into a separate class hierarchy and combine the original classes into one, thereby reducing duplicate code.\n- **Use the pattern to isolate the business logic of a class from the implementation details of algorithms that may not be as important in the context of that logic.**\n  The Strategy pattern lets you isolate the code, internal data, and dependencies of various algorithms from the rest of the code. Various clients get a simple interface to execute the algorithms and switch them at runtime.\n- **Use the pattern when your class has a massive conditional statement that switches between different variants of the same algorithm.**\n  The Strategy pattern lets you do away with such a conditional by extracting all algorithms into separate classes, all of which implement the same interface. The original object delegates execution to one of these objects, instead of implementing all variants of the algorithm.\n\n\n## How to Implement\n1.  In the context class, identify an algorithm that’s prone to frequent changes. It may also be a massive conditional that selects and executes a variant of the same algorithm at runtime.\n2.  Declare the strategy interface common to all variants of the algorithm.\n3.  One by one, extract all algorithms into their own classes. They should all implement the strategy interface.\n4.  In the context class, add a field for storing a reference to a strategy object. Provide a setter for replacing values of that field. The context should work with the strategy object only via the strategy interface. The context may define an interface which lets the strategy access its data.\n5.  Clients of the context must associate it with a suitable strategy that matches the way they expect the context to perform its primary job.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can swap algorithms used inside an object at runtime. | If you only have a couple of algorithms and they rarely change, there’s no real reason to overcomplicate the program with new classes and interfaces that come along with the pattern. |\n| You can isolate the implementation details of an algorithm from the code that uses it. | Clients must be aware of the differences between strategies to be able to select a proper one. |\n| You can replace inheritance with composition. | A lot of modern programming languages have functional type support that lets you implement different versions of an algorithm inside a set of anonymous functions. Then you could use these functions exactly as you’d have used the strategy objects, but without bloating your code with extra classes and interfaces. |\n| [[CleanCode/Open Closed Principle]]. You can introduce new strategies without having to change the context. | |\n\n## Relations with Other Patterns\n- [[CleanCode/Bridge]], [[CleanCode/State]], [[CleanCode/Strategy]] (and to some degree [[CleanCode/Adapter]]) have very similar structures. Indeed, all of these patterns are based on [[composition]], which is delegating work to other objects. However, they all solve different problems. A pattern isn’t just a recipe for structuring your code in a specific way. It can also communicate to other developers the problem the pattern solves.\n- [[CleanCode/Command]] and [[CleanCode/Strategy]] may look similar because you can use both to parameterize an object with some action. However, they have very different intents.\n\t- You can use [[CleanCode/Command]] to convert any operation into an object. The operation’s parameters become fields of that object. The conversion lets you defer execution of the operation, queue it, store the history of commands, send commands to remote services, etc.\n\t- On the other hand, [[CleanCode/Strategy]] usually describes different ways of doing the same thing, letting you swap these algorithms within a single context class.\n- [[CleanCode/Decorator]] lets you change the skin of an object, while [[CleanCode/Strategy]] lets you change the guts.\n- [[CleanCode/Template Method]] is based on inheritance: it lets you alter parts of an algorithm by extending those parts in subclasses. [[CleanCode/Strategy]] is based on composition: you can alter parts of the object’s behavior by supplying it with different strategies that correspond to that behavior. Template Method works at the class level, so it’s static. Strategy works on the object level, letting you switch behaviors at runtime.\n- [[CleanCode/State]] can be considered as an extension of Strategy. Both patterns are based on [[composition]]: they change the behavior of the context by delegating some work to helper objects. [[CleanCode/Strategy]] makes these objects completely independent and unaware of each other. However, [[CleanCode/State]] doesn’t restrict dependencies between concrete states, letting them alter the state of the context at will.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Tell-dont-ask":{"title":"Tell, don't ask","content":"tags: #cleancode \n\n# Tell, don’t ask\n\n\u003e**Warum?**\n\u003eHohe [[Kohäsion]] und lose Kopplung sind Tugenden. Öffentliche Zustandsdetails einer Klasse widersprechen dem.\n\nEtwas provokant formuliert, sollten Klassen keine Property Getter haben. Diese verführen den Verwender einer Klasse dazu, anhand von Werten, die ein Objekt liefert, Entscheidungen zu treffen. Statt also dem Objekt mitzuteilen, was es tun soll, wird es befragt, um dann von außen Betrachtungen über den internen Zustand des Objektes anzustellen.\n\nEines der Kernprinzipien der [[OOP]] lautet _[[CleanCode/Information Hiding Principle]]_ (siehe dazu auch im [[CleanCode/Gelber Grad|gelben Grad]]). Keine Klasse soll Details nach außen tragen, aus denen hervorgeht, wie sie intern implementiert ist. Benötigt eine Klasse für ihre Arbeit einen internen Zustand, wird dieser typischerweise in einem internen Feld abgelegt. Wenn nun dieser Wert auch nach außen sichtbar ist, werden Verwender verleitet, diesen eigentlich internen Zustand des Objektes für eigene Entscheidungen heranzuziehen. Dadurch wird die Klasse schnell zur reinen Datenhaltung degradiert. Eine Implementierung, bei der einem Objekt mitgeteilt wird, was es tun soll, ist in jedem Fall vorzuziehen. Dadurch muss es den Verwender nicht mehr interessieren, wie die Klasse die Aufgabe intern bewerkstelligt.\n\nAls Ergebnis des [Tell don’t ask](http://www.pragprog.com/articles/tell-dont-ask) Prinzips entstehen Objekte mit Verhalten statt „dummer“ Datenhaltungsobjekte. Das Zusammenspiel der Objekte ist lose gekoppelt, da die Objekte keine Annahmen über die kollaborierenden Objekte machen müssen. Aber nicht nur das! Wenn Objekte ihren Zustand nicht veröffentlichen, behalten sie die Entscheidungshoheit. Die Kohäsion des entscheidenden Codes wächst damit, weil er an einem Ort zusammengelegt wird.\n\nEin typisches Codebeispiel ist im folgenden zu sehen. Statt hier zunächst zu fragen, ob im Logging die Tracemeldungen aktiviert sind (Ask), sollte die Logging Bibliothek direkt angewiesen werden, die Tracemeldung auszugeben (Tell). Die Bibliothek soll dann intern selbst entscheiden, ob die Meldung geloggt wird oder nicht.\n```csharp\nif (_logger.Trace()) {\n\t_logger.TraceMsg(„… eine Meldung… „);\n}\n```","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Template-Method":{"title":"Template Method","content":"tags:  #cleancode/designpatterns \n\n# Template Method\n\n## Intent\n**Template Method** is a behavioral design pattern that defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.\n\n## Problem\nImagine that you’re creating a data mining application that analyzes corporate documents. Users feed the app documents in various formats (PDF, DOC, CSV), and it tries to extract meaningful data from these docs in a uniform format.\n\nThe first version of the app could work only with DOC files. In the following version, it was able to support CSV files. A month later, you “taught” it to extract data from PDF files.\n\n![Data mining classes contained a lot of duplicate code](https://refactoring.guru/images/patterns/diagrams/template-method/problem.png)\n\nData mining classes contained a lot of duplicate code.\n\nAt some point, you noticed that all three classes have a lot of similar code. While the code for dealing with various data formats was entirely different in all classes, the code for data processing and analysis is almost identical. Wouldn’t it be great to get rid of the code duplication, leaving the algorithm structure intact?\n\nThere was another problem related to client code that used these classes. It had lots of conditionals that picked a proper course of action depending on the class of the processing object. If all three processing classes had a common interface or a base class, you’d be able to eliminate the conditionals in client code and use polymorphism when calling methods on a processing object.\n\n##  Solution\n\nThe Template Method pattern suggests that you break down an algorithm into a series of steps, turn these steps into methods, and put a series of calls to these methods inside a single _template method._ The steps may either be `abstract`, or have some default implementation. To use the algorithm, the client is supposed to provide its own subclass, implement all abstract steps, and override some of the optional ones if needed (but not the template method itself).\n\nLet’s see how this will play out in our data mining app. We can create a base class for all three parsing algorithms. This class defines a template method consisting of a series of calls to various document-processing steps.\n\n![Template method defines the skeleton of the algorithm](https://refactoring.guru/images/patterns/diagrams/template-method/solution-en.png)\n\nTemplate method breaks the algorithm into steps, allowing subclasses to override these steps but not the actual method.\n\nAt first, we can declare all steps `abstract`, forcing the subclasses to provide their own implementations for these methods. In our case, subclasses already have all necessary implementations, so the only thing we might need to do is adjust signatures of the methods to match the methods of the superclass.\n\nNow, let’s see what we can do to get rid of the duplicate code. It looks like the code for opening/closing files and extracting/parsing data is different for various data formats, so there’s no point in touching those methods. However, implementation of other steps, such as analyzing the raw data and composing reports, is very similar, so it can be pulled up into the base class, where subclasses can share that code.\n\nAs you can see, we’ve got two types of steps:\n\n-   _abstract steps_ must be implemented by every subclass\n-   _optional steps_ already have some default implementation, but still can be overridden if needed\n\nThere’s another type of step, called _hooks_. A hook is an optional step with an empty body. A template method would work even if a hook isn’t overridden. Usually, hooks are placed before and after crucial steps of algorithms, providing subclasses with additional extension points for an algorithm.\n\n##  Real-World Analogy\n\n![Mass housing construction](https://refactoring.guru/images/patterns/diagrams/template-method/live-example.png)\n\nA typical architectural plan can be slightly altered to better fit the client’s needs.\n\nThe template method approach can be used in mass housing construction. The architectural plan for building a standard house may contain several extension points that would let a potential owner adjust some details of the resulting house.\n\nEach building step, such as laying the foundation, framing, building walls, installing plumbing and wiring for water and electricity, etc., can be slightly changed to make the resulting house a little bit different from others.\n\n##  Structure\n\n![Structure of the Template Method design pattern](https://refactoring.guru/images/patterns/diagrams/template-method/structure.png)\n\n1.  The **Abstract Class** declares methods that act as steps of an algorithm, as well as the actual template method which calls these methods in a specific order. The steps may either be declared `abstract` or have some default implementation.\n    \n2.  **Concrete Classes** can override all of the steps, but not the template method itself.\n    \n\n##  Pseudocode\n\nIn this example, the **Template Method** pattern provides a “skeleton” for various branches of artificial intelligence in a simple strategy video game.\n\n![Structure of the Template Method pattern example](https://refactoring.guru/images/patterns/diagrams/template-method/example.png)\n\nAI classes of a simple video game.\n\nAll races in the game have almost the same types of units and buildings. Therefore you can reuse the same AI structure for various races, while being able to override some of the details. With this approach, you can override the orcs’ AI to make it more aggressive, make humans more defense-oriented, and make monsters unable to build anything. Adding a new race to the game would require creating a new AI subclass and overriding the default methods declared in the base AI class.\n\n```kotlin\n// The abstract class defines a template method that contains a\n// skeleton of some algorithm composed of calls, usually to\n// abstract primitive operations. Concrete subclasses implement\n// these operations, but leave the template method itself\n// intact.\nclass GameAI is\n    // The template method defines the skeleton of an algorithm.\n    method turn() is\n        collectResources()\n        buildStructures()\n        buildUnits()\n        attack()\n\n    // Some of the steps may be implemented right in a base\n    // class.\n    method collectResources() is\n        foreach (s in this.builtStructures) do\n            s.collect()\n\n    // And some of them may be defined as abstract.\n    abstract method buildStructures()\n    abstract method buildUnits()\n\n    // A class can have several template methods.\n    method attack() is\n        enemy = closestEnemy()\n        if (enemy == null)\n            sendScouts(map.center)\n        else\n            sendWarriors(enemy.position)\n\n    abstract method sendScouts(position)\n    abstract method sendWarriors(position)\n\n// Concrete classes have to implement all abstract operations of\n// the base class but they must not override the template method\n// itself.\nclass OrcsAI extends GameAI is\n    method buildStructures() is\n        if (there are some resources) then\n            // Build farms, then barracks, then stronghold.\n\n    method buildUnits() is\n        if (there are plenty of resources) then\n            if (there are no scouts)\n                // Build peon, add it to scouts group.\n            else\n                // Build grunt, add it to warriors group.\n\n    // ...\n\n    method sendScouts(position) is\n        if (scouts.length \u003e 0) then\n            // Send scouts to position.\n\n    method sendWarriors(position) is\n        if (warriors.length \u003e 5) then\n            // Send warriors to position.\n\n// Subclasses can also override some operations with a default\n// implementation.\nclass MonstersAI extends GameAI is\n    method collectResources() is\n        // Monsters don't collect resources.\n\n    method buildStructures() is\n        // Monsters don't build structures.\n\n    method buildUnits() is\n        // Monsters don't build units.\n\n```\n\n## Applicability\n- **Use the Template Method pattern when you want to let clients extend only particular steps of an algorithm, but not the whole algorithm or its structure.**\n\tThe Template Method lets you turn a monolithic algorithm into a series of individual steps which can be easily extended by subclasses while keeping intact the structure defined in a superclass.\n\n- **Use the pattern when you have several classes that contain almost identical algorithms with some minor differences. As a result, you might need to modify all classes when the algorithm changes.**\n\tWhen you turn such an algorithm into a template method, you can also pull up the steps with similar implementations into a superclass, eliminating code duplication. Code that varies between subclasses can remain in subclasses.\n## How to Implement\n1.  Analyze the target algorithm to see whether you can break it into steps. Consider which steps are common to all subclasses and which ones will always be unique.\n    \n2.  Create the abstract base class and declare the template method and a set of abstract methods representing the algorithm’s steps. Outline the algorithm’s structure in the template method by executing corresponding steps. Consider making the template method `final` to prevent subclasses from overriding it.\n    \n3.  It’s okay if all the steps end up being abstract. However, some steps might benefit from having a default implementation. Subclasses don’t have to implement those methods.\n    \n4.  Think of adding hooks between the crucial steps of the algorithm.\n    \n5.  For each variation of the algorithm, create a new concrete subclass. It _must_ implement all of the abstract steps, but _may_ also override some of the optional ones.\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| You can let clients override only certain parts of a large algorithm, making them less affected by changes that happen to other parts of the algorithm. |  Some clients may be limited by the provided skeleton of an algorithm.|\n| You can pull the duplicate code into a superclass. | You might violate the [[CleanCode/Liskov Substitution Principle]] by suppressing a default step implementation via a subclass. |\n| | Template methods tend to be harder to maintain the more steps they have. |\n\n## Relations with Other Patterns\n- [[CleanCode/Factory]] Method is a specialization of Template Method. At the same time, a [[CleanCode/Factory]] Method may serve as a step in a large Template Method.\n- Template Method is based on inheritance: it lets you alter parts of an algorithm by extending those parts in subclasses. [[CleanCode/Strategy]] is based on composition: you can alter parts of the object’s behavior by supplying it with different strategies that correspond to that behavior. Template Method works at the class level, so it’s static. [[CleanCode/Strategy]] works on the object level, letting you switch behaviors at runtime.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Test-First":{"title":"Test First","content":"tags: #cleancode \n\n# Test First\n\n\u003e**Warum?**\n\u003e\u003eDer Kunde ist König und bestimmt die Form einer Dienstleistung. Service-Implementationen sind also nur passgenau, wenn sie durch einen Client getrieben werden.\n\nWenn Komponentenorientierung fordert, die Kontrakte für Komponenten unabhängig von ihrer Implementation zu definieren, stellt sich die Frage, wie das denn geschehen soll. Durch Diskussion am runden Tisch? Das ist sicherlich ein Weg. Ein besserer ist jedoch, Kontrakte nicht erst lange an einer Tafel zu entwerfen, sondern sie sofort in Code zu gießen. Komponentenkontrakte – oder allgemeiner: jede Codeschnittstelle – dient letztlich anderem Code als API. Es ist daher konsequent und effektiv, von diesem Code ausgehend Schnittstellen zu spezifizieren.\n\nDas ist das Anliegen von _[[CleanCode/Test First]]_. Test first basiert auf dem Gedanken, dass Funktionseinheiten (Methoden, Klassen, usw.) durch Client-Service-Verhältnisse charakterisiert sind. Diese Verhältnisse drehen sich um die Schnittstelle zwischen Client und Service. Und diese Schnittstelle sollte durch den Client bestimmt werden. Der Client ist als Kunde des Service König. Ihm soll der Service dienen, nach ihm soll sich deshalb die Schnittstelle des Service richten.\n\nDie Definition der Schnittstellen der Codeeinheiten einer Software erfolgt aus diesem Grund von außen nach innen. Außen, an der Benutzeroberfläche, sitzt der ultimative Client, der Anwender. Er definiert die visuelle/haptische Schnittstelle der UI-Codeeinheiten. Die wiederum sind die Clients von darunterliegenden Codeschichten. Die sind dann Clients von tieferliegenden Schichten usw. Die Leistungen und Schnittstellen der tiefsten Codeschichten kann somit nur bestimmt werden, wenn die der darüberliegenden schon bestimmt sind usw.\n\nDas widerspricht dem häufigen Ansatz der bottom-up Definition von Codeeinheiten. Gern fangen Projekte an, eine Datenzugriffsschicht zu definieren und zu implementieren. Das ist verständlich, weil solch fundamentale Funktionalität doch scheinbar die Voraussetzung für alles weitere ist. Aber dieses Vorgehen ist problematisch, wie viele gescheiterte Projekte zeigen:\n\n-   Wer von unten nach oben, von innen nach außen spezifiziert und implementiert, bietet dem Kunden erst sehr spät einen Wert an. Das ist zumindest frustrierend, wenn nicht gar kontraproduktiv.\n-   Wer bottom-up in der Spezifikation vorgeht, der spezifiziert ohne genaue Anforderungen des ultimativen Clients, des Benutzers. Was er also spezifiziert läuft Gefahr, am Ende zu allgemein und damit unhandlich zu sein – oder schlicht nicht gebraucht zu werden (eine Verletzung des [[CleanCode/You Ain't Gonna Need It|YAGNI]]-Prinzips, s.o. und im [[CleanCode/Roter Grad|roten Grad]]\n-   Wer von unten nach oben implementiert, läuft Gefahr, nicht wirklich zu entkoppeln. Denn wenn tiefere Schichten nötig sind, um darüberliegende zu implementieren, dann werden wahrscheinlich keine wirklich isolierten [[CleanCode/Unit Test|Unit Tests]] mit Attrappen eingesetzt und auch keine Inversion of Control.\n\n[[CleanCode/Clean Code Developer]] vermeiden diese Probleme jedoch. Sie spezifizieren Schnittstelle nicht nur vor den Implementationen (Contract-first, s.o. Komponentenorientierung), sondern auch von außen nach innen und ganz praktisch durch Codierung. Mit den Mitteln des automatisierten Testens ist es nämlich sehr einfach, Schnittstellen in kleinen Schritten in Form von Tests zu definieren.\n\nTest first fügt dadurch syntaktischen Kontrakten (z.B. Interfaces) eine semantische Seite hinzu. In Ermangelung anderer, formaler Methoden, um Semantik zu spezifizieren, sind Tests der einzige Weg, um Anforderungen zu formalisieren. Wer einem Entwickler eine Komponente zur Implementierung zuweisen will, der tut daher gut daran, nicht nur ihre „Oberfläche“ (API) syntaktisch vorzugeben, sondern auch das gewünschte Verhalten in Form von Tests.\n\nDas hat viele Vorteile:\n\n-   Die Form einer Schnittstelle ist unmittelbar Client-getrieben und damit maximal relevant. [[CleanCode/You Ain't Gonna Need It|YAGNI]] hat keine Chance.\n-   Die Tests sind nicht nur Tests, sondern auch Spezifikationsdokumentation. Nutzer einer Schnittstelle und Implementierer können sie gleichermaßen studieren. Eine separate Dokumentation erübrigt sich weitgehend. Das tut dem [[CleanCode/DRY]]-Prinzip genüge.\n-   Die Spezifikationen sind nicht nur passive Texte, sondern ausführbarer Code. Wenn dann eine Implementation vorliegt, kann sie gegen diese Tests geprüft werden. Spezifikation und Test sind damit nicht zeitraubend aufeinanderfolgende Phasen. Das erhöht die Produktivität. Qualitätssicherung ist so der Implementation schon vorgeschaltet.\n\nSiehe auch unter [Tools](https://clean-code-developer.de/weitere-infos/werkzeuge/).\n\nWeiter geht’s mit dem [[CleanCode/Weißer Grad|weißen Grad]].","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Unit-Test":{"title":"Unit Test","content":"tags: #cleancode \n\n# Unit Test","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Version-Control-System":{"title":"Version Control System","content":"#cleancode \n# Version Control System\n\n\u003e**Warum?**\n\u003eSymptome behandeln bringt vielleicht schnell eine Linderung – langfristig kostet es aber mehr Aufwand. Wer stattdessen unter die Oberfläche von Problemen schaut, arbeitet am Ende effizienter.\n\nUnabdingbare Voraussetzung für jeden [[CleanCode/Clean Code Developer]] ist es, seinen Code unter den Schutz eines Versionskontrollsystems zu stellen. Ob das Mercurial, Git, Subversion, VSS, TFS oder Vault ist, spielt dabei keine Rolle. Wir meinen nur, dass heute keine Arbeit an Code mehr durchgeführt werden sollte, ohne ihn in einem Versionskontrollsystem zu pflegen. Der Grund dafür ist ganz simpel: Ein Versionskontrollsystem befreit von Angst. Und Angstfreiheit ist nötig, um mutig die Prinzipien und Praktiken des CCD-Wertesystems umzusetzen.\n\nEin Versionskontrollsystem nimmt die Angst, etwas falsch und damit kaputt zu machen. Wenn Code in ihm gehalten wird, kann jeder CCD den Code nach Belieben verändern, ohne befürchten zu müssen, einen erreichten Stand zu zerstören. Nichts geht verloren. Das Versionskontrollsystem ist wie eine Zeitmaschine für Code.\n\nDamit ist ein Versionskontrollsystem die allerbeste Grundlage für alles Lernen. Denn Lernen bedeutet Fehler machen. Mit einem Versionskontrollsystem als Sicherheitsnetz können wir uns alle Fehler erlauben. Deshalb: Erste Voraussetzung für den Einstieg ins Clean Code Development ist der ständige Gebrauch eines Versionskontrollsystems.\n\nWo das im Projekt nicht möglich ist, sehen wir das Fundament für Clean Code Development abwesend. Wir würden auch nicht verstehen, warum der Einsatz eines Versionskontrollwerkzeuges nicht möglich sein sollte. Kosten müssen dafür nicht anfallen und der Einarbeitungsaufwand in die einfachsten Funktionen ist minimal. CCD schreibt ja keine bestimmte Nutzung eines Versionskontrollsystems vor, sondern nur, dass eines benutzt werden muss.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Visitor":{"title":"Visitor","content":"tags:  #cleancode/designpatterns \n\n# Visitor\n\n## Intent\n**Visitor** is a behavioral design pattern that lets you separate algorithms from the objects on which they operate.\n\n## Problem\nImagine that your team develops an app which works with geographic information structured as one colossal graph. Each node of the graph may represent a complex entity such as a city, but also more granular things like industries, sightseeing areas, etc. The nodes are connected with others if there’s a road between the real objects that they represent. Under the hood, each node type is represented by its own class, while each specific node is an object.\n\n![Exporting the graph into XML](https://refactoring.guru/images/patterns/diagrams/visitor/problem1.png)\n\nExporting the graph into XML.\n\nAt some point, you got a task to implement exporting the graph into XML format. At first, the job seemed pretty straightforward. You planned to add an export method to each node class and then leverage recursion to go over each node of the graph, executing the export method. The solution was simple and elegant: thanks to polymorphism, you weren’t coupling the code which called the export method to concrete classes of nodes.\n\nUnfortunately, the system architect refused to allow you to alter existing node classes. He said that the code was already in production and he didn’t want to risk breaking it because of a potential bug in your changes.\n\n![The XML export method had to be added into all node classes](https://refactoring.guru/images/patterns/diagrams/visitor/problem2-en.png)\n\nThe XML export method had to be added into all node classes, which bore the risk of breaking the whole application if any bugs slipped through along with the change.\n\nBesides, he questioned whether it makes sense to have the XML export code within the node classes. The primary job of these classes was to work with geodata. The XML export behavior would look alien there.\n\nThere was another reason for the refusal. It was highly likely that after this feature was implemented, someone from the marketing department would ask you to provide the ability to export into a different format, or request some other weird stuff. This would force you to change those precious and fragile classes again.\n\n##  Solution\n\nThe Visitor pattern suggests that you place the new behavior into a separate class called _visitor_, instead of trying to integrate it into existing classes. The original object that had to perform the behavior is now passed to one of the visitor’s methods as an argument, providing the method access to all necessary data contained within the object.\n\nNow, what if that behavior can be executed over objects of different classes? For example, in our case with XML export, the actual implementation will probably be a little bit different across various node classes. Thus, the visitor class may define not one, but a set of methods, each of which could take arguments of different types, like this:\n\n```kotlin\nclass ExportVisitor implements Visitor is\n    method doForCity(City c) { ... }\n    method doForIndustry(Industry f) { ... }\n    method doForSightSeeing(SightSeeing ss) { ... }\n    // ...\n```\n\nBut how exactly would we call these methods, especially when dealing with the whole graph? These methods have different signatures, so we can’t use polymorphism. To pick a proper visitor method that’s able to process a given object, we’d need to check its class. Doesn’t this sound like a nightmare?\n\n```kotlin\nforeach (Node node in graph)\n    if (node instanceof City)\n        exportVisitor.doForCity((City) node)\n    if (node instanceof Industry)\n        exportVisitor.doForIndustry((Industry) node)\n    // ...\n}\n```\n\nYou might ask, why don’t we use method overloading? That’s when you give all methods the same name, even if they support different sets of parameters. Unfortunately, even assuming that our programming language supports it at all (as Java and C# do), it won’t help us. Since the exact class of a node object is unknown in advance, the overloading mechanism won’t be able to determine the correct method to execute. It’ll default to the method that takes an object of the base `Node` class.\n\nHowever, the Visitor pattern addresses this problem. It uses a technique called [Double Dispatch](https://refactoring.guru/design-patterns/visitor-double-dispatch), which helps to execute the proper method on an object without cumbersome conditionals. Instead of letting the client select a proper version of the method to call, how about we delegate this choice to objects we’re passing to the visitor as an argument? Since the objects know their own classes, they’ll be able to pick a proper method on the visitor less awkwardly. They “accept” a visitor and tell it what visiting method should be executed.\n\n```kotlin\n// Client code\nforeach (Node node in graph)\n    node.accept(exportVisitor)\n\n// City\nclass City is\n    method accept(Visitor v) is\n        v.doForCity(this)\n    // ...\n\n// Industry\nclass Industry is\n    method accept(Visitor v) is\n        v.doForIndustry(this)\n    // ...\n\n```\n\nI confess. We had to change the node classes after all. But at least the change is trivial and it lets us add further behaviors without altering the code once again.\n\nNow, if we extract a common interface for all visitors, all existing nodes can work with any visitor you introduce into the app. If you find yourself introducing a new behavior related to nodes, all you have to do is implement a new visitor class.\n\n##  Real-World Analogy\n\n![Insurance agent](https://refactoring.guru/images/patterns/content/visitor/visitor-comic-1.png)\n\nA good insurance agent is always ready to offer different policies to various types of organizations.\n\nImagine a seasoned insurance agent who’s eager to get new customers. He can visit every building in a neighborhood, trying to sell insurance to everyone he meets. Depending on the type of organization that occupies the building, he can offer specialized insurance policies:\n\n-   If it’s a residential building, he sells medical insurance.\n-   If it’s a bank, he sells theft insurance.\n-   If it’s a coffee shop, he sells fire and flood insurance.\n\n##  Structure\n\n![Structure of the Visitor design pattern](https://refactoring.guru/images/patterns/diagrams/visitor/structure-en.png)\n\n1.  The **Visitor** interface declares a set of visiting methods that can take concrete elements of an object structure as arguments. These methods may have the same names if the program is written in a language that supports overloading, but the type of their parameters must be different.\n    \n2.  Each **Concrete Visitor** implements several versions of the same behaviors, tailored for different concrete element classes.\n    \n3.  The **Element** interface declares a method for “accepting” visitors. This method should have one parameter declared with the type of the visitor interface.\n    \n4.  Each **Concrete Element** must implement the acceptance method. The purpose of this method is to redirect the call to the proper visitor’s method corresponding to the current element class. Be aware that even if a base element class implements this method, all subclasses must still override this method in their own classes and call the appropriate method on the visitor object.\n    \n5.  The **Client** usually represents a collection or some other complex object (for example, a [Composite](https://refactoring.guru/design-patterns/composite) tree). Usually, clients aren’t aware of all the concrete element classes because they work with objects from that collection via some abstract interface.\n    \n\n##  Pseudocode\n\nIn this example, the **Visitor** pattern adds XML export support to the class hierarchy of geometric shapes.\n\n![Structure of the Visitor pattern example](https://refactoring.guru/images/patterns/diagrams/visitor/example.png)\n\nExporting various types of objects into XML format via a visitor object.\n\n```kotlin\n// The element interface declares an `accept` method that takes\n// the base visitor interface as an argument.\ninterface Shape is\n    method move(x, y)\n    method draw()\n    method accept(v: Visitor)\n\n// Each concrete element class must implement the `accept`\n// method in such a way that it calls the visitor's method that\n// corresponds to the element's class.\nclass Dot implements Shape is\n    // ...\n\n    // Note that we're calling `visitDot`, which matches the\n    // current class name. This way we let the visitor know the\n    // class of the element it works with.\n    method accept(v: Visitor) is\n        v.visitDot(this)\n\nclass Circle implements Shape is\n    // ...\n    method accept(v: Visitor) is\n        v.visitCircle(this)\n\nclass Rectangle implements Shape is\n    // ...\n    method accept(v: Visitor) is\n        v.visitRectangle(this)\n\nclass CompoundShape implements Shape is\n    // ...\n    method accept(v: Visitor) is\n        v.visitCompoundShape(this)\n\n// The Visitor interface declares a set of visiting methods that\n// correspond to element classes. The signature of a visiting\n// method lets the visitor identify the exact class of the\n// element that it's dealing with.\ninterface Visitor is\n    method visitDot(d: Dot)\n    method visitCircle(c: Circle)\n    method visitRectangle(r: Rectangle)\n    method visitCompoundShape(cs: CompoundShape)\n\n// Concrete visitors implement several versions of the same\n// algorithm, which can work with all concrete element classes.\n//\n// You can experience the biggest benefit of the Visitor pattern\n// when using it with a complex object structure such as a\n// Composite tree. In this case, it might be helpful to store\n// some intermediate state of the algorithm while executing the\n// visitor's methods over various objects of the structure.\nclass XMLExportVisitor implements Visitor is\n    method visitDot(d: Dot) is\n        // Export the dot's ID and center coordinates.\n\n    method visitCircle(c: Circle) is\n        // Export the circle's ID, center coordinates and\n        // radius.\n\n    method visitRectangle(r: Rectangle) is\n        // Export the rectangle's ID, left-top coordinates,\n        // width and height.\n\n    method visitCompoundShape(cs: CompoundShape) is\n        // Export the shape's ID as well as the list of its\n        // children's IDs.\n\n// The client code can run visitor operations over any set of\n// elements without figuring out their concrete classes. The\n// accept operation directs a call to the appropriate operation\n// in the visitor object.\nclass Application is\n    field allShapes: array of Shapes\n\n    method export() is\n        exportVisitor = new XMLExportVisitor()\n\n        foreach (shape in allShapes) do\n            shape.accept(exportVisitor)\n\n```\n\nIf you wonder why we need the `accept` method in this example, my article [Visitor and Double Dispatch](https://refactoring.guru/design-patterns/visitor-double-dispatch) addresses this question in detail.\n##  Applicability\n- **Use the Visitor when you need to perform an operation on all elements of a complex object structure (for example, an [[CleanCode/Composite|object tree]]).**\n\tThe Visitor pattern lets you execute an operation over a set of objects with different classes by having a visitor object implement several variants of the same operation, which correspond to all target classes.\n- **Use the Visitor to clean up the business logic of auxiliary behaviors.**\n\tThe pattern lets you make the primary classes of your app more focused on their main jobs by extracting all other behaviors into a set of visitor classes.\n- **Use the pattern when a behavior makes sense only in some classes of a class hierarchy, but not in others.**\n\tYou can extract this behavior into a separate visitor class and implement only those visiting methods that accept objects of relevant classes, leaving the rest empty.\n\n## How to Implement\n1.  Declare the visitor interface with a set of “visiting” methods, one per each concrete element class that exists in the program.\n    \n2.  Declare the element interface. If you’re working with an existing element class hierarchy, add the abstract “acceptance” method to the base class of the hierarchy. This method should accept a visitor object as an argument.\n    \n3.  Implement the acceptance methods in all concrete element classes. These methods must simply redirect the call to a visiting method on the incoming visitor object which matches the class of the current element.\n    \n4.  The element classes should only work with visitors via the visitor interface. Visitors, however, must be aware of all concrete element classes, referenced as parameter types of the visiting methods.\n    \n5.  For each behavior that can’t be implemented inside the element hierarchy, create a new concrete visitor class and implement all of the visiting methods.\n    \n    You might encounter a situation where the visitor will need access to some private members of the element class. In this case, you can either make these fields or methods public, violating the element’s encapsulation, or nest the visitor class in the element class. The latter is only possible if you’re lucky to work with a programming language that supports nested classes.\n    \n6.  The client must create visitor objects and pass them into elements via “acceptance” methods.\n\n## Pro and  Cons\n| Pros | Cons |\n| --- | --- |\n| _[[CleanCode/Open Closed Principle]]_. You can introduce a new behavior that can work with objects of different classes without changing these classes. | You need to update all visitors each time a class gets added to or removed from the element hierarchy. |\n| _[[CleanCode/Single Responsibility Principle]]_. You can move multiple versions of the same behavior into the same class. | Visitors might lack the necessary access to the private fields and methods of the elements that they’re supposed to work with. |\n| A visitor object can accumulate some useful information while working with various objects. This might be handy when you want to traverse some complex object structure, such as an [[Composite|object tree]], and apply the visitor to each object of this structure. ||\n\n## Relations with Other Patterns\n- You can treat Visitor as a powerful version of the [[CleanCode/Command]] pattern. Its objects can execute operations over various objects of different classes.\n- You can use Visitor to execute an operation over an entire [[CleanCode/Composite]] tree.\n- You can use Visitor along with [[CleanCode/Iterator]] to traverse a complex data structure and execute some operation over its elements, even if they all have different classes.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/Wei%C3%9Fer-Grad":{"title":"Weißer Grad","content":"tags: #cleancode \n\n# Weißer Grad\nVereinigung aller Prinzipien und Praktiken","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/CleanCode/You-Aint-Gonna-Need-It":{"title":"You Ain't Gonna Need It","content":"tags: #cleancode \n\n# You Ain’t Gonna Need It \n\n\u003e**Warum?**\nDinge die niemand braucht, haben keinen Wert. Verschwende an sie also keine Zeit.\n\nDas YAGNI-Prinzip (_You Ain´t Gonna Need It_) ist eines der einfachsten in der Softwareentwicklung – und doch wohl das nach dem [[CleanCode/DRY]]-Prinzip am häufigsten verletzte Prinzip. Deshalb steht YAGNI nicht nur am Anfang des [[CleanCode/Roter Grad|roten Grades]], sondern auch hier gegen Ende des Weges durch das [[CleanCode/Clean Code Developer#Wertesystem|Wertesystem]].\n\nGeschuldet ist das YAGNI-Prinzip dem in der Softwareentwicklung besonderen Verhältnis von Anforderungsgenauigkeit und Produktmaterialität. Anforderungen sind notorisch ungenau oder wechselnd und das Produkt, in dem sie umgesetzt werden sollen, immateriell. Im Vergleich zum Maschinen- oder Gebäudebau ist das Material also unendlich flexibel und kann sich prinzipiell mit vergleichsweise wenig Aufwand an quasi jede Anforderung anpassen lassen. Hohe Volatiliät bzw. Ungenauigkeit trifft also auf hohe Flexibilität. Das scheint zunächst einmal ideal.\n\nDie Praxis zeigt jedoch, dass gerade in diesem Verhältnis der Keim des Misserfolges vieler Projekte liegt. Kurzfristig betrachtet, versuchen die Projekte mit dem Naheliegenden auch das Richtige zu tun:\n\n-   Ungenaue Anforderungen werden oft kompensiert durch Produkte, die versuchen, die Ungenauigkeit zu kompensieren. Die Immaterialität von Software wird dazu genutzt, so breit und flexibel zu implementieren, dass auch noch unbekannte oder schwammige Anforderungen quasi schon im vorauseilenden Gehorsam erfüllt werden.\n-   Ständig wechselnde Anforderungen werden im Produkt möglichst schnell nachgeführt, weil das dank seiner Immaterialität möglich ist.\n\nLangfristig ist solches Verhalten allerdings kontraproduktiv:\n\n-   Der vorauseilende Gehorsam führt zu Breite und Flexibilität, die nicht wirklich gebraucht werden. Er realisiert Features, die keine Anwendung finden.\n-   Schnelle Umbauten an Software aufgrund wechselnder Anforderungen führen zu Qualitätserosionen im Code. Software ist zwar immateriell und flexibel – aber nicht jede Softwarestruktur ist evolvierbar oder auch nur verständlich.\n\nUnklare und wechselnde Anforderungssituationen vor dem Hintergrund der hohen grundsätzlichen Flexibilität von Software führen schnell zu unnötigen Aufwänden und sprödem Code. Eine große Anzahl von Projekten, die ihre Budgetgrenzen gesprengt haben, und eine noch größere Zahl von Projekten, die schon nach wenigen Jahren unwartbar geworden sind, sind dafür beredtes Zeugnis.\n\n[[CleanCode/Clean Code Developer|CCD]] als professionelle Softwareentwickler sehen es als ihre Pflicht, sich solcher Entwicklung jeden Tag entgegen zu stemmen. Angesichts der nicht zu leugnenden Natur von Software – sie ist und bleibt immateriell -, liegt der Ansatz dafür beim Umgang mit den Anforderungen. Das ist der Ursprung des YAGNI-Prinzips.\n\nDas YAGNI-Prinzip ist wie ein scharfes Messer: Wer sie anwendet, schneidet ein Problem in kleine Würfel des unmittelbar Nötigen. Nach dem YAGNI-Prinzip wird nur das unzweifelhaft und unmittelbar Nutzbringende implementiert. Alles andere… nun, das kommt später. Insofern geht YAGNI Hand in Hand mit der Regel „Entscheide so spät wie möglich“ des [Lean Software Development](http://en.wikipedia.org/wiki/Lean_software_development#Decide_as_late_as_possible).\n\nDas YAGNI-Prinzip ist relevant auf allen Ebenen der Softwareentwicklung und in allen Phasen. Wann immer Sie sich Fragen „Sollte ich diesen Aufwand wirklich treiben?“ oder „Brauchen wir das wirklich?“ – und sei es auch nur ganz verschämt und leise im Hinterkopf -, dann ist das ein Anwendungsfall für das YAGNI-Prinzip. Es besagt: Wenn im Zweifel, entscheide dich gegen den Aufwand.\n\nDas klingt leicht, ist aber schwer. Daher auch die häufigen Zuwiderhandlungen. Es gibt viele Kräfte, die der Entscheidung gegen einen Aufwand widersprechen. „Ach, das ist doch gar nicht soviel Aufwand“ oder „Wenn wir jetzt nicht vorausschauen, dann können wir in Zukunft nicht mehr anders“ sind nur zwei naheliegende Begründungen für Aufwand, auch wenn Zweifel an seinem Nutzen bestehen. Das betrifft architektonische Entscheidungen (z.B. Soll schon mit einer verteilten Architektur begonnen werden, auch wenn die heutige Last sie noch nicht bräuchte?) wie lokale Entscheidungen (z.B. Soll der Algorithmus schon jetzt optimiert werden, auch wenn er im Augenblick noch keine Performanceprobleme macht?).\n\nDer Kunde bezahlt nur für unmittelbaren Nutzen. Was er heute nicht klar spezifizieren kann, nutzt ihm nicht. Es in der Implementation voraussehen zu wollen, investiert also Aufwand ohne Nutzen zu generieren. Wenn der Kunde später einmal genauer weiß, was er will, dann – und nicht früher! – ist es Zeit, seinem Willen nachzukommen. Wo immer aber ein Projekt versucht, diesen Willen vorwegzunehmen riskiert es, von der morgigen Willensrealität des Kunden widerlegt zu werden. Ein Feature – funktional oder nicht-funktional -, das heute ohne klare Anforderung implementiert wird, interessiert den Kunden morgen vielleicht schon nicht mehr. Oder es ist ihm nicht mehr so wichtig wie ein anderes Feature.\n\nDas bedeutet für die Softwareentwicklung:\n\n-   Ausschließlich klare Anforderungen implementieren.\n-   Der Kunde priorisiert seine klaren Anforderungen.\n-   Die klaren Anforderungen in der Reihenfolge ihrer Priorisierung umsetzen.\n-   Entwicklungsprozess und Codestruktur im Großen und Kleinen so aufsetzen, dass keine Angst aufkommt, sich ändernde und neue Anforderungen zu realisieren.\n\n[[CleanCode/Clean Code Developer|CCD]] als professionelle Entwickler kommunizieren diese Vorgehensweise unmissverständlich dem Kunden gegenüber. Dadurch werden sie:\n\n-   servicewillig, denn sie müssen dem Kunden keine klare Anforderung abschlagen\n-   verantwortungsbewusst, weil sie das Budget nur für klar formulierten Nutzen einsetzen\n-   beschützend dem Code gegenüber, weil sie ihn gegen Überladung mit letztlich Unnötigem bewahren\n\nYAGNI ist deshalb nicht nur ein Prinzip, das jeder Entwickler befolgen soll, sondern auch ein Prinzip für Projekte und Teams, also auf Organisationsebene. YAGNI ist immer in Anschlag zu bringen, genauso wie [[CleanCode/DRY]]. Wenn im Zweifel, dann verschiebe die Entscheidung falls möglich. Ansonsten entscheide dich gegen den Aufwand. Das entspannt und entschlackt und führt schneller zum Erfolg.","lastmodified":"2023-02-21T12:09:42.538800256Z","tags":null},"/Random-Page":{"title":"Random Page","content":"\nMan muss es ja mal versuchen obs an submodules liegt","lastmodified":"2023-02-21T12:09:41.902762078Z","tags":null}}