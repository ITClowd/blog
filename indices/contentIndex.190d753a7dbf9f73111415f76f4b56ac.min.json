{"/":{"title":"Moritz Vogel","content":"\nHello There üëã. This is a small blog about stuff i find interesting.\nIt will mostly be about computer science, music and baking\n\nYou can get Started here:\n[[Publishing Obsidian via Github Actions]]","lastmodified":"2023-03-14T13:29:42.416632032Z","tags":null},"/How-to-create-author-pages-in-Quartz":{"title":"How to create author pages in Quartz","content":"## Why author pages\nAs I am still building this blog, I wanted to add author pages, so a reader always can look who is writing the blog articles if I ever wanted to allow others to write articles on my blog. \n\n## My search process\nAs Quartz is based on hugo, that's where I started looking on how to do it on the [offical hugo documentation](https://gohugo.io/content-management/taxonomies/). But it just showed errors when I tried to do it exactly how it is explained there. So I experimented with a few solutions from blogs I found. (Mainly this one on [Netlify](https://www.netlify.com/blog/2018/07/24/hugo-tips-how-to-create-author-pages/))\n\n## The Solution\nSo how does it work?\n\n### 1. Folder Structure\nAs first step, you need to create the author pages as .md files. Therefore, you need to create the following folder structure:\n![[media/author_pages_folderstructure.png]]\n\u003e[!info] \n\u003eNote, that the actual .md page is call `_index.md` with an underscore and the folder name is \"slugified\" (Instead of Moritz Vogel its moritz-vogel)\n### 2. Create Taxonomy\nIn the `config.toml` you need to define the ‚Äúauthor‚Äù taxonomy:\n```toml\n[taxonomies]\nauthor = \"authors\"\ntag = \"tags\"\ncategory = \"categories\"\n```\n\nYou need to define the default taxonomies ‚Äútag‚Äù and ‚Äúcategory‚Äù if you plan on using them.\n\n### 3. Create And Adjust Page Templates\nIn order to show the pages properly, I needed to add the following files:\nunder `layouts/authors/list.html` I added:\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"{{ .Lang }}\"\u003e\n{{ partial \"head.html\" . }}\n\n\u003cbody\u003e\n{{partial \"search.html\" .}}\n\u003cdiv class=\"singlePage\"\u003e\n    {{partial \"header.html\" .}}  \n\n    \u003cimg src=\"{{ .Params.photo }}\" alt=\"\"/\u003e\n    \u003ch1\u003e{{ .Params.name }}\u003c/h1\u003e\n    \n    {{ .Content }}\n   \n    \n    \u003ch3\u003eArticles\u003c/h3\u003e\n    \u003cul\u003e\n    {{ range .Data.Pages }}\n        \u003cli\u003e\u003ca href=\"{{ .Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e\n    {{ end }}\n    \u003c/ul\u003e\n\u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\nWhich is the page for one single author. It is available under [blog.vogel.business/authors/moritz-vogel](https://blog.vogel.business/authors/moritz-vogel)\nI also added an overview page of all authors:\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"{{ .Lang }}\"\u003e\n{{ partial \"head.html\" . }}\n\n\u003cbody\u003e\n{{partial \"search.html\" .}}\n\u003cdiv class=\"singlePage\"\u003e\n    \u003c!-- Begin actual content --\u003e\n    {{partial \"header.html\" .}}\n    \u003ch1\u003eAuthors\u003c/h1\u003e\n    \u003cul\u003e\n    {{ range .Data.Pages }}\n      \u003cli\u003e\u003ca href=\"{{ .Permalink }}\"\u003e{{ .Params.name }}\u003c/a\u003e\u003c/li\u003e\n    {{ end }}\n    \u003c/ul\u003e\n\u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\nwhich is available under [blog.vogel.business/authors/](https://blog.vogel.business/authors/)\n\nYou also need to show all the authors in the article, so I added this to `layouts/_default/single.html`\n```html\n{{- range .Params.authors }}\n\t{{- with $.Site.GetPage \"taxonomyTerm\" (printf \"authors/%s\" (urlize .)) }}\n\t\t\u003ca href=\"{{ .Permalink }}\"\u003e{{ .Params.name }}\u003c/a\u003e\n\t{{ end }}\n{{ end }}\n```\n\n### 4. Add Authors to Pages\nNow all you need to do is adding the author to the pages in the YAML-Frontmatter:\n```YAML\n---\ntitle: \"How to create author pages in Quartz\"\nauthors:\n  - \"Moritz Vogel\"\n---\n```\n","lastmodified":"2023-03-14T13:29:42.412631792Z","tags":null},"/Publishing-Obsidian-via-Github-Actions":{"title":"Publishing Obsidian via Github Actions","content":"\n## Background Story\nA few months ago, I started my own [\"Second Brain\"](https://knowledge.vogel.business) (for which I use [Obsidian](https://obsidian.md)). I really liked that I can structure my learnings and summaries from my lectures in a way I feel most comfortable with.  Just a few weeks after I started using Obsidian, I thought: ‚Äúwouldn't it be great if I could access my Vault remotely from any device?‚Äù So I looked at my options:\n\n### 1. Using Obsidian Sync\nI saw, that Obsidian is offering a subscription Service for syncing Obsidian vaults to all of your devices. But while that would be a fairly easy way to achieve my desired result, I would need Obsidian installed on every device I want to look at my knowledge base.\n\n### 2. Using Obsidian publish\nOn the same page, I saw that Obsidian is offering a publishing service as well. But for me as a software engineer it seemed like wasted money because I was sure it could be achieved with resources that are either free or already available to me.\n\n### 3. Using Quartz\nSince I decided I didn't want to spend any money on this, I started using git as version control for my knowledge base. This made Obsidian Sync obsolete because I could sync my files between all my machines without any problems. I did however have some difficulties with git on my phone, so I thought that I could use CI/CD to publish my Vault to a website, so I could view it from anywhere.\n\n\n### Implementation Rules\nLuckily I found a repo which achieved mostly what I want: [Quartz](https://github.com/jackyzha0/quartz) (it is based on Hugo, which I wanted to check out anyway)\n\nBefore I started using Quartz, I made a few rules on how I want my vault deployed:\n1. **Fully automated**\n   I do not want to have to compile any markdown files to HTML files. I just want to commit my changes from Obsidian and want the changes to be automatically deployed to the webpage\n2. **Compatible with my current vault**\n   I do not want to rebuild my current vault to fit a specific format. \n\n## Setup\nSo how is my current setup?\nI followed the setup instructions from Quartz, which are already pretty good, but I had a few Problems:\n- I wanted to use git submodules to import the topics from my vault which I think are worth sharing with the public. The deployment process did not work with submodules from scratch, but a small adjustment in the `.github/workflows/deploy.yaml` did the trick:\n```yaml\n  ...\n  jobs:\n¬† deploy:\n¬† ¬† runs-on: ubuntu-20.04\n¬† ¬† steps:\n¬† ¬† ¬† - uses: actions/checkout@v2\n¬† ¬† ¬† ¬† with:\n¬† ¬† ¬† ¬† ¬† fetch-depth: 0\n¬† ¬† ¬† ¬† ¬† submodules: recursive\n  ...\n```\n\n- However, I still have the problem, that some features like ‚ÄúLast changed by:\" don't work if the files are in a submodule (feel free to contact me if you have a solution for that!)\n- My current vault does not have `title` attributes in the YAML-frontmatter, so I need a way to automatically add this to the files.\n- I do not tag my files in the YAML-frontmatter so hugo does not recognize them as such.\n\nI did not solve these problems yet, but I found some interesting projects which partly address these Problems\n\nI changed some of these problems by hand to test out the rest of the setup. So I pushed my manual changes, and voil√†: I had a GitHub page ready to go.\nI added a custom domain and quickly personalized hugo and now my knowledge base is available to the public under https://knowledge.vogel.business.\n\nThis blog is made in the same way, just a different vault! (Read the story: [[How this blog was born]])\n\n## Future plans\n- I want to take a look at a [modified version of obsidian-export](https://github.com/brandonkboswell/obsidian-export/tree/title_frontmatter) which can add the filename as title attribute to the YAML-frontmatter. However, the author descriped a process which needs to run on the local machine before pushing, so I want to automate that process with GitHub Actions\n- I need to restructure my vault a little bit: in the future I include title and tags in the frontmatter and I want to remove the first headline since most renderers use the filename as title.","lastmodified":"2023-03-14T13:29:42.416632032Z","tags":null},"/Using-local-Google-Fonts-in-Hugo":{"title":"Using local Google Fonts in Hugo","content":"\nAs I was customizing this blog, I wanted to change the fonts to fit the style of my [Website](https://vogel.business).  I used three different Fonts there:\n- Red Hat Mono\n- Red Hat Display\n- DM Serif Display\n\nTo comply to local law I needed to host the Google Fonts by myself, so I needed to do this again for this blog. Google explains how you can do this in this [blog post](https://fonts.google.com/knowledge/using_type/self_hosting_web_fonts). But you basically just download the font that is referenced in the stylesheet and change that reference to a local path.\n\n## Problem\nSo I downloaded the fonts and put them in the asset folder, like I would normally do in frameworks like [vue.js](https://vuejs.org/). But after I pushed my changes to GitHub pages, the fonts were not available in the specified path.\n\n## Solution\nBecause hugo uses a webpacker the paths from the development environment do not exist any more, but I noticed that files from the `static/` folder seem to be in the root directory of the compiled version of the project. \n\nSo I moved my fonts into `static/fonts` and referenced the fonts with `fonts/\u003cFONT_NAME\u003e`\n\n## Example\nTo reference the *DM Serif Display* font for example, you need to add the following to the `assets/styles/custom.scss`:\n```scss\n/* latin-ext */\n@font-face {\n¬† font-family: 'DM Serif Display';\n¬† font-style: normal;\n¬† font-weight: 400;\n¬† font-display: swap;\n¬† src: url(/fonts/-nFnOHM81r4j6k0gjAW3mujVU2B2G_5x0ujy.woff2) format('woff2');\n¬† unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n/* latin */\n@font-face {\n\tfont-family: 'DM Serif Display';\n\tfont-style: normal;\n\tfont-weight: 400;\n\tfont-display: swap;\n\tsrc: url(/fonts/-nFnOHM81r4j6k0gjAW3mujVU2B2G_Bx0g.woff2) format('woff2');\n\tunicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n:root {\n\t--font-body: \"Roboto Serif\";\n\t--font-header: \"DM Serif Display\";\n\t--font-mono: \"Red Hat Mono\"\n}\n```\n\n\u003e[!warning] As you can see the relative path does not correspond to the folder structure of your development environment! The path changes after it is compiled by the webpacker\n![[media/static_fonts_folderstructure.png]]","lastmodified":"2023-03-14T13:29:42.416632032Z","tags":null},"/authors/moritz-vogel/":{"title":"Moritz Vogel","content":"### Bio\nMy name is Moritz Vogel. I am currently becoming a Software Developer and I am interested in topics like Clean Code, Software Architecture and UX-Design. I am always trying to improve my code quality. I held a few internal talks about these topics at my current workplace to spread the benefits of clean code.\n\nTo free my head in the evenings I have several hobbies like making music and baking. I play the clarinet, drums and electrical bass.\n","lastmodified":"2023-03-14T13:29:42.416632032Z","tags":null}}